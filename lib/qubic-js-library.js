(function webpackUniversalModuleDefinition(root, factory) {
  if (typeof exports === 'object' && typeof module === 'object')
    module.exports = factory();
  else if (typeof define === 'function' && define.amd)
    define("qli", [], factory);
  else if (typeof exports === 'object')
    exports["qli"] = factory();
  else
    root["qli"] = factory();
})(self, () => {
  return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/bignumber.js/bignumber.js":
/*!************************************************!*\
  !*** ./node_modules/bignumber.js/bignumber.js ***!
  \************************************************/
/***/ (function (module, exports, __webpack_require__) {

          var __WEBPACK_AMD_DEFINE_RESULT__;; (function (globalObject) {
            'use strict';

            /*
             *      bignumber.js v9.1.2
             *      A JavaScript library for arbitrary-precision arithmetic.
             *      https://github.com/MikeMcl/bignumber.js
             *      Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>
             *      MIT Licensed.
             *
             *      BigNumber.prototype methods     |  BigNumber methods
             *                                      |
             *      absoluteValue            abs    |  clone
             *      comparedTo                      |  config               set
             *      decimalPlaces            dp     |      DECIMAL_PLACES
             *      dividedBy                div    |      ROUNDING_MODE
             *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT
             *      exponentiatedBy          pow    |      RANGE
             *      integerValue                    |      CRYPTO
             *      isEqualTo                eq     |      MODULO_MODE
             *      isFinite                        |      POW_PRECISION
             *      isGreaterThan            gt     |      FORMAT
             *      isGreaterThanOrEqualTo   gte    |      ALPHABET
             *      isInteger                       |  isBigNumber
             *      isLessThan               lt     |  maximum              max
             *      isLessThanOrEqualTo      lte    |  minimum              min
             *      isNaN                           |  random
             *      isNegative                      |  sum
             *      isPositive                      |
             *      isZero                          |
             *      minus                           |
             *      modulo                   mod    |
             *      multipliedBy             times  |
             *      negated                         |
             *      plus                            |
             *      precision                sd     |
             *      shiftedBy                       |
             *      squareRoot               sqrt   |
             *      toExponential                   |
             *      toFixed                         |
             *      toFormat                        |
             *      toFraction                      |
             *      toJSON                          |
             *      toNumber                        |
             *      toPrecision                     |
             *      toString                        |
             *      valueOf                         |
             *
             */


            var BigNumber,
              isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,
              mathceil = Math.ceil,
              mathfloor = Math.floor,

              bignumberError = '[BigNumber Error] ',
              tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',

              BASE = 1e14,
              LOG_BASE = 14,
              MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1
              // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
              POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],
              SQRT_BASE = 1e7,

              // EDITABLE
              // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
              // the arguments to toExponential, toFixed, toFormat, and toPrecision.
              MAX = 1E9;                                   // 0 to MAX_INT32


            /*
             * Create and return a BigNumber constructor.
             */
            function clone(configObject) {
              var div, convertBase, parseNumeric,
                P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },
                ONE = new BigNumber(1),


                //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------


                // The default values below must be integers within the inclusive ranges stated.
                // The values can also be changed at run-time using BigNumber.set.

                // The maximum number of decimal places for operations involving division.
                DECIMAL_PLACES = 20,                     // 0 to MAX

                // The rounding mode used when rounding to the above decimal places, and when using
                // toExponential, toFixed, toFormat and toPrecision, and round (default value).
                // UP         0 Away from zero.
                // DOWN       1 Towards zero.
                // CEIL       2 Towards +Infinity.
                // FLOOR      3 Towards -Infinity.
                // HALF_UP    4 Towards nearest neighbour. If equidistant, up.
                // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
                // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
                // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
                // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
                ROUNDING_MODE = 4,                       // 0 to 8

                // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]

                // The exponent value at and beneath which toString returns exponential notation.
                // Number type: -7
                TO_EXP_NEG = -7,                         // 0 to -MAX

                // The exponent value at and above which toString returns exponential notation.
                // Number type: 21
                TO_EXP_POS = 21,                         // 0 to MAX

                // RANGE : [MIN_EXP, MAX_EXP]

                // The minimum exponent value, beneath which underflow to zero occurs.
                // Number type: -324  (5e-324)
                MIN_EXP = -1e7,                          // -1 to -MAX

                // The maximum exponent value, above which overflow to Infinity occurs.
                // Number type:  308  (1.7976931348623157e+308)
                // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
                MAX_EXP = 1e7,                           // 1 to MAX

                // Whether to use cryptographically-secure random number generation, if available.
                CRYPTO = false,                          // true or false

                // The modulo mode used when calculating the modulus: a mod n.
                // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
                // The remainder (r) is calculated as: r = a - n * q.
                //
                // UP        0 The remainder is positive if the dividend is negative, else is negative.
                // DOWN      1 The remainder has the same sign as the dividend.
                //             This modulo mode is commonly known as 'truncated division' and is
                //             equivalent to (a % n) in JavaScript.
                // FLOOR     3 The remainder has the same sign as the divisor (Python %).
                // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
                // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
                //             The remainder is always positive.
                //
                // The truncated division, floored division, Euclidian division and IEEE 754 remainder
                // modes are commonly used for the modulus operation.
                // Although the other rounding modes can also be used, they may not give useful results.
                MODULO_MODE = 1,                         // 0 to 9

                // The maximum number of significant digits of the result of the exponentiatedBy operation.
                // If POW_PRECISION is 0, there will be unlimited significant digits.
                POW_PRECISION = 0,                       // 0 to MAX

                // The format specification used by the BigNumber.prototype.toFormat method.
                FORMAT = {
                  prefix: '',
                  groupSize: 3,
                  secondaryGroupSize: 0,
                  groupSeparator: ',',
                  decimalSeparator: '.',
                  fractionGroupSize: 0,
                  fractionGroupSeparator: '\xA0',        // non-breaking space
                  suffix: ''
                },

                // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',
                // '-', '.', whitespace, or repeated character.
                // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'
                ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',
                alphabetHasNormalDecimalDigits = true;


              //------------------------------------------------------------------------------------------


              // CONSTRUCTOR


              /*
               * The BigNumber constructor and exported function.
               * Create and return a new instance of a BigNumber object.
               *
               * v {number|string|BigNumber} A numeric value.
               * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.
               */
              function BigNumber(v, b) {
                var alphabet, c, caseChanged, e, i, isNum, len, str,
                  x = this;

                // Enable constructor call without `new`.
                if (!(x instanceof BigNumber)) return new BigNumber(v, b);

                if (b == null) {

                  if (v && v._isBigNumber === true) {
                    x.s = v.s;

                    if (!v.c || v.e > MAX_EXP) {
                      x.c = x.e = null;
                    } else if (v.e < MIN_EXP) {
                      x.c = [x.e = 0];
                    } else {
                      x.e = v.e;
                      x.c = v.c.slice();
                    }

                    return;
                  }

                  if ((isNum = typeof v == 'number') && v * 0 == 0) {

                    // Use `1 / n` to handle minus zero also.
                    x.s = 1 / v < 0 ? (v = -v, -1) : 1;

                    // Fast path for integers, where n < 2147483648 (2**31).
                    if (v === ~~v) {
                      for (e = 0, i = v; i >= 10; i /= 10, e++);

                      if (e > MAX_EXP) {
                        x.c = x.e = null;
                      } else {
                        x.e = e;
                        x.c = [v];
                      }

                      return;
                    }

                    str = String(v);
                  } else {

                    if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);

                    x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
                  }

                  // Decimal point?
                  if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

                  // Exponential form?
                  if ((i = str.search(/e/i)) > 0) {

                    // Determine exponent.
                    if (e < 0) e = i;
                    e += +str.slice(i + 1);
                    str = str.substring(0, i);
                  } else if (e < 0) {

                    // Integer.
                    e = str.length;
                  }

                } else {

                  // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
                  intCheck(b, 2, ALPHABET.length, 'Base');

                  // Allow exponential notation to be used with base 10 argument, while
                  // also rounding to DECIMAL_PLACES as with other bases.
                  if (b == 10 && alphabetHasNormalDecimalDigits) {
                    x = new BigNumber(v);
                    return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
                  }

                  str = String(v);

                  if (isNum = typeof v == 'number') {

                    // Avoid potential interpretation of Infinity and NaN as base 44+ values.
                    if (v * 0 != 0) return parseNumeric(x, str, isNum, b);

                    x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;

                    // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
                    if (BigNumber.DEBUG && str.replace(/^0\.0*|\./, '').length > 15) {
                      throw Error
                        (tooManyDigits + v);
                    }
                  } else {
                    x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
                  }

                  alphabet = ALPHABET.slice(0, b);
                  e = i = 0;

                  // Check that str is a valid base b number.
                  // Don't use RegExp, so alphabet can contain special characters.
                  for (len = str.length; i < len; i++) {
                    if (alphabet.indexOf(c = str.charAt(i)) < 0) {
                      if (c == '.') {

                        // If '.' is not the first character and it has not be found before.
                        if (i > e) {
                          e = len;
                          continue;
                        }
                      } else if (!caseChanged) {

                        // Allow e.g. hexadecimal 'FF' as well as 'ff'.
                        if (str == str.toUpperCase() && (str = str.toLowerCase()) ||
                          str == str.toLowerCase() && (str = str.toUpperCase())) {
                          caseChanged = true;
                          i = -1;
                          e = 0;
                          continue;
                        }
                      }

                      return parseNumeric(x, String(v), isNum, b);
                    }
                  }

                  // Prevent later check for length on converted number.
                  isNum = false;
                  str = convertBase(str, b, 10, x.s);

                  // Decimal point?
                  if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');
                  else e = str.length;
                }

                // Determine leading zeros.
                for (i = 0; str.charCodeAt(i) === 48; i++);

                // Determine trailing zeros.
                for (len = str.length; str.charCodeAt(--len) === 48;);

                if (str = str.slice(i, ++len)) {
                  len -= i;

                  // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
                  if (isNum && BigNumber.DEBUG &&
                    len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {
                    throw Error
                      (tooManyDigits + (x.s * v));
                  }

                  // Overflow?
                  if ((e = e - i - 1) > MAX_EXP) {

                    // Infinity.
                    x.c = x.e = null;

                    // Underflow?
                  } else if (e < MIN_EXP) {

                    // Zero.
                    x.c = [x.e = 0];
                  } else {
                    x.e = e;
                    x.c = [];

                    // Transform base

                    // e is the base 10 exponent.
                    // i is where to slice str to get the first element of the coefficient array.
                    i = (e + 1) % LOG_BASE;
                    if (e < 0) i += LOG_BASE;  // i < 1

                    if (i < len) {
                      if (i) x.c.push(+str.slice(0, i));

                      for (len -= LOG_BASE; i < len;) {
                        x.c.push(+str.slice(i, i += LOG_BASE));
                      }

                      i = LOG_BASE - (str = str.slice(i)).length;
                    } else {
                      i -= len;
                    }

                    for (; i--; str += '0');
                    x.c.push(+str);
                  }
                } else {

                  // Zero.
                  x.c = [x.e = 0];
                }
              }


              // CONSTRUCTOR PROPERTIES


              BigNumber.clone = clone;

              BigNumber.ROUND_UP = 0;
              BigNumber.ROUND_DOWN = 1;
              BigNumber.ROUND_CEIL = 2;
              BigNumber.ROUND_FLOOR = 3;
              BigNumber.ROUND_HALF_UP = 4;
              BigNumber.ROUND_HALF_DOWN = 5;
              BigNumber.ROUND_HALF_EVEN = 6;
              BigNumber.ROUND_HALF_CEIL = 7;
              BigNumber.ROUND_HALF_FLOOR = 8;
              BigNumber.EUCLID = 9;


              /*
               * Configure infrequently-changing library-wide settings.
               *
               * Accept an object with the following optional properties (if the value of a property is
               * a number, it must be an integer within the inclusive range stated):
               *
               *   DECIMAL_PLACES   {number}           0 to MAX
               *   ROUNDING_MODE    {number}           0 to 8
               *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]
               *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]
               *   CRYPTO           {boolean}          true or false
               *   MODULO_MODE      {number}           0 to 9
               *   POW_PRECISION       {number}           0 to MAX
               *   ALPHABET         {string}           A string of two or more unique characters which does
               *                                       not contain '.'.
               *   FORMAT           {object}           An object with some of the following properties:
               *     prefix                 {string}
               *     groupSize              {number}
               *     secondaryGroupSize     {number}
               *     groupSeparator         {string}
               *     decimalSeparator       {string}
               *     fractionGroupSize      {number}
               *     fractionGroupSeparator {string}
               *     suffix                 {string}
               *
               * (The values assigned to the above FORMAT object properties are not checked for validity.)
               *
               * E.g.
               * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
               *
               * Ignore properties/parameters set to null or undefined, except for ALPHABET.
               *
               * Return an object with the properties current values.
               */
              BigNumber.config = BigNumber.set = function (obj) {
                var p, v;

                if (obj != null) {

                  if (typeof obj == 'object') {

                    // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
                    // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'
                    if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {
                      v = obj[p];
                      intCheck(v, 0, MAX, p);
                      DECIMAL_PLACES = v;
                    }

                    // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
                    // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'
                    if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {
                      v = obj[p];
                      intCheck(v, 0, 8, p);
                      ROUNDING_MODE = v;
                    }

                    // EXPONENTIAL_AT {number|number[]}
                    // Integer, -MAX to MAX inclusive or
                    // [integer -MAX to 0 inclusive, 0 to MAX inclusive].
                    // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'
                    if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {
                      v = obj[p];
                      if (v && v.pop) {
                        intCheck(v[0], -MAX, 0, p);
                        intCheck(v[1], 0, MAX, p);
                        TO_EXP_NEG = v[0];
                        TO_EXP_POS = v[1];
                      } else {
                        intCheck(v, -MAX, MAX, p);
                        TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
                      }
                    }

                    // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
                    // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
                    // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'
                    if (obj.hasOwnProperty(p = 'RANGE')) {
                      v = obj[p];
                      if (v && v.pop) {
                        intCheck(v[0], -MAX, -1, p);
                        intCheck(v[1], 1, MAX, p);
                        MIN_EXP = v[0];
                        MAX_EXP = v[1];
                      } else {
                        intCheck(v, -MAX, MAX, p);
                        if (v) {
                          MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
                        } else {
                          throw Error
                            (bignumberError + p + ' cannot be zero: ' + v);
                        }
                      }
                    }

                    // CRYPTO {boolean} true or false.
                    // '[BigNumber Error] CRYPTO not true or false: {v}'
                    // '[BigNumber Error] crypto unavailable'
                    if (obj.hasOwnProperty(p = 'CRYPTO')) {
                      v = obj[p];
                      if (v === !!v) {
                        if (v) {
                          if (typeof crypto != 'undefined' && crypto &&
                            (crypto.getRandomValues || crypto.randomBytes)) {
                            CRYPTO = v;
                          } else {
                            CRYPTO = !v;
                            throw Error
                              (bignumberError + 'crypto unavailable');
                          }
                        } else {
                          CRYPTO = v;
                        }
                      } else {
                        throw Error
                          (bignumberError + p + ' not true or false: ' + v);
                      }
                    }

                    // MODULO_MODE {number} Integer, 0 to 9 inclusive.
                    // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'
                    if (obj.hasOwnProperty(p = 'MODULO_MODE')) {
                      v = obj[p];
                      intCheck(v, 0, 9, p);
                      MODULO_MODE = v;
                    }

                    // POW_PRECISION {number} Integer, 0 to MAX inclusive.
                    // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'
                    if (obj.hasOwnProperty(p = 'POW_PRECISION')) {
                      v = obj[p];
                      intCheck(v, 0, MAX, p);
                      POW_PRECISION = v;
                    }

                    // FORMAT {object}
                    // '[BigNumber Error] FORMAT not an object: {v}'
                    if (obj.hasOwnProperty(p = 'FORMAT')) {
                      v = obj[p];
                      if (typeof v == 'object') FORMAT = v;
                      else throw Error
                        (bignumberError + p + ' not an object: ' + v);
                    }

                    // ALPHABET {string}
                    // '[BigNumber Error] ALPHABET invalid: {v}'
                    if (obj.hasOwnProperty(p = 'ALPHABET')) {
                      v = obj[p];

                      // Disallow if less than two characters,
                      // or if it contains '+', '-', '.', whitespace, or a repeated character.
                      if (typeof v == 'string' && !/^.?$|[+\-.\s]|(.).*\1/.test(v)) {
                        alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';
                        ALPHABET = v;
                      } else {
                        throw Error
                          (bignumberError + p + ' invalid: ' + v);
                      }
                    }

                  } else {

                    // '[BigNumber Error] Object expected: {v}'
                    throw Error
                      (bignumberError + 'Object expected: ' + obj);
                  }
                }

                return {
                  DECIMAL_PLACES: DECIMAL_PLACES,
                  ROUNDING_MODE: ROUNDING_MODE,
                  EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
                  RANGE: [MIN_EXP, MAX_EXP],
                  CRYPTO: CRYPTO,
                  MODULO_MODE: MODULO_MODE,
                  POW_PRECISION: POW_PRECISION,
                  FORMAT: FORMAT,
                  ALPHABET: ALPHABET
                };
              };


              /*
               * Return true if v is a BigNumber instance, otherwise return false.
               *
               * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.
               *
               * v {any}
               *
               * '[BigNumber Error] Invalid BigNumber: {v}'
               */
              BigNumber.isBigNumber = function (v) {
                if (!v || v._isBigNumber !== true) return false;
                if (!BigNumber.DEBUG) return true;

                var i, n,
                  c = v.c,
                  e = v.e,
                  s = v.s;

                out: if ({}.toString.call(c) == '[object Array]') {

                  if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {

                    // If the first element is zero, the BigNumber value must be zero.
                    if (c[0] === 0) {
                      if (e === 0 && c.length === 1) return true;
                      break out;
                    }

                    // Calculate number of digits that c[0] should have, based on the exponent.
                    i = (e + 1) % LOG_BASE;
                    if (i < 1) i += LOG_BASE;

                    // Calculate number of digits of c[0].
                    //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {
                    if (String(c[0]).length == i) {

                      for (i = 0; i < c.length; i++) {
                        n = c[i];
                        if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;
                      }

                      // Last element cannot be zero, unless it is the only element.
                      if (n !== 0) return true;
                    }
                  }

                  // Infinity/NaN
                } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {
                  return true;
                }

                throw Error
                  (bignumberError + 'Invalid BigNumber: ' + v);
              };


              /*
               * Return a new BigNumber whose value is the maximum of the arguments.
               *
               * arguments {number|string|BigNumber}
               */
              BigNumber.maximum = BigNumber.max = function () {
                return maxOrMin(arguments, -1);
              };


              /*
               * Return a new BigNumber whose value is the minimum of the arguments.
               *
               * arguments {number|string|BigNumber}
               */
              BigNumber.minimum = BigNumber.min = function () {
                return maxOrMin(arguments, 1);
              };


              /*
               * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
               * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
               * zeros are produced).
               *
               * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
               *
               * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'
               * '[BigNumber Error] crypto unavailable'
               */
              BigNumber.random = (function () {
                var pow2_53 = 0x20000000000000;

                // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
                // Check if Math.random() produces more than 32 bits of randomness.
                // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
                // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
                var random53bitInt = (Math.random() * pow2_53) & 0x1fffff
                  ? function () { return mathfloor(Math.random() * pow2_53); }
                  : function () {
                    return ((Math.random() * 0x40000000 | 0) * 0x800000) +
                      (Math.random() * 0x800000 | 0);
                  };

                return function (dp) {
                  var a, b, e, k, v,
                    i = 0,
                    c = [],
                    rand = new BigNumber(ONE);

                  if (dp == null) dp = DECIMAL_PLACES;
                  else intCheck(dp, 0, MAX);

                  k = mathceil(dp / LOG_BASE);

                  if (CRYPTO) {

                    // Browsers supporting crypto.getRandomValues.
                    if (crypto.getRandomValues) {

                      a = crypto.getRandomValues(new Uint32Array(k *= 2));

                      for (; i < k;) {

                        // 53 bits:
                        // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
                        // 11111 11111111 11111111 11111111 11100000 00000000 00000000
                        // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
                        //                                     11111 11111111 11111111
                        // 0x20000 is 2^21.
                        v = a[i] * 0x20000 + (a[i + 1] >>> 11);

                        // Rejection sampling:
                        // 0 <= v < 9007199254740992
                        // Probability that v >= 9e15, is
                        // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
                        if (v >= 9e15) {
                          b = crypto.getRandomValues(new Uint32Array(2));
                          a[i] = b[0];
                          a[i + 1] = b[1];
                        } else {

                          // 0 <= v <= 8999999999999999
                          // 0 <= (v % 1e14) <= 99999999999999
                          c.push(v % 1e14);
                          i += 2;
                        }
                      }
                      i = k / 2;

                      // Node.js supporting crypto.randomBytes.
                    } else if (crypto.randomBytes) {

                      // buffer
                      a = crypto.randomBytes(k *= 7);

                      for (; i < k;) {

                        // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
                        // 0x100000000 is 2^32, 0x1000000 is 2^24
                        // 11111 11111111 11111111 11111111 11111111 11111111 11111111
                        // 0 <= v < 9007199254740992
                        v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +
                          (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +
                          (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];

                        if (v >= 9e15) {
                          crypto.randomBytes(7).copy(a, i);
                        } else {

                          // 0 <= (v % 1e14) <= 99999999999999
                          c.push(v % 1e14);
                          i += 7;
                        }
                      }
                      i = k / 7;
                    } else {
                      CRYPTO = false;
                      throw Error
                        (bignumberError + 'crypto unavailable');
                    }
                  }

                  // Use Math.random.
                  if (!CRYPTO) {

                    for (; i < k;) {
                      v = random53bitInt();
                      if (v < 9e15) c[i++] = v % 1e14;
                    }
                  }

                  k = c[--i];
                  dp %= LOG_BASE;

                  // Convert trailing digits to zeros according to dp.
                  if (k && dp) {
                    v = POWS_TEN[LOG_BASE - dp];
                    c[i] = mathfloor(k / v) * v;
                  }

                  // Remove trailing elements which are zero.
                  for (; c[i] === 0; c.pop(), i--);

                  // Zero?
                  if (i < 0) {
                    c = [e = 0];
                  } else {

                    // Remove leading elements which are zero and adjust exponent accordingly.
                    for (e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);

                    // Count the digits of the first element of c to determine leading zeros, and...
                    for (i = 1, v = c[0]; v >= 10; v /= 10, i++);

                    // adjust the exponent accordingly.
                    if (i < LOG_BASE) e -= LOG_BASE - i;
                  }

                  rand.e = e;
                  rand.c = c;
                  return rand;
                };
              })();


              /*
               * Return a BigNumber whose value is the sum of the arguments.
               *
               * arguments {number|string|BigNumber}
               */
              BigNumber.sum = function () {
                var i = 1,
                  args = arguments,
                  sum = new BigNumber(args[0]);
                for (; i < args.length;) sum = sum.plus(args[i++]);
                return sum;
              };


              // PRIVATE FUNCTIONS


              // Called by BigNumber and BigNumber.prototype.toString.
              convertBase = (function () {
                var decimal = '0123456789';

                /*
                 * Convert string of baseIn to an array of numbers of baseOut.
                 * Eg. toBaseOut('255', 10, 16) returns [15, 15].
                 * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].
                 */
                function toBaseOut(str, baseIn, baseOut, alphabet) {
                  var j,
                    arr = [0],
                    arrL,
                    i = 0,
                    len = str.length;

                  for (; i < len;) {
                    for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);

                    arr[0] += alphabet.indexOf(str.charAt(i++));

                    for (j = 0; j < arr.length; j++) {

                      if (arr[j] > baseOut - 1) {
                        if (arr[j + 1] == null) arr[j + 1] = 0;
                        arr[j + 1] += arr[j] / baseOut | 0;
                        arr[j] %= baseOut;
                      }
                    }
                  }

                  return arr.reverse();
                }

                // Convert a numeric string of baseIn to a numeric string of baseOut.
                // If the caller is toString, we are converting from base 10 to baseOut.
                // If the caller is BigNumber, we are converting from baseIn to base 10.
                return function (str, baseIn, baseOut, sign, callerIsToString) {
                  var alphabet, d, e, k, r, x, xc, y,
                    i = str.indexOf('.'),
                    dp = DECIMAL_PLACES,
                    rm = ROUNDING_MODE;

                  // Non-integer.
                  if (i >= 0) {
                    k = POW_PRECISION;

                    // Unlimited precision.
                    POW_PRECISION = 0;
                    str = str.replace('.', '');
                    y = new BigNumber(baseIn);
                    x = y.pow(str.length - i);
                    POW_PRECISION = k;

                    // Convert str as if an integer, then restore the fraction part by dividing the
                    // result by its base raised to a power.

                    y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),
                      10, baseOut, decimal);
                    y.e = y.c.length;
                  }

                  // Convert the number as integer.

                  xc = toBaseOut(str, baseIn, baseOut, callerIsToString
                    ? (alphabet = ALPHABET, decimal)
                    : (alphabet = decimal, ALPHABET));

                  // xc now represents str as an integer and converted to baseOut. e is the exponent.
                  e = k = xc.length;

                  // Remove trailing zeros.
                  for (; xc[--k] == 0; xc.pop());

                  // Zero?
                  if (!xc[0]) return alphabet.charAt(0);

                  // Does str represent an integer? If so, no need for the division.
                  if (i < 0) {
                    --e;
                  } else {
                    x.c = xc;
                    x.e = e;

                    // The sign is needed for correct rounding.
                    x.s = sign;
                    x = div(x, y, dp, rm, baseOut);
                    xc = x.c;
                    r = x.r;
                    e = x.e;
                  }

                  // xc now represents str converted to baseOut.

                  // THe index of the rounding digit.
                  d = e + dp + 1;

                  // The rounding digit: the digit to the right of the digit that may be rounded up.
                  i = xc[d];

                  // Look at the rounding digits and mode to determine whether to round up.

                  k = baseOut / 2;
                  r = r || d < 0 || xc[d + 1] != null;

                  r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
                    : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||
                      rm == (x.s < 0 ? 8 : 7));

                  // If the index of the rounding digit is not greater than zero, or xc represents
                  // zero, then the result of the base conversion is zero or, if rounding up, a value
                  // such as 0.00001.
                  if (d < 1 || !xc[0]) {

                    // 1^-dp or 0
                    str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
                  } else {

                    // Truncate xc to the required number of decimal places.
                    xc.length = d;

                    // Round up?
                    if (r) {

                      // Rounding up may mean the previous digit has to be rounded up and so on.
                      for (--baseOut; ++xc[--d] > baseOut;) {
                        xc[d] = 0;

                        if (!d) {
                          ++e;
                          xc = [1].concat(xc);
                        }
                      }
                    }

                    // Determine trailing zeros.
                    for (k = xc.length; !xc[--k];);

                    // E.g. [4, 11, 15] becomes 4bf.
                    for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));

                    // Add leading zeros, decimal point and trailing zeros as required.
                    str = toFixedPoint(str, e, alphabet.charAt(0));
                  }

                  // The caller will add the sign.
                  return str;
                };
              })();


              // Perform division in the specified base. Called by div and convertBase.
              div = (function () {

                // Assume non-zero x and k.
                function multiply(x, k, base) {
                  var m, temp, xlo, xhi,
                    carry = 0,
                    i = x.length,
                    klo = k % SQRT_BASE,
                    khi = k / SQRT_BASE | 0;

                  for (x = x.slice(); i--;) {
                    xlo = x[i] % SQRT_BASE;
                    xhi = x[i] / SQRT_BASE | 0;
                    m = khi * xlo + xhi * klo;
                    temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;
                    carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
                    x[i] = temp % base;
                  }

                  if (carry) x = [carry].concat(x);

                  return x;
                }

                function compare(a, b, aL, bL) {
                  var i, cmp;

                  if (aL != bL) {
                    cmp = aL > bL ? 1 : -1;
                  } else {

                    for (i = cmp = 0; i < aL; i++) {

                      if (a[i] != b[i]) {
                        cmp = a[i] > b[i] ? 1 : -1;
                        break;
                      }
                    }
                  }

                  return cmp;
                }

                function subtract(a, b, aL, base) {
                  var i = 0;

                  // Subtract b from a.
                  for (; aL--;) {
                    a[aL] -= i;
                    i = a[aL] < b[aL] ? 1 : 0;
                    a[aL] = i * base + a[aL] - b[aL];
                  }

                  // Remove leading zeros.
                  for (; !a[0] && a.length > 1; a.splice(0, 1));
                }

                // x: dividend, y: divisor.
                return function (x, y, dp, rm, base) {
                  var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,
                    yL, yz,
                    s = x.s == y.s ? 1 : -1,
                    xc = x.c,
                    yc = y.c;

                  // Either NaN, Infinity or 0?
                  if (!xc || !xc[0] || !yc || !yc[0]) {

                    return new BigNumber(

                      // Return NaN if either NaN, or both Infinity or 0.
                      !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :

                        // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
                        xc && xc[0] == 0 || !yc ? s * 0 : s / 0
                    );
                  }

                  q = new BigNumber(s);
                  qc = q.c = [];
                  e = x.e - y.e;
                  s = dp + e + 1;

                  if (!base) {
                    base = BASE;
                    e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
                    s = s / LOG_BASE | 0;
                  }

                  // Result exponent may be one less then the current value of e.
                  // The coefficients of the BigNumbers from convertBase may have trailing zeros.
                  for (i = 0; yc[i] == (xc[i] || 0); i++);

                  if (yc[i] > (xc[i] || 0)) e--;

                  if (s < 0) {
                    qc.push(1);
                    more = true;
                  } else {
                    xL = xc.length;
                    yL = yc.length;
                    i = 0;
                    s += 2;

                    // Normalise xc and yc so highest order digit of yc is >= base / 2.

                    n = mathfloor(base / (yc[0] + 1));

                    // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.
                    // if (n > 1 || n++ == 1 && yc[0] < base / 2) {
                    if (n > 1) {
                      yc = multiply(yc, n, base);
                      xc = multiply(xc, n, base);
                      yL = yc.length;
                      xL = xc.length;
                    }

                    xi = yL;
                    rem = xc.slice(0, yL);
                    remL = rem.length;

                    // Add zeros to make remainder as long as divisor.
                    for (; remL < yL; rem[remL++] = 0);
                    yz = yc.slice();
                    yz = [0].concat(yz);
                    yc0 = yc[0];
                    if (yc[1] >= base / 2) yc0++;
                    // Not necessary, but to prevent trial digit n > base, when using base 3.
                    // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;

                    do {
                      n = 0;

                      // Compare divisor and remainder.
                      cmp = compare(yc, rem, yL, remL);

                      // If divisor < remainder.
                      if (cmp < 0) {

                        // Calculate trial digit, n.

                        rem0 = rem[0];
                        if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);

                        // n is how many times the divisor goes into the current remainder.
                        n = mathfloor(rem0 / yc0);

                        //  Algorithm:
                        //  product = divisor multiplied by trial digit (n).
                        //  Compare product and remainder.
                        //  If product is greater than remainder:
                        //    Subtract divisor from product, decrement trial digit.
                        //  Subtract product from remainder.
                        //  If product was less than remainder at the last compare:
                        //    Compare new remainder and divisor.
                        //    If remainder is greater than divisor:
                        //      Subtract divisor from remainder, increment trial digit.

                        if (n > 1) {

                          // n may be > base only when base is 3.
                          if (n >= base) n = base - 1;

                          // product = divisor * trial digit.
                          prod = multiply(yc, n, base);
                          prodL = prod.length;
                          remL = rem.length;

                          // Compare product and remainder.
                          // If product > remainder then trial digit n too high.
                          // n is 1 too high about 5% of the time, and is not known to have
                          // ever been more than 1 too high.
                          while (compare(prod, rem, prodL, remL) == 1) {
                            n--;

                            // Subtract divisor from product.
                            subtract(prod, yL < prodL ? yz : yc, prodL, base);
                            prodL = prod.length;
                            cmp = 1;
                          }
                        } else {

                          // n is 0 or 1, cmp is -1.
                          // If n is 0, there is no need to compare yc and rem again below,
                          // so change cmp to 1 to avoid it.
                          // If n is 1, leave cmp as -1, so yc and rem are compared again.
                          if (n == 0) {

                            // divisor < remainder, so n must be at least 1.
                            cmp = n = 1;
                          }

                          // product = divisor
                          prod = yc.slice();
                          prodL = prod.length;
                        }

                        if (prodL < remL) prod = [0].concat(prod);

                        // Subtract product from remainder.
                        subtract(rem, prod, remL, base);
                        remL = rem.length;

                        // If product was < remainder.
                        if (cmp == -1) {

                          // Compare divisor and new remainder.
                          // If divisor < new remainder, subtract divisor from remainder.
                          // Trial digit n too low.
                          // n is 1 too low about 5% of the time, and very rarely 2 too low.
                          while (compare(yc, rem, yL, remL) < 1) {
                            n++;

                            // Subtract divisor from remainder.
                            subtract(rem, yL < remL ? yz : yc, remL, base);
                            remL = rem.length;
                          }
                        }
                      } else if (cmp === 0) {
                        n++;
                        rem = [0];
                      } // else cmp === 1 and n will be 0

                      // Add the next digit, n, to the result array.
                      qc[i++] = n;

                      // Update the remainder.
                      if (rem[0]) {
                        rem[remL++] = xc[xi] || 0;
                      } else {
                        rem = [xc[xi]];
                        remL = 1;
                      }
                    } while ((xi++ < xL || rem[0] != null) && s--);

                    more = rem[0] != null;

                    // Leading zero?
                    if (!qc[0]) qc.splice(0, 1);
                  }

                  if (base == BASE) {

                    // To calculate q.e, first get the number of digits of qc[0].
                    for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);

                    round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);

                    // Caller is convertBase.
                  } else {
                    q.e = e;
                    q.r = +more;
                  }

                  return q;
                };
              })();


              /*
               * Return a string representing the value of BigNumber n in fixed-point or exponential
               * notation rounded to the specified decimal places or significant digits.
               *
               * n: a BigNumber.
               * i: the index of the last digit required (i.e. the digit that may be rounded up).
               * rm: the rounding mode.
               * id: 1 (toExponential) or 2 (toPrecision).
               */
              function format(n, i, rm, id) {
                var c0, e, ne, len, str;

                if (rm == null) rm = ROUNDING_MODE;
                else intCheck(rm, 0, 8);

                if (!n.c) return n.toString();

                c0 = n.c[0];
                ne = n.e;

                if (i == null) {
                  str = coeffToString(n.c);
                  str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)
                    ? toExponential(str, ne)
                    : toFixedPoint(str, ne, '0');
                } else {
                  n = round(new BigNumber(n), i, rm);

                  // n.e may have changed if the value was rounded up.
                  e = n.e;

                  str = coeffToString(n.c);
                  len = str.length;

                  // toPrecision returns exponential notation if the number of significant digits
                  // specified is less than the number of digits necessary to represent the integer
                  // part of the value in fixed-point notation.

                  // Exponential notation.
                  if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {

                    // Append zeros?
                    for (; len < i; str += '0', len++);
                    str = toExponential(str, e);

                    // Fixed-point notation.
                  } else {
                    i -= ne;
                    str = toFixedPoint(str, e, '0');

                    // Append zeros?
                    if (e + 1 > len) {
                      if (--i > 0) for (str += '.'; i--; str += '0');
                    } else {
                      i += e - len;
                      if (i > 0) {
                        if (e + 1 == len) str += '.';
                        for (; i--; str += '0');
                      }
                    }
                  }
                }

                return n.s < 0 && c0 ? '-' + str : str;
              }


              // Handle BigNumber.max and BigNumber.min.
              // If any number is NaN, return NaN.
              function maxOrMin(args, n) {
                var k, y,
                  i = 1,
                  x = new BigNumber(args[0]);

                for (; i < args.length; i++) {
                  y = new BigNumber(args[i]);
                  if (!y.s || (k = compare(x, y)) === n || k === 0 && x.s === n) {
                    x = y;
                  }
                }

                return x;
              }


              /*
               * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
               * Called by minus, plus and times.
               */
              function normalise(n, c, e) {
                var i = 1,
                  j = c.length;

                // Remove trailing zeros.
                for (; !c[--j]; c.pop());

                // Calculate the base 10 exponent. First get the number of digits of c[0].
                for (j = c[0]; j >= 10; j /= 10, i++);

                // Overflow?
                if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {

                  // Infinity.
                  n.c = n.e = null;

                  // Underflow?
                } else if (e < MIN_EXP) {

                  // Zero.
                  n.c = [n.e = 0];
                } else {
                  n.e = e;
                  n.c = c;
                }

                return n;
              }


              // Handle values that fail the validity test in BigNumber.
              parseNumeric = (function () {
                var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i,
                  dotAfter = /^([^.]+)\.$/,
                  dotBefore = /^\.([^.]+)$/,
                  isInfinityOrNaN = /^-?(Infinity|NaN)$/,
                  whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;

                return function (x, str, isNum, b) {
                  var base,
                    s = isNum ? str : str.replace(whitespaceOrPlus, '');

                  // No exception on ±Infinity or NaN.
                  if (isInfinityOrNaN.test(s)) {
                    x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
                  } else {
                    if (!isNum) {

                      // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
                      s = s.replace(basePrefix, function (m, p1, p2) {
                        base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
                        return !b || b == base ? p1 : m;
                      });

                      if (b) {
                        base = b;

                        // E.g. '1.' to '1', '.1' to '0.1'
                        s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');
                      }

                      if (str != s) return new BigNumber(s, base);
                    }

                    // '[BigNumber Error] Not a number: {n}'
                    // '[BigNumber Error] Not a base {b} number: {n}'
                    if (BigNumber.DEBUG) {
                      throw Error
                        (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);
                    }

                    // NaN
                    x.s = null;
                  }

                  x.c = x.e = null;
                }
              })();


              /*
               * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
               * If r is truthy, it is known that there are more digits after the rounding digit.
               */
              function round(x, sd, rm, r) {
                var d, i, j, k, n, ni, rd,
                  xc = x.c,
                  pows10 = POWS_TEN;

                // if x is not Infinity or NaN...
                if (xc) {

                  // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
                  // n is a base 1e14 number, the value of the element of array x.c containing rd.
                  // ni is the index of n within x.c.
                  // d is the number of digits of n.
                  // i is the index of rd within n including leading zeros.
                  // j is the actual index of rd within n (if < 0, rd is a leading zero).
                  out: {

                    // Get the number of digits of the first element of xc.
                    for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);
                    i = sd - d;

                    // If the rounding digit is in the first element of xc...
                    if (i < 0) {
                      i += LOG_BASE;
                      j = sd;
                      n = xc[ni = 0];

                      // Get the rounding digit at index j of n.
                      rd = mathfloor(n / pows10[d - j - 1] % 10);
                    } else {
                      ni = mathceil((i + 1) / LOG_BASE);

                      if (ni >= xc.length) {

                        if (r) {

                          // Needed by sqrt.
                          for (; xc.length <= ni; xc.push(0));
                          n = rd = 0;
                          d = 1;
                          i %= LOG_BASE;
                          j = i - LOG_BASE + 1;
                        } else {
                          break out;
                        }
                      } else {
                        n = k = xc[ni];

                        // Get the number of digits of n.
                        for (d = 1; k >= 10; k /= 10, d++);

                        // Get the index of rd within n.
                        i %= LOG_BASE;

                        // Get the index of rd within n, adjusted for leading zeros.
                        // The number of leading zeros of n is given by LOG_BASE - d.
                        j = i - LOG_BASE + d;

                        // Get the rounding digit at index j of n.
                        rd = j < 0 ? 0 : mathfloor(n / pows10[d - j - 1] % 10);
                      }
                    }

                    r = r || sd < 0 ||

                      // Are there any non-zero digits after the rounding digit?
                      // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
                      // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
                      xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);

                    r = rm < 4
                      ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
                      : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&

                        // Check whether the digit to the left of the rounding digit is odd.
                        ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||
                        rm == (x.s < 0 ? 8 : 7));

                    if (sd < 1 || !xc[0]) {
                      xc.length = 0;

                      if (r) {

                        // Convert sd to decimal places.
                        sd -= x.e + 1;

                        // 1, 0.1, 0.01, 0.001, 0.0001 etc.
                        xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
                        x.e = -sd || 0;
                      } else {

                        // Zero.
                        xc[0] = x.e = 0;
                      }

                      return x;
                    }

                    // Remove excess digits.
                    if (i == 0) {
                      xc.length = ni;
                      k = 1;
                      ni--;
                    } else {
                      xc.length = ni + 1;
                      k = pows10[LOG_BASE - i];

                      // E.g. 56700 becomes 56000 if 7 is the rounding digit.
                      // j > 0 means i > number of leading zeros of n.
                      xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
                    }

                    // Round up?
                    if (r) {

                      for (; ;) {

                        // If the digit to be rounded up is in the first element of xc...
                        if (ni == 0) {

                          // i will be the length of xc[0] before k is added.
                          for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);
                          j = xc[0] += k;
                          for (k = 1; j >= 10; j /= 10, k++);

                          // if i != k the length has increased.
                          if (i != k) {
                            x.e++;
                            if (xc[0] == BASE) xc[0] = 1;
                          }

                          break;
                        } else {
                          xc[ni] += k;
                          if (xc[ni] != BASE) break;
                          xc[ni--] = 0;
                          k = 1;
                        }
                      }
                    }

                    // Remove trailing zeros.
                    for (i = xc.length; xc[--i] === 0; xc.pop());
                  }

                  // Overflow? Infinity.
                  if (x.e > MAX_EXP) {
                    x.c = x.e = null;

                    // Underflow? Zero.
                  } else if (x.e < MIN_EXP) {
                    x.c = [x.e = 0];
                  }
                }

                return x;
              }


              function valueOf(n) {
                var str,
                  e = n.e;

                if (e === null) return n.toString();

                str = coeffToString(n.c);

                str = e <= TO_EXP_NEG || e >= TO_EXP_POS
                  ? toExponential(str, e)
                  : toFixedPoint(str, e, '0');

                return n.s < 0 ? '-' + str : str;
              }


              // PROTOTYPE/INSTANCE METHODS


              /*
               * Return a new BigNumber whose value is the absolute value of this BigNumber.
               */
              P.absoluteValue = P.abs = function () {
                var x = new BigNumber(this);
                if (x.s < 0) x.s = 1;
                return x;
              };


              /*
               * Return
               *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
               *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
               *   0 if they have the same value,
               *   or null if the value of either is NaN.
               */
              P.comparedTo = function (y, b) {
                return compare(this, new BigNumber(y, b));
              };


              /*
               * If dp is undefined or null or true or false, return the number of decimal places of the
               * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
               *
               * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this
               * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or
               * ROUNDING_MODE if rm is omitted.
               *
               * [dp] {number} Decimal places: integer, 0 to MAX inclusive.
               * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
               *
               * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
               */
              P.decimalPlaces = P.dp = function (dp, rm) {
                var c, n, v,
                  x = this;

                if (dp != null) {
                  intCheck(dp, 0, MAX);
                  if (rm == null) rm = ROUNDING_MODE;
                  else intCheck(rm, 0, 8);

                  return round(new BigNumber(x), dp + x.e + 1, rm);
                }

                if (!(c = x.c)) return null;
                n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;

                // Subtract the number of trailing zeros of the last number.
                if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);
                if (n < 0) n = 0;

                return n;
              };


              /*
               *  n / 0 = I
               *  n / N = N
               *  n / I = 0
               *  0 / n = 0
               *  0 / 0 = N
               *  0 / N = N
               *  0 / I = 0
               *  N / n = N
               *  N / 0 = N
               *  N / N = N
               *  N / I = N
               *  I / n = I
               *  I / 0 = I
               *  I / N = N
               *  I / I = N
               *
               * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
               * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
               */
              P.dividedBy = P.div = function (y, b) {
                return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);
              };


              /*
               * Return a new BigNumber whose value is the integer part of dividing the value of this
               * BigNumber by the value of BigNumber(y, b).
               */
              P.dividedToIntegerBy = P.idiv = function (y, b) {
                return div(this, new BigNumber(y, b), 0, 1);
              };


              /*
               * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.
               *
               * If m is present, return the result modulo m.
               * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
               * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.
               *
               * The modular power operation works efficiently when x, n, and m are integers, otherwise it
               * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.
               *
               * n {number|string|BigNumber} The exponent. An integer.
               * [m] {number|string|BigNumber} The modulus.
               *
               * '[BigNumber Error] Exponent not an integer: {n}'
               */
              P.exponentiatedBy = P.pow = function (n, m) {
                var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,
                  x = this;

                n = new BigNumber(n);

                // Allow NaN and ±Infinity, but not other non-integers.
                if (n.c && !n.isInteger()) {
                  throw Error
                    (bignumberError + 'Exponent not an integer: ' + valueOf(n));
                }

                if (m != null) m = new BigNumber(m);

                // Exponent of MAX_SAFE_INTEGER is 15.
                nIsBig = n.e > 14;

                // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.
                if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {

                  // The sign of the result of pow when x is negative depends on the evenness of n.
                  // If +n overflows to ±Infinity, the evenness of n would be not be known.
                  y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));
                  return m ? y.mod(m) : y;
                }

                nIsNeg = n.s < 0;

                if (m) {

                  // x % m returns NaN if abs(m) is zero, or m is NaN.
                  if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);

                  isModExp = !nIsNeg && x.isInteger() && m.isInteger();

                  if (isModExp) x = x.mod(m);

                  // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.
                  // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.
                } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0
                  // [1, 240000000]
                  ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7
                  // [80000000000000]  [99999750000000]
                  : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {

                  // If x is negative and n is odd, k = -0, else k = 0.
                  k = x.s < 0 && isOdd(n) ? -0 : 0;

                  // If x >= 1, k = ±Infinity.
                  if (x.e > -1) k = 1 / k;

                  // If n is negative return ±0, else return ±Infinity.
                  return new BigNumber(nIsNeg ? 1 / k : k);

                } else if (POW_PRECISION) {

                  // Truncating each coefficient array to a length of k after each multiplication
                  // equates to truncating significant digits to POW_PRECISION + [28, 41],
                  // i.e. there will be a minimum of 28 guard digits retained.
                  k = mathceil(POW_PRECISION / LOG_BASE + 2);
                }

                if (nIsBig) {
                  half = new BigNumber(0.5);
                  if (nIsNeg) n.s = 1;
                  nIsOdd = isOdd(n);
                } else {
                  i = Math.abs(+valueOf(n));
                  nIsOdd = i % 2;
                }

                y = new BigNumber(ONE);

                // Performs 54 loop iterations for n of 9007199254740991.
                for (; ;) {

                  if (nIsOdd) {
                    y = y.times(x);
                    if (!y.c) break;

                    if (k) {
                      if (y.c.length > k) y.c.length = k;
                    } else if (isModExp) {
                      y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));
                    }
                  }

                  if (i) {
                    i = mathfloor(i / 2);
                    if (i === 0) break;
                    nIsOdd = i % 2;
                  } else {
                    n = n.times(half);
                    round(n, n.e + 1, 1);

                    if (n.e > 14) {
                      nIsOdd = isOdd(n);
                    } else {
                      i = +valueOf(n);
                      if (i === 0) break;
                      nIsOdd = i % 2;
                    }
                  }

                  x = x.times(x);

                  if (k) {
                    if (x.c && x.c.length > k) x.c.length = k;
                  } else if (isModExp) {
                    x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));
                  }
                }

                if (isModExp) return y;
                if (nIsNeg) y = ONE.div(y);

                return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
              };


              /*
               * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer
               * using rounding mode rm, or ROUNDING_MODE if rm is omitted.
               *
               * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
               *
               * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'
               */
              P.integerValue = function (rm) {
                var n = new BigNumber(this);
                if (rm == null) rm = ROUNDING_MODE;
                else intCheck(rm, 0, 8);
                return round(n, n.e + 1, rm);
              };


              /*
               * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
               * otherwise return false.
               */
              P.isEqualTo = P.eq = function (y, b) {
                return compare(this, new BigNumber(y, b)) === 0;
              };


              /*
               * Return true if the value of this BigNumber is a finite number, otherwise return false.
               */
              P.isFinite = function () {
                return !!this.c;
              };


              /*
               * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
               * otherwise return false.
               */
              P.isGreaterThan = P.gt = function (y, b) {
                return compare(this, new BigNumber(y, b)) > 0;
              };


              /*
               * Return true if the value of this BigNumber is greater than or equal to the value of
               * BigNumber(y, b), otherwise return false.
               */
              P.isGreaterThanOrEqualTo = P.gte = function (y, b) {
                return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;

              };


              /*
               * Return true if the value of this BigNumber is an integer, otherwise return false.
               */
              P.isInteger = function () {
                return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
              };


              /*
               * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
               * otherwise return false.
               */
              P.isLessThan = P.lt = function (y, b) {
                return compare(this, new BigNumber(y, b)) < 0;
              };


              /*
               * Return true if the value of this BigNumber is less than or equal to the value of
               * BigNumber(y, b), otherwise return false.
               */
              P.isLessThanOrEqualTo = P.lte = function (y, b) {
                return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;
              };


              /*
               * Return true if the value of this BigNumber is NaN, otherwise return false.
               */
              P.isNaN = function () {
                return !this.s;
              };


              /*
               * Return true if the value of this BigNumber is negative, otherwise return false.
               */
              P.isNegative = function () {
                return this.s < 0;
              };


              /*
               * Return true if the value of this BigNumber is positive, otherwise return false.
               */
              P.isPositive = function () {
                return this.s > 0;
              };


              /*
               * Return true if the value of this BigNumber is 0 or -0, otherwise return false.
               */
              P.isZero = function () {
                return !!this.c && this.c[0] == 0;
              };


              /*
               *  n - 0 = n
               *  n - N = N
               *  n - I = -I
               *  0 - n = -n
               *  0 - 0 = 0
               *  0 - N = N
               *  0 - I = -I
               *  N - n = N
               *  N - 0 = N
               *  N - N = N
               *  N - I = N
               *  I - n = I
               *  I - 0 = I
               *  I - N = N
               *  I - I = N
               *
               * Return a new BigNumber whose value is the value of this BigNumber minus the value of
               * BigNumber(y, b).
               */
              P.minus = function (y, b) {
                var i, j, t, xLTy,
                  x = this,
                  a = x.s;

                y = new BigNumber(y, b);
                b = y.s;

                // Either NaN?
                if (!a || !b) return new BigNumber(NaN);

                // Signs differ?
                if (a != b) {
                  y.s = -b;
                  return x.plus(y);
                }

                var xe = x.e / LOG_BASE,
                  ye = y.e / LOG_BASE,
                  xc = x.c,
                  yc = y.c;

                if (!xe || !ye) {

                  // Either Infinity?
                  if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);

                  // Either zero?
                  if (!xc[0] || !yc[0]) {

                    // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
                    return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :

                      // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
                      ROUNDING_MODE == 3 ? -0 : 0);
                  }
                }

                xe = bitFloor(xe);
                ye = bitFloor(ye);
                xc = xc.slice();

                // Determine which is the bigger number.
                if (a = xe - ye) {

                  if (xLTy = a < 0) {
                    a = -a;
                    t = xc;
                  } else {
                    ye = xe;
                    t = yc;
                  }

                  t.reverse();

                  // Prepend zeros to equalise exponents.
                  for (b = a; b--; t.push(0));
                  t.reverse();
                } else {

                  // Exponents equal. Check digit by digit.
                  j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;

                  for (a = b = 0; b < j; b++) {

                    if (xc[b] != yc[b]) {
                      xLTy = xc[b] < yc[b];
                      break;
                    }
                  }
                }

                // x < y? Point xc to the array of the bigger number.
                if (xLTy) {
                  t = xc;
                  xc = yc;
                  yc = t;
                  y.s = -y.s;
                }

                b = (j = yc.length) - (i = xc.length);

                // Append zeros to xc if shorter.
                // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
                if (b > 0) for (; b--; xc[i++] = 0);
                b = BASE - 1;

                // Subtract yc from xc.
                for (; j > a;) {

                  if (xc[--j] < yc[j]) {
                    for (i = j; i && !xc[--i]; xc[i] = b);
                    --xc[i];
                    xc[j] += BASE;
                  }

                  xc[j] -= yc[j];
                }

                // Remove leading zeros and adjust exponent accordingly.
                for (; xc[0] == 0; xc.splice(0, 1), --ye);

                // Zero?
                if (!xc[0]) {

                  // Following IEEE 754 (2008) 6.3,
                  // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
                  y.s = ROUNDING_MODE == 3 ? -1 : 1;
                  y.c = [y.e = 0];
                  return y;
                }

                // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
                // for finite x and y.
                return normalise(y, xc, ye);
              };


              /*
               *   n % 0 =  N
               *   n % N =  N
               *   n % I =  n
               *   0 % n =  0
               *  -0 % n = -0
               *   0 % 0 =  N
               *   0 % N =  N
               *   0 % I =  0
               *   N % n =  N
               *   N % 0 =  N
               *   N % N =  N
               *   N % I =  N
               *   I % n =  N
               *   I % 0 =  N
               *   I % N =  N
               *   I % I =  N
               *
               * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
               * BigNumber(y, b). The result depends on the value of MODULO_MODE.
               */
              P.modulo = P.mod = function (y, b) {
                var q, s,
                  x = this;

                y = new BigNumber(y, b);

                // Return NaN if x is Infinity or NaN, or y is NaN or zero.
                if (!x.c || !y.s || y.c && !y.c[0]) {
                  return new BigNumber(NaN);

                  // Return x if y is Infinity or x is zero.
                } else if (!y.c || x.c && !x.c[0]) {
                  return new BigNumber(x);
                }

                if (MODULO_MODE == 9) {

                  // Euclidian division: q = sign(y) * floor(x / abs(y))
                  // r = x - qy    where  0 <= r < abs(y)
                  s = y.s;
                  y.s = 1;
                  q = div(x, y, 0, 3);
                  y.s = s;
                  q.s *= s;
                } else {
                  q = div(x, y, 0, MODULO_MODE);
                }

                y = x.minus(q.times(y));

                // To match JavaScript %, ensure sign of zero is sign of dividend.
                if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;

                return y;
              };


              /*
               *  n * 0 = 0
               *  n * N = N
               *  n * I = I
               *  0 * n = 0
               *  0 * 0 = 0
               *  0 * N = N
               *  0 * I = N
               *  N * n = N
               *  N * 0 = N
               *  N * N = N
               *  N * I = N
               *  I * n = I
               *  I * 0 = N
               *  I * N = N
               *  I * I = I
               *
               * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value
               * of BigNumber(y, b).
               */
              P.multipliedBy = P.times = function (y, b) {
                var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,
                  base, sqrtBase,
                  x = this,
                  xc = x.c,
                  yc = (y = new BigNumber(y, b)).c;

                // Either NaN, ±Infinity or ±0?
                if (!xc || !yc || !xc[0] || !yc[0]) {

                  // Return NaN if either is NaN, or one is 0 and the other is Infinity.
                  if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
                    y.c = y.e = y.s = null;
                  } else {
                    y.s *= x.s;

                    // Return ±Infinity if either is ±Infinity.
                    if (!xc || !yc) {
                      y.c = y.e = null;

                      // Return ±0 if either is ±0.
                    } else {
                      y.c = [0];
                      y.e = 0;
                    }
                  }

                  return y;
                }

                e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
                y.s *= x.s;
                xcL = xc.length;
                ycL = yc.length;

                // Ensure xc points to longer array and xcL to its length.
                if (xcL < ycL) {
                  zc = xc;
                  xc = yc;
                  yc = zc;
                  i = xcL;
                  xcL = ycL;
                  ycL = i;
                }

                // Initialise the result array with zeros.
                for (i = xcL + ycL, zc = []; i--; zc.push(0));

                base = BASE;
                sqrtBase = SQRT_BASE;

                for (i = ycL; --i >= 0;) {
                  c = 0;
                  ylo = yc[i] % sqrtBase;
                  yhi = yc[i] / sqrtBase | 0;

                  for (k = xcL, j = i + k; j > i;) {
                    xlo = xc[--k] % sqrtBase;
                    xhi = xc[k] / sqrtBase | 0;
                    m = yhi * xlo + xhi * ylo;
                    xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;
                    c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
                    zc[j--] = xlo % base;
                  }

                  zc[j] = c;
                }

                if (c) {
                  ++e;
                } else {
                  zc.splice(0, 1);
                }

                return normalise(y, zc, e);
              };


              /*
               * Return a new BigNumber whose value is the value of this BigNumber negated,
               * i.e. multiplied by -1.
               */
              P.negated = function () {
                var x = new BigNumber(this);
                x.s = -x.s || null;
                return x;
              };


              /*
               *  n + 0 = n
               *  n + N = N
               *  n + I = I
               *  0 + n = n
               *  0 + 0 = 0
               *  0 + N = N
               *  0 + I = I
               *  N + n = N
               *  N + 0 = N
               *  N + N = N
               *  N + I = N
               *  I + n = I
               *  I + 0 = I
               *  I + N = N
               *  I + I = I
               *
               * Return a new BigNumber whose value is the value of this BigNumber plus the value of
               * BigNumber(y, b).
               */
              P.plus = function (y, b) {
                var t,
                  x = this,
                  a = x.s;

                y = new BigNumber(y, b);
                b = y.s;

                // Either NaN?
                if (!a || !b) return new BigNumber(NaN);

                // Signs differ?
                if (a != b) {
                  y.s = -b;
                  return x.minus(y);
                }

                var xe = x.e / LOG_BASE,
                  ye = y.e / LOG_BASE,
                  xc = x.c,
                  yc = y.c;

                if (!xe || !ye) {

                  // Return ±Infinity if either ±Infinity.
                  if (!xc || !yc) return new BigNumber(a / 0);

                  // Either zero?
                  // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
                  if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);
                }

                xe = bitFloor(xe);
                ye = bitFloor(ye);
                xc = xc.slice();

                // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
                if (a = xe - ye) {
                  if (a > 0) {
                    ye = xe;
                    t = yc;
                  } else {
                    a = -a;
                    t = xc;
                  }

                  t.reverse();
                  for (; a--; t.push(0));
                  t.reverse();
                }

                a = xc.length;
                b = yc.length;

                // Point xc to the longer array, and b to the shorter length.
                if (a - b < 0) {
                  t = yc;
                  yc = xc;
                  xc = t;
                  b = a;
                }

                // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
                for (a = 0; b;) {
                  a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
                  xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
                }

                if (a) {
                  xc = [a].concat(xc);
                  ++ye;
                }

                // No need to check for zero, as +x + +y != 0 && -x + -y != 0
                // ye = MAX_EXP + 1 possible
                return normalise(y, xc, ye);
              };


              /*
               * If sd is undefined or null or true or false, return the number of significant digits of
               * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
               * If sd is true include integer-part trailing zeros in the count.
               *
               * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this
               * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or
               * ROUNDING_MODE if rm is omitted.
               *
               * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.
               *                     boolean: whether to count integer-part trailing zeros: true or false.
               * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
               *
               * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
               */
              P.precision = P.sd = function (sd, rm) {
                var c, n, v,
                  x = this;

                if (sd != null && sd !== !!sd) {
                  intCheck(sd, 1, MAX);
                  if (rm == null) rm = ROUNDING_MODE;
                  else intCheck(rm, 0, 8);

                  return round(new BigNumber(x), sd, rm);
                }

                if (!(c = x.c)) return null;
                v = c.length - 1;
                n = v * LOG_BASE + 1;

                if (v = c[v]) {

                  // Subtract the number of trailing zeros of the last element.
                  for (; v % 10 == 0; v /= 10, n--);

                  // Add the number of digits of the first element.
                  for (v = c[0]; v >= 10; v /= 10, n++);
                }

                if (sd && x.e + 1 > n) n = x.e + 1;

                return n;
              };


              /*
               * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
               * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
               *
               * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
               *
               * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'
               */
              P.shiftedBy = function (k) {
                intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
                return this.times('1e' + k);
              };


              /*
               *  sqrt(-n) =  N
               *  sqrt(N) =  N
               *  sqrt(-I) =  N
               *  sqrt(I) =  I
               *  sqrt(0) =  0
               *  sqrt(-0) = -0
               *
               * Return a new BigNumber whose value is the square root of the value of this BigNumber,
               * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
               */
              P.squareRoot = P.sqrt = function () {
                var m, n, r, rep, t,
                  x = this,
                  c = x.c,
                  s = x.s,
                  e = x.e,
                  dp = DECIMAL_PLACES + 4,
                  half = new BigNumber('0.5');

                // Negative/NaN/Infinity/zero?
                if (s !== 1 || !c || !c[0]) {
                  return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
                }

                // Initial estimate.
                s = Math.sqrt(+valueOf(x));

                // Math.sqrt underflow/overflow?
                // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
                if (s == 0 || s == 1 / 0) {
                  n = coeffToString(c);
                  if ((n.length + e) % 2 == 0) n += '0';
                  s = Math.sqrt(+n);
                  e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);

                  if (s == 1 / 0) {
                    n = '5e' + e;
                  } else {
                    n = s.toExponential();
                    n = n.slice(0, n.indexOf('e') + 1) + e;
                  }

                  r = new BigNumber(n);
                } else {
                  r = new BigNumber(s + '');
                }

                // Check for zero.
                // r could be zero if MIN_EXP is changed after the this value was created.
                // This would cause a division by zero (x/t) and hence Infinity below, which would cause
                // coeffToString to throw.
                if (r.c[0]) {
                  e = r.e;
                  s = e + dp;
                  if (s < 3) s = 0;

                  // Newton-Raphson iteration.
                  for (; ;) {
                    t = r;
                    r = half.times(t.plus(div(x, t, dp, 1)));

                    if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {

                      // The exponent of r may here be one less than the final result exponent,
                      // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
                      // are indexed correctly.
                      if (r.e < e) --s;
                      n = n.slice(s - 3, s + 1);

                      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
                      // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
                      // iteration.
                      if (n == '9999' || !rep && n == '4999') {

                        // On the first iteration only, check to see if rounding up gives the
                        // exact result as the nines may infinitely repeat.
                        if (!rep) {
                          round(t, t.e + DECIMAL_PLACES + 2, 0);

                          if (t.times(t).eq(x)) {
                            r = t;
                            break;
                          }
                        }

                        dp += 4;
                        s += 4;
                        rep = 1;
                      } else {

                        // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
                        // result. If not, then there are further digits and m will be truthy.
                        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

                          // Truncate to the first rounding digit.
                          round(r, r.e + DECIMAL_PLACES + 2, 1);
                          m = !r.times(r).eq(x);
                        }

                        break;
                      }
                    }
                  }
                }

                return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
              };


              /*
               * Return a string representing the value of this BigNumber in exponential notation and
               * rounded using ROUNDING_MODE to dp fixed decimal places.
               *
               * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
               * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
               *
               * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
               */
              P.toExponential = function (dp, rm) {
                if (dp != null) {
                  intCheck(dp, 0, MAX);
                  dp++;
                }
                return format(this, dp, rm, 1);
              };


              /*
               * Return a string representing the value of this BigNumber in fixed-point notation rounding
               * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
               *
               * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
               * but e.g. (-0.00001).toFixed(0) is '-0'.
               *
               * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
               * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
               *
               * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
               */
              P.toFixed = function (dp, rm) {
                if (dp != null) {
                  intCheck(dp, 0, MAX);
                  dp = dp + this.e + 1;
                }
                return format(this, dp, rm);
              };


              /*
               * Return a string representing the value of this BigNumber in fixed-point notation rounded
               * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
               * of the format or FORMAT object (see BigNumber.set).
               *
               * The formatting object may contain some or all of the properties shown below.
               *
               * FORMAT = {
               *   prefix: '',
               *   groupSize: 3,
               *   secondaryGroupSize: 0,
               *   groupSeparator: ',',
               *   decimalSeparator: '.',
               *   fractionGroupSize: 0,
               *   fractionGroupSeparator: '\xA0',      // non-breaking space
               *   suffix: ''
               * };
               *
               * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
               * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
               * [format] {object} Formatting options. See FORMAT pbject above.
               *
               * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
               * '[BigNumber Error] Argument not an object: {format}'
               */
              P.toFormat = function (dp, rm, format) {
                var str,
                  x = this;

                if (format == null) {
                  if (dp != null && rm && typeof rm == 'object') {
                    format = rm;
                    rm = null;
                  } else if (dp && typeof dp == 'object') {
                    format = dp;
                    dp = rm = null;
                  } else {
                    format = FORMAT;
                  }
                } else if (typeof format != 'object') {
                  throw Error
                    (bignumberError + 'Argument not an object: ' + format);
                }

                str = x.toFixed(dp, rm);

                if (x.c) {
                  var i,
                    arr = str.split('.'),
                    g1 = +format.groupSize,
                    g2 = +format.secondaryGroupSize,
                    groupSeparator = format.groupSeparator || '',
                    intPart = arr[0],
                    fractionPart = arr[1],
                    isNeg = x.s < 0,
                    intDigits = isNeg ? intPart.slice(1) : intPart,
                    len = intDigits.length;

                  if (g2) {
                    i = g1;
                    g1 = g2;
                    g2 = i;
                    len -= i;
                  }

                  if (g1 > 0 && len > 0) {
                    i = len % g1 || g1;
                    intPart = intDigits.substr(0, i);
                    for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);
                    if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
                    if (isNeg) intPart = '-' + intPart;
                  }

                  str = fractionPart
                    ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)
                      ? fractionPart.replace(new RegExp('\\d{' + g2 + '}\\B', 'g'),
                        '$&' + (format.fractionGroupSeparator || ''))
                      : fractionPart)
                    : intPart;
                }

                return (format.prefix || '') + str + (format.suffix || '');
              };


              /*
               * Return an array of two BigNumbers representing the value of this BigNumber as a simple
               * fraction with an integer numerator and an integer denominator.
               * The denominator will be a positive non-zero value less than or equal to the specified
               * maximum denominator. If a maximum denominator is not specified, the denominator will be
               * the lowest value necessary to represent the number exactly.
               *
               * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.
               *
               * '[BigNumber Error] Argument {not an integer|out of range} : {md}'
               */
              P.toFraction = function (md) {
                var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,
                  x = this,
                  xc = x.c;

                if (md != null) {
                  n = new BigNumber(md);

                  // Throw if md is less than one or is not an integer, unless it is Infinity.
                  if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
                    throw Error
                      (bignumberError + 'Argument ' +
                        (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));
                  }
                }

                if (!xc) return new BigNumber(x);

                d = new BigNumber(ONE);
                n1 = d0 = new BigNumber(ONE);
                d1 = n0 = new BigNumber(ONE);
                s = coeffToString(xc);

                // Determine initial denominator.
                // d is a power of 10 and the minimum max denominator that specifies the value exactly.
                e = d.e = s.length - x.e - 1;
                d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
                md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;

                exp = MAX_EXP;
                MAX_EXP = 1 / 0;
                n = new BigNumber(s);

                // n0 = d1 = 0
                n0.c[0] = 0;

                for (; ;) {
                  q = div(n, d, 0, 1);
                  d2 = d0.plus(q.times(d1));
                  if (d2.comparedTo(md) == 1) break;
                  d0 = d1;
                  d1 = d2;
                  n1 = n0.plus(q.times(d2 = n1));
                  n0 = d2;
                  d = n.minus(q.times(d2 = d));
                  n = d2;
                }

                d2 = div(md.minus(d0), d1, 0, 1);
                n0 = n0.plus(d2.times(n1));
                d0 = d0.plus(d2.times(d1));
                n0.s = n1.s = x.s;
                e = e * 2;

                // Determine which fraction is closer to x, n0/d0 or n1/d1
                r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(
                  div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];

                MAX_EXP = exp;

                return r;
              };


              /*
               * Return the value of this BigNumber converted to a number primitive.
               */
              P.toNumber = function () {
                return +valueOf(this);
              };


              /*
               * Return a string representing the value of this BigNumber rounded to sd significant digits
               * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
               * necessary to represent the integer part of the value in fixed-point notation, then use
               * exponential notation.
               *
               * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
               * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
               *
               * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
               */
              P.toPrecision = function (sd, rm) {
                if (sd != null) intCheck(sd, 1, MAX);
                return format(this, sd, rm, 2);
              };


              /*
               * Return a string representing the value of this BigNumber in base b, or base 10 if b is
               * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
               * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
               * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
               * TO_EXP_NEG, return exponential notation.
               *
               * [b] {number} Integer, 2 to ALPHABET.length inclusive.
               *
               * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
               */
              P.toString = function (b) {
                var str,
                  n = this,
                  s = n.s,
                  e = n.e;

                // Infinity or NaN?
                if (e === null) {
                  if (s) {
                    str = 'Infinity';
                    if (s < 0) str = '-' + str;
                  } else {
                    str = 'NaN';
                  }
                } else {
                  if (b == null) {
                    str = e <= TO_EXP_NEG || e >= TO_EXP_POS
                      ? toExponential(coeffToString(n.c), e)
                      : toFixedPoint(coeffToString(n.c), e, '0');
                  } else if (b === 10 && alphabetHasNormalDecimalDigits) {
                    n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);
                    str = toFixedPoint(coeffToString(n.c), n.e, '0');
                  } else {
                    intCheck(b, 2, ALPHABET.length, 'Base');
                    str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);
                  }

                  if (s < 0 && n.c[0]) str = '-' + str;
                }

                return str;
              };


              /*
               * Return as toString, but do not accept a base argument, and include the minus sign for
               * negative zero.
               */
              P.valueOf = P.toJSON = function () {
                return valueOf(this);
              };


              P._isBigNumber = true;

              if (configObject != null) BigNumber.set(configObject);

              return BigNumber;
            }


            // PRIVATE HELPER FUNCTIONS

            // These functions don't need access to variables,
            // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.


            function bitFloor(n) {
              var i = n | 0;
              return n > 0 || n === i ? i : i - 1;
            }


            // Return a coefficient array as a string of base 10 digits.
            function coeffToString(a) {
              var s, z,
                i = 1,
                j = a.length,
                r = a[0] + '';

              for (; i < j;) {
                s = a[i++] + '';
                z = LOG_BASE - s.length;
                for (; z--; s = '0' + s);
                r += s;
              }

              // Determine trailing zeros.
              for (j = r.length; r.charCodeAt(--j) === 48;);

              return r.slice(0, j + 1 || 1);
            }


            // Compare the value of BigNumbers x and y.
            function compare(x, y) {
              var a, b,
                xc = x.c,
                yc = y.c,
                i = x.s,
                j = y.s,
                k = x.e,
                l = y.e;

              // Either NaN?
              if (!i || !j) return null;

              a = xc && !xc[0];
              b = yc && !yc[0];

              // Either zero?
              if (a || b) return a ? b ? 0 : -j : i;

              // Signs differ?
              if (i != j) return i;

              a = i < 0;
              b = k == l;

              // Either Infinity?
              if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;

              // Compare exponents.
              if (!b) return k > l ^ a ? 1 : -1;

              j = (k = xc.length) < (l = yc.length) ? k : l;

              // Compare digit by digit.
              for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;

              // Compare lengths.
              return k == l ? 0 : k > l ^ a ? 1 : -1;
            }


            /*
             * Check that n is a primitive number, an integer, and in range, otherwise throw.
             */
            function intCheck(n, min, max, name) {
              if (n < min || n > max || n !== mathfloor(n)) {
                throw Error
                  (bignumberError + (name || 'Argument') + (typeof n == 'number'
                    ? n < min || n > max ? ' out of range: ' : ' not an integer: '
                    : ' not a primitive number: ') + String(n));
              }
            }


            // Assumes finite n.
            function isOdd(n) {
              var k = n.c.length - 1;
              return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
            }


            function toExponential(str, e) {
              return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +
                (e < 0 ? 'e' : 'e+') + e;
            }


            function toFixedPoint(str, e, z) {
              var len, zs;

              // Negative exponent?
              if (e < 0) {

                // Prepend zeros.
                for (zs = z + '.'; ++e; zs += z);
                str = zs + str;

                // Positive exponent
              } else {
                len = str.length;

                // Append zeros.
                if (++e > len) {
                  for (zs = z, e -= len; --e; zs += z);
                  str += zs;
                } else if (e < len) {
                  str = str.slice(0, e) + '.' + str.slice(e);
                }
              }

              return str;
            }


            // EXPORT


            BigNumber = clone();
            BigNumber['default'] = BigNumber.BigNumber = BigNumber;

            // AMD.
            if (true) {
              !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () { return BigNumber; }).call(exports, __webpack_require__, exports, module),
                __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

              // Node.js and other environments that support module.exports.
            } else { }
          })(this);


          /***/
}),

/***/ "./node_modules/net/index.js":
/*!***********************************!*\
  !*** ./node_modules/net/index.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

          /*
          Copyright 2013 Sleepless Software Inc. All rights reserved.
          
          Permission is hereby granted, free of charge, to any person obtaining a copy
          of this software and associated documentation files (the "Software"), to
          deal in the Software without restriction, including without limitation the
          rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
          sell copies of the Software, and to permit persons to whom the Software is
          furnished to do so, subject to the following conditions:
          
          The above copyright notice and this permission notice shall be included in
          all copies or substantial portions of the Software.
          
          THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
          IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
          FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
          AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
          LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
          FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
          IN THE SOFTWARE. 
          */

          // yes, I know this seems stupid, but I have my reasons.

          var net = __webpack_require__(/*! net */ "./node_modules/net/index.js")
          for (k in net)
            __webpack_require__.g[k] = net[k]



          /***/
}),

/***/ "./src/QubicConnector.ts":
/*!*******************************!*\
  !*** ./src/QubicConnector.ts ***!
  \*******************************/
/***/ (function (__unused_webpack_module, exports, __webpack_require__) {

          "use strict";

          var __importDefault = (this && this.__importDefault) || function (mod) {
            return (mod && mod.__esModule) ? mod : { "default": mod };
          };
          Object.defineProperty(exports, "__esModule", ({ value: true }));
          exports.QubicConnector = void 0;
          const QubicPackageType_1 = __webpack_require__(/*! ./qubic-communication/QubicPackageType */ "./src/qubic-communication/QubicPackageType.ts");
          const ReceivedPackage_1 = __webpack_require__(/*! ./qubic-communication/ReceivedPackage */ "./src/qubic-communication/ReceivedPackage.ts");
          const RequestResponseHeader_1 = __webpack_require__(/*! ./qubic-communication/RequestResponseHeader */ "./src/qubic-communication/RequestResponseHeader.ts");
          const QubicTickInfo_1 = __webpack_require__(/*! ./qubic-types/QubicTickInfo */ "./src/qubic-types/QubicTickInfo.ts");
          const QubicEntityResponse_1 = __webpack_require__(/*! ./qubic-communication/QubicEntityResponse */ "./src/qubic-communication/QubicEntityResponse.ts");
          const QubicPackageBuilder_1 = __webpack_require__(/*! ./QubicPackageBuilder */ "./src/QubicPackageBuilder.ts");
          const QubicEntityRequest_1 = __webpack_require__(/*! ./qubic-communication/QubicEntityRequest */ "./src/qubic-communication/QubicEntityRequest.ts");
          const crypto_1 = __importDefault(__webpack_require__(/*! ./crypto */ "./src/crypto/index.js"));
          const keyHelper_1 = __webpack_require__(/*! ./keyHelper */ "./src/keyHelper.ts");
          class QubicConnector {
            constructor(bridgeAddress) {
              this.PORT = 21841;
              this.isWsConnected = false;
              this.peerConnected = false;
              this.buffer = new Uint8Array(4 * 1024 * 1024);
              this.bufferWritePosition = 0;
              this.bufferReadPosition = 0;
              this.currentTick = 0;
              this.isNodeJs = false;
              this.isNodeJs = this.isNodeJsCheck();
              if (!this.isNodeJs) {
                this.webSocket = new WebSocket(bridgeAddress || 'wss://webbridge.qubic.li/'); // qli web bridge address
              }
              else {
                // assume we are running in nodejs
                const net2 = __webpack_require__(/*! net */ "./node_modules/net/index.js");
                this.socket = new net2.Socket();
                if (this.socket) {
                  this.socket.on('data', (d) => {
                    this.writeBuffer(d);
                  });
                  this.socket.on('close', (d) => {
                    if (this.onPeerDisconnected)
                      this.onPeerDisconnected();
                  });
                }
              }
            }
            isNodeJsCheck() {
              if (typeof window === 'undefined') {
                return true;
              }
              else {
                return false;
              }
            }
            onPeerConnect() {
              this.peerConnected = true;
              if (this.onPeerConnected)
                this.onPeerConnected();
            }
            toBase64(u8) {
              return btoa(String.fromCharCode.apply(null, u8));
            }
            connectPeer(ipAddress) {
              if (!this.isNodeJs) {
                if (!this.isWsConnected) {
                  console.error("WS not connected");
                  return false;
                }
                this.webSocket?.send(JSON.stringify({
                  command: 'connect',
                  host: ipAddress,
                  port: this.PORT
                }));
              }
              else {
                this.socket?.connect(this.PORT, ipAddress, () => {
                  this.onPeerConnect();
                });
              }
              this.connectedPeerAddress = ipAddress;
              return true;
            }
            disconnectPeer() {
              if (this.connectedPeerAddress) {
                if (!this.isNodeJs) {
                  this.webSocket?.send(JSON.stringify({
                    command: 'disconnect',
                    host: this.connectedPeerAddress,
                    port: this.PORT
                  }));
                }
                else {
                  this.socket?.destroy();
                }
                this.connectedPeerAddress = undefined;
                this.peerConnected = false;
              }
            }
            reconnectPeer() {
              this.disconnectPeer(); // disconnect
              if (this.connectedPeerAddress) {
                return this.connectPeer(this.connectedPeerAddress); // conncet
              }
              return false;
            }
            writeBuffer(data) {
              //console.log("writeBuffer", data);
              let writeLength = data.length;
              if (this.bufferWritePosition + data.length > this.buffer.length)
                writeLength = this.buffer.length - this.bufferWritePosition;
              this.buffer.set(data.slice(0, writeLength), this.bufferWritePosition);
              this.bufferWritePosition += writeLength;
              if (writeLength < data.length) {
                this.bufferWritePosition = 0;
                this.buffer.set(data.slice(writeLength, data.length));
                this.bufferWritePosition += data.length - writeLength;
              }
              this.processBuffer();
            }
            readFromBuffer(numberOfBytes, setReadPosition = false) {
              const extract = new Uint8Array(numberOfBytes);
              if (this.bufferReadPosition + numberOfBytes <= this.buffer.length) {
                const readBytes = this.buffer.slice(this.bufferReadPosition, this.bufferReadPosition + numberOfBytes);
                //console.log("BUFFER READ " + this.bufferReadPosition + " - " + numberOfBytes, readBytes);
                extract.set(readBytes);
              }
              else {
                extract.set(this.buffer.slice(this.bufferReadPosition));
                extract.set(this.buffer.slice(0, this.bufferReadPosition + numberOfBytes - this.buffer.length));
              }
              if (setReadPosition)
                this.setReadPosition(numberOfBytes);
              return extract;
            }
            setReadPosition(numberOfReadByts) {
              if (this.bufferReadPosition + numberOfReadByts > this.buffer.length)
                this.bufferReadPosition = 0 + (this.bufferReadPosition + numberOfReadByts - this.buffer.length);
              else
                this.bufferReadPosition += numberOfReadByts;
            }
            processBuffer() {
              while (true) {
                const toReadBytes = Math.abs(this.bufferWritePosition - this.bufferReadPosition);
                if (toReadBytes < 8) /* header size */ {
                  break;
                }
                // read header
                const header = new RequestResponseHeader_1.RequestResponseHeader();
                header.parse(this.readFromBuffer(8 /* header size */));
                if (header === undefined || toReadBytes < header?.getSize()) {
                  //console.log("NOT ENOUGH BYTES FOR COMPLETE PACKAGE");
                  break;
                }
                this.setReadPosition(header.getPackageSize());
                const recPackage = new ReceivedPackage_1.ReceivedPackage();
                recPackage.header = header;
                recPackage.ipAddress = this.connectedPeerAddress ?? "";
                if (header.getSize() > 8) {
                  recPackage.payLoad = this.readFromBuffer(header.getSize() - header.getPackageSize(), true);
                }
                else {
                  recPackage.payLoad = new Uint8Array(0);
                }
                this.processPackage(recPackage);
                if (this.onPackageReceived)
                  this.onPackageReceived(recPackage);
              }
            }
            processPackage(p) {
              if (p.header.getType() == QubicPackageType_1.QubicPackageType.RESPOND_CURRENT_TICK_INFO) {
                const tickInfo = new QubicTickInfo_1.QubicTickInfo().parse(p.payLoad);
                if (tickInfo && this.currentTick < tickInfo.getTick()) {
                  this.currentTick = tickInfo.getTick();
                  if (this.onTick)
                    this.onTick(this.currentTick);
                }
              }
              else if (p.header.getType() == QubicPackageType_1.QubicPackageType.RESPOND_ENTITY) {
                const entityResponse = new QubicEntityResponse_1.QubicEntityResponse().parse(p.payLoad);
                if (this.onBalance)
                  this.onBalance(entityResponse);
              }
            }
            requestTickInfo() {
              if (this.peerConnected) {
                const header = new RequestResponseHeader_1.RequestResponseHeader(QubicPackageType_1.QubicPackageType.REQUEST_CURRENT_TICK_INFO);
                header.randomizeDejaVu();
                this.sendPackage(header.getPackageData());
              }
            }
            requestBalance(pkey) {
              if (!this.peerConnected)
                return;
              const header = new RequestResponseHeader_1.RequestResponseHeader(QubicPackageType_1.QubicPackageType.REQUEST_ENTITY, pkey.getPackageSize());
              header.randomizeDejaVu();
              const builder = new QubicPackageBuilder_1.QubicPackageBuilder(header.getSize());
              builder.add(header);
              builder.add(new QubicEntityRequest_1.QubicEntityRequest(pkey));
              const data = builder.getData();
              this.sendPackage(data);
            }
            GetPrivatePublicKey(seed) {
              return crypto_1.default.then(({ schnorrq, K12 }) => {
                const keyHelper = new keyHelper_1.KeyHelper();
                const privateKey = keyHelper.privateKey(seed, 0, K12);
                const publicKey = keyHelper.createPublicKey(privateKey, schnorrq, K12);
                return { privateKey, publicKey };
              });
            }
            initialize() {
              this.bufferReadPosition = 0;
              this.bufferWritePosition = 0;
              // start tick info interval to get current tick regularly
              this.timer = setInterval(() => {
                this.requestTickInfo();
              }, 500);
              if (!this.isNodeJs && this.webSocket) {
                this.webSocket.onmessage = (event) => {
                  const jsonData = JSON.parse(event.data);
                  if (jsonData.message === 'connect done') {
                    this.onPeerConnect();
                  }
                  else if (jsonData.message === 'disconnect done') {
                    if (this.onPeerDisconnected)
                      this.onPeerDisconnected();
                  }
                  else if (jsonData.message && jsonData.message.indexOf("ConnectionResetError") >= 0) {
                    // when the peer closes the conection this error occures. if we are publishing we want to reconnect now
                    this.reconnectPeer();
                  }
                  else if (jsonData.message === 'recv data') {
                    const byteArray = Uint8Array.from(atob(jsonData.data), c => c.charCodeAt(0));
                    this.writeBuffer(byteArray);
                  }
                };
                this.webSocket.onopen = () => {
                  this.isWsConnected = true;
                  if (this.onReady)
                    this.onReady();
                };
                this.webSocket.onclose = () => {
                  this.isWsConnected = false;
                  this.peerConnected = false;
                  if (this.onWsDisconnected)
                    this.onWsDisconnected();
                };
              }
              else if (this.socket) {
                if (this.onReady)
                  this.onReady();
              }
            }
            /**
             * connects to a specific peer
             * @param ip node/peer ip address
             */
            connect(ip) {
              this.connectPeer(ip);
            }
            sendPackage(data) {
              if (!this.isNodeJs) {
                return this.sendWsPackage(data);
              }
              else {
                return this.sendTcpPackage(data);
              }
            }
            sendWsPackage(data) {
              if (!this.isWsConnected || !this.peerConnected) {
                return false;
              }
              //console.log("REQUEST", data);
              this.webSocket?.send(JSON.stringify({
                command: 'sendb',
                data: this.toBase64(data)
              }));
              return true;
            }
            sendTcpPackage(data) {
              if (!this.peerConnected) {
                return false;
              }
              this.socket?.write(data);
              return true;
            }
            /**
             * starts the connection
             */
            start() {
              this.initialize();
            }
            /**
             * stops the web bridge ws connection
             */
            stop() {
              clearInterval(this.timer);
              this.disconnectPeer();
            }
            destroy() {
              this.stop();
              if (this.webSocket)
                this.webSocket.close();
              if (this.socket)
                this.socket.destroy(); // untested!
            }
          }
          exports.QubicConnector = QubicConnector;


          /***/
}),

/***/ "./src/QubicDefinitions.ts":
/*!*********************************!*\
  !*** ./src/QubicDefinitions.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports) => {

          "use strict";

          Object.defineProperty(exports, "__esModule", ({ value: true }));
          exports.QubicDefinitions = void 0;
          class QubicDefinitions {
          }
          exports.QubicDefinitions = QubicDefinitions;
          QubicDefinitions.SIGNATURE_LENGTH = 64;
          QubicDefinitions.PUBLIC_KEY_LENGTH = 32;
          QubicDefinitions.MAX_TRANSACTION_SIZE = 1024;
          QubicDefinitions.DIGEST_LENGTH = 32;
          QubicDefinitions.SPECTRUM_DEPTH = 24;
          QubicDefinitions.NUMBER_OF_TRANSACTIONS_PER_TICK = 1024;
          QubicDefinitions.MAX_NUMBER_OF_CONTRACTS = 1024;
          // important addresses
          QubicDefinitions.EMPTY_ADDRESS = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFXIB";
          QubicDefinitions.ARBITRATOR_ADDRESS = "AFZPUAIYVPNUYGJRQVLUKOPPVLHAZQTGLYAAUUNBXFTVTAMSBKQBLEIEPCVJ";
          QubicDefinitions.DISPATCHER_ADDRESSS = "XPXYKFLGSWRHRGAUKWFWVXCDVEYAPCPCNUTMUDWFGDYQCWZNJMWFZEEGCFFO";
          QubicDefinitions.QX_ADDRESS = "BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARMID";
          // deprectaed/obsolete (only here for backward compatibility)
          QubicDefinitions.ARBITRATOR = "AFZPUAIYVPNUYGJRQVLUKOPPVLHAZQTGLYAAUUNBXFTVTAMSBKQBLEIEPCVJ";
          QubicDefinitions.QX_TRANSFER_ASSET_FEE = 100; // 100 Qubic's
          QubicDefinitions.QX_ISSUE_ASSET_FEE = 1000000000; // 1b Qubic's
          QubicDefinitions.QX_ISSUE_ASSET_INPUT_TYPE = 1; // input type for a tx to issue an asset
          QubicDefinitions.QX_TRANSFER_ASSET_INPUT_TYPE = 2; // input type for a tx to transfer an asset
          QubicDefinitions.QX_ADD_ASK_ORDER = 5; // input type for a tx to create an ask order
          QubicDefinitions.QX_ADD_BID_ORDER = 6; // input type for a tx to create a bid order
          QubicDefinitions.QX_REMOVE_ASK_ORDER = 7; // input type for a tx to remove an ask order
          QubicDefinitions.QX_REMOVE_BID_ORDER = 8; // input type for a tx to remove a bid order
          /* QUTIL SC */
          QubicDefinitions.QUTIL_ADDRESS = "EAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVWRF";
          QubicDefinitions.QUTIL_SENDMANY_INPUT_TYPE = 1; // input type for send many on Qutil
          QubicDefinitions.QUTIL_SENDMANY_FEE = 10; // fee in qubics for send many


          /***/
}),

/***/ "./src/QubicPackageBuilder.ts":
/*!************************************!*\
  !*** ./src/QubicPackageBuilder.ts ***!
  \************************************/
/***/ (function (__unused_webpack_module, exports, __webpack_require__) {

          "use strict";

          var __importDefault = (this && this.__importDefault) || function (mod) {
            return (mod && mod.__esModule) ? mod : { "default": mod };
          };
          Object.defineProperty(exports, "__esModule", ({ value: true }));
          exports.QubicPackageBuilder = void 0;
          const QubicDefinitions_1 = __webpack_require__(/*! ./QubicDefinitions */ "./src/QubicDefinitions.ts");
          const crypto_1 = __importDefault(__webpack_require__(/*! ./crypto */ "./src/crypto/index.js"));
          const keyHelper_1 = __webpack_require__(/*! ./keyHelper */ "./src/keyHelper.ts");
          class QubicPackageBuilder {
            constructor(size) {
              this.offset = 0;
              // todo: create a dynamic builder
              this.packet = new Uint8Array(size);
            }
            getData() {
              return this.packet;
            }
            sign(seed) {
              return crypto_1.default.then(({ schnorrq, K12 }) => {
                const keyHelper = new keyHelper_1.KeyHelper();
                const privateKey = keyHelper.privateKey(seed, 0, K12);
                const publicKey = keyHelper.createPublicKey(privateKey, schnorrq, K12);
                const digest = new Uint8Array(QubicDefinitions_1.QubicDefinitions.DIGEST_LENGTH);
                const toSign = this.packet.slice(0, this.offset);
                K12(toSign, digest, QubicDefinitions_1.QubicDefinitions.DIGEST_LENGTH);
                const signatur = schnorrq.sign(privateKey, publicKey, digest);
                this.packet.set(signatur, this.offset);
                this.offset += QubicDefinitions_1.QubicDefinitions.SIGNATURE_LENGTH;
                return this.packet.slice(0, this.offset);
              });
            }
            signAndDigest(seed) {
              return crypto_1.default.then(({ schnorrq, K12 }) => {
                const keyHelper = new keyHelper_1.KeyHelper();
                const privateKey = keyHelper.privateKey(seed, 0, K12);
                const publicKey = keyHelper.createPublicKey(privateKey, schnorrq, K12);
                const digest = new Uint8Array(QubicDefinitions_1.QubicDefinitions.DIGEST_LENGTH);
                const toSign = this.packet.slice(0, this.offset);
                K12(toSign, digest, QubicDefinitions_1.QubicDefinitions.DIGEST_LENGTH);
                const signature = schnorrq.sign(privateKey, publicKey, digest);
                this.packet.set(signature, this.offset);
                this.offset += QubicDefinitions_1.QubicDefinitions.SIGNATURE_LENGTH;
                const signedData = this.packet.slice(0, this.offset);
                K12(signedData, digest, QubicDefinitions_1.QubicDefinitions.DIGEST_LENGTH);
                return {
                  signedData: signedData,
                  digest: digest,
                  signature: signature
                };
              });
            }
            add(q) {
              const data = q.getPackageData();
              this.packet.set(data, this.offset);
              this.offset += data.length;
              return this;
            }
            adduint8Array(q) {
              return this.addRaw(q);
            }
            addRaw(q) {
              this.packet.set(q, this.offset);
              this.offset += q.length;
              return this;
            }
            addShort(q /* must be a short */) {
              this.packet.set(this.FromShort(q), this.offset);
              this.offset += 2;
              return this;
            }
            addInt(q /* must be a short */) {
              this.packet.set(this.FromInt(q), this.offset);
              this.offset += 4;
              return this;
            }
            FromInt(num) {
              // If num is a 32-bit integer
              let buffer = new ArrayBuffer(4); // 4 bytes for a 32-bit integer
              let dataview = new DataView(buffer);
              dataview.setInt32(0, num, true); // Use setUint32 if you are dealing with unsigned integers
              return new Uint8Array(buffer);
            }
            FromShort(num) {
              // If num is a 32-bit integer
              let buffer = new ArrayBuffer(2); // 4 bytes for a 32-bit integer
              let dataview = new DataView(buffer);
              dataview.setInt16(0, num, true); // Use setUint32 if you are dealing with unsigned integers
              return new Uint8Array(buffer);
            }
          }
          exports.QubicPackageBuilder = QubicPackageBuilder;


          /***/
}),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ (function (__unused_webpack_module, exports, __webpack_require__) {

          "use strict";

          var __importDefault = (this && this.__importDefault) || function (mod) {
            return (mod && mod.__esModule) ? mod : { "default": mod };
          };
          Object.defineProperty(exports, "__esModule", ({ value: true }));
          // main accessors
          const QubicConnector_1 = __webpack_require__(/*! ./QubicConnector */ "./src/QubicConnector.ts");
          const QubicDefinitions_1 = __webpack_require__(/*! ./QubicDefinitions */ "./src/QubicDefinitions.ts");
          const qubicHelper_1 = __webpack_require__(/*! ./qubicHelper */ "./src/qubicHelper.ts");
          const QubicPackageBuilder_1 = __webpack_require__(/*! ./QubicPackageBuilder */ "./src/QubicPackageBuilder.ts");
          // types
          const DynamicPayload_1 = __webpack_require__(/*! ./qubic-types/DynamicPayload */ "./src/qubic-types/DynamicPayload.ts");
          const Long_1 = __webpack_require__(/*! ./qubic-types/Long */ "./src/qubic-types/Long.ts");
          const PublicKey_1 = __webpack_require__(/*! ./qubic-types/PublicKey */ "./src/qubic-types/PublicKey.ts");
          const QubicEntity_1 = __webpack_require__(/*! ./qubic-types/QubicEntity */ "./src/qubic-types/QubicEntity.ts");
          const QubicTickData_1 = __webpack_require__(/*! ./qubic-types/QubicTickData */ "./src/qubic-types/QubicTickData.ts");
          const QubicTickInfo_1 = __webpack_require__(/*! ./qubic-types/QubicTickInfo */ "./src/qubic-types/QubicTickInfo.ts");
          const QubicTransaction_1 = __webpack_require__(/*! ./qubic-types/QubicTransaction */ "./src/qubic-types/QubicTransaction.ts");
          const Signature_1 = __webpack_require__(/*! ./qubic-types/Signature */ "./src/qubic-types/Signature.ts");
          // transaction Payloads
          const QubicTransferAssetPayload_1 = __webpack_require__(/*! ./qubic-types/transacion-payloads/QubicTransferAssetPayload */ "./src/qubic-types/transacion-payloads/QubicTransferAssetPayload.ts");
          const QubicTransferSendManyPayload_1 = __webpack_require__(/*! ./qubic-types/transacion-payloads/QubicTransferSendManyPayload */ "./src/qubic-types/transacion-payloads/QubicTransferSendManyPayload.ts");
          // communication packages
          const QubicEntityRequest_1 = __webpack_require__(/*! ./qubic-communication/QubicEntityRequest */ "./src/qubic-communication/QubicEntityRequest.ts");
          const QubicEntityResponse_1 = __webpack_require__(/*! ./qubic-communication/QubicEntityResponse */ "./src/qubic-communication/QubicEntityResponse.ts");
          const QubicPackageType_1 = __webpack_require__(/*! ./qubic-communication/QubicPackageType */ "./src/qubic-communication/QubicPackageType.ts");
          const ReceivedPackage_1 = __webpack_require__(/*! ./qubic-communication/ReceivedPackage */ "./src/qubic-communication/ReceivedPackage.ts");
          const RequestResponseHeader_1 = __webpack_require__(/*! ./qubic-communication/RequestResponseHeader */ "./src/qubic-communication/RequestResponseHeader.ts");
          // crypto (base qubic library)
          const index_1 = __importDefault(__webpack_require__(/*! ./crypto/index */ "./src/crypto/index.js"));
          exports["default"] = {
            crypto: index_1.default,
            QubicEntityRequest: QubicEntityRequest_1.QubicEntityRequest,
            QubicEntityResponse: QubicEntityResponse_1.QubicEntityResponse,
            QubicPackageType: QubicPackageType_1.QubicPackageType,
            ReceivedPackage: ReceivedPackage_1.ReceivedPackage,
            RequestResponseHeader: RequestResponseHeader_1.RequestResponseHeader,
            DynamicPayload: DynamicPayload_1.DynamicPayload,
            Long: Long_1.Long,
            PublicKey: PublicKey_1.PublicKey,
            QubicEntity: QubicEntity_1.QubicEntity,
            QubicTickData: QubicTickData_1.QubicTickData,
            QubicTickInfo: QubicTickInfo_1.QubicTickInfo,
            QubicTransaction: QubicTransaction_1.QubicTransaction,
            Signature: Signature_1.Signature,
            QubicConnector: QubicConnector_1.QubicConnector,
            QubicDefinitions: QubicDefinitions_1.QubicDefinitions,
            QubicHelper: qubicHelper_1.QubicHelper,
            QubicPackageBuilder: QubicPackageBuilder_1.QubicPackageBuilder,
            QubicTransferAssetPayload: QubicTransferAssetPayload_1.QubicTransferAssetPayload,
            QubicTransferSendManyPayload: QubicTransferSendManyPayload_1.QubicTransferSendManyPayload
          };


          /***/
}),

/***/ "./src/keyHelper.ts":
/*!**************************!*\
  !*** ./src/keyHelper.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, exports) => {

          "use strict";

          Object.defineProperty(exports, "__esModule", ({ value: true }));
          exports.KeyHelper = void 0;
          class KeyHelper {
            constructor() {
              this.SEED_ALPHABET = 'abcdefghijklmnopqrstuvwxyz';
              this.PRIVATE_KEY_LENGTH = 32;
              this.PUBLIC_KEY_LENGTH = 32;
              this.CHECKSUM_LENGTH = 3;
            }
            createPublicKey(privateKey, schnorrq, K12) {
              const publicKeyWithChecksum = new Uint8Array(this.PUBLIC_KEY_LENGTH + this.CHECKSUM_LENGTH);
              publicKeyWithChecksum.set(schnorrq.generatePublicKey(privateKey));
              K12(publicKeyWithChecksum.subarray(0, this.PUBLIC_KEY_LENGTH), publicKeyWithChecksum, this.CHECKSUM_LENGTH, this.PUBLIC_KEY_LENGTH);
              return publicKeyWithChecksum;
            }
            seedToBytes(seed) {
              const bytes = new Uint8Array(seed.length);
              for (let i = 0; i < seed.length; i++) {
                bytes[i] = this.SEED_ALPHABET.indexOf(seed[i]);
              }
              return bytes;
            }
            ;
            privateKey(seed, index, K12) {
              const byteSeed = this.seedToBytes(seed);
              const preimage = byteSeed.slice();
              while (index-- > 0) {
                for (let i = 0; i < preimage.length; i++) {
                  if (++preimage[i] > this.SEED_ALPHABET.length) {
                    preimage[i] = 1;
                  }
                  else {
                    break;
                  }
                }
              }
              const key = new Uint8Array(this.PRIVATE_KEY_LENGTH);
              K12(preimage, key, this.PRIVATE_KEY_LENGTH);
              return key;
            }
            ;
          }
          exports.KeyHelper = KeyHelper;
          KeyHelper.getIdentityBytes = function (identity) {
            const publicKeyBytes = new Uint8Array(32);
            const view = new DataView(publicKeyBytes.buffer, 0);
            for (let i = 0; i < 4; i++) {
              view.setBigUint64(i * 8, 0n, true);
              for (let j = 14; j-- > 0;) {
                view.setBigUint64(i * 8, view.getBigUint64(i * 8, true) * 26n + BigInt(identity.charCodeAt(i * 14 + j)) - BigInt('A'.charCodeAt(0)), true);
              }
            }
            return publicKeyBytes;
          };


          /***/
}),

/***/ "./src/qubic-communication/QubicEntityRequest.ts":
/*!*******************************************************!*\
  !*** ./src/qubic-communication/QubicEntityRequest.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

          "use strict";

          Object.defineProperty(exports, "__esModule", ({ value: true }));
          exports.QubicEntityRequest = void 0;
          const QubicPackageBuilder_1 = __webpack_require__(/*! ../QubicPackageBuilder */ "./src/QubicPackageBuilder.ts");
          const PublicKey_1 = __webpack_require__(/*! ../qubic-types/PublicKey */ "./src/qubic-types/PublicKey.ts");
          const QubicDefinitions_1 = __webpack_require__(/*! ../QubicDefinitions */ "./src/QubicDefinitions.ts");
          /**
           * typedef struct
          * {
          *     unsigned char publicKey[32];
          * } RequestedEntity;
           */
          class QubicEntityRequest {
            getPublicKey() {
              return this.publicKey;
            }
            setPublicKey(publicKey) {
              this.publicKey = publicKey;
            }
            constructor(publicKey) {
              this._internalPackageSize = 32;
              this.publicKey = new PublicKey_1.PublicKey();
              if (publicKey !== undefined)
                this.setPublicKey(publicKey);
            }
            getPackageSize() {
              return this.getPackageData().length;
            }
            parse(data) {
              if (data.length !== this._internalPackageSize) {
                console.error("INVALID PACKAGE SIZE");
                return undefined;
              }
              this.setPublicKey(new PublicKey_1.PublicKey(data.slice(0, QubicDefinitions_1.QubicDefinitions.PUBLIC_KEY_LENGTH)));
              return this;
            }
            getPackageData() {
              const builder = new QubicPackageBuilder_1.QubicPackageBuilder(this._internalPackageSize);
              builder.add(this.publicKey);
              return builder.getData();
            }
          }
          exports.QubicEntityRequest = QubicEntityRequest;


          /***/
}),

/***/ "./src/qubic-communication/QubicEntityResponse.ts":
/*!********************************************************!*\
  !*** ./src/qubic-communication/QubicEntityResponse.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

          "use strict";

          Object.defineProperty(exports, "__esModule", ({ value: true }));
          exports.QubicEntityResponse = void 0;
          const QubicPackageBuilder_1 = __webpack_require__(/*! ../QubicPackageBuilder */ "./src/QubicPackageBuilder.ts");
          const QubicEntity_1 = __webpack_require__(/*! ../qubic-types/QubicEntity */ "./src/qubic-types/QubicEntity.ts");
          /**
           * typedef struct
           * {
           *     unsigned char publicKey[32];
           *     long long incomingAmount, outgoingAmount;
           *     unsigned int numberOfIncomingTransfers, numberOfOutgoingTransfers;
           *     unsigned int latestIncomingTransferTick, latestOutgoingTransferTick;
           *     unsigned int tick;
           *     int spectrumIndex;
           *     unsigned char siblings[SPECTRUM_DEPTH][32];
           * } RespondedEntity;
           */
          class QubicEntityResponse {
            getEntity() {
              return this.entity;
            }
            setEntity(entity) {
              this.entity = entity;
            }
            getTick() {
              return this.tick;
            }
            setTick(tick) {
              this.tick = tick;
            }
            getSpectrumIndex() {
              return this.spectrumIndex;
            }
            setSpectrumIndex(spectrumIndex) {
              this.spectrumIndex = spectrumIndex;
            }
            getSiblings() {
              return this.siblings;
            }
            setSiblings(siblings) {
              this.siblings = siblings;
            }
            constructor() {
              this._internalPackageSize = 840;
              this.entity = new QubicEntity_1.QubicEntity();
              this.tick = 0;
              this.spectrumIndex = 0;
              this.siblings = new Uint8Array();
            }
            getPackageSize() {
              return this.getPackageData().length;
            }
            parse(data) {
              if (data.length !== this._internalPackageSize) {
                console.error("INVALID PACKAGE SIZE");
                return undefined;
              }
              const dataView = new DataView(data.buffer);
              let offset = 0;
              const entity = new QubicEntity_1.QubicEntity();
              if (entity.parse(data.slice(0, entity.getPackageSize())) !== undefined) {
                this.setEntity(entity);
                offset += entity.getPackageSize();
                this.setTick(dataView.getInt32(offset, true));
                offset += 4;
                this.setSpectrumIndex(dataView.getInt16(offset, true));
                offset += 4;
                this.setSiblings(data.slice(offset));
              }
              return this;
            }
            getPackageData() {
              const builder = new QubicPackageBuilder_1.QubicPackageBuilder(this._internalPackageSize);
              builder.add(this.entity);
              builder.addInt(this.tick);
              builder.addInt(this.spectrumIndex);
              builder.addRaw(this.siblings);
              return builder.getData();
            }
          }
          exports.QubicEntityResponse = QubicEntityResponse;


          /***/
}),

/***/ "./src/qubic-communication/QubicPackageType.ts":
/*!*****************************************************!*\
  !*** ./src/qubic-communication/QubicPackageType.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

          "use strict";

          Object.defineProperty(exports, "__esModule", ({ value: true }));
          exports.QubicPackageType = void 0;
          class QubicPackageType {
          }
          exports.QubicPackageType = QubicPackageType;
          QubicPackageType.EXCHANGE_PUBLIC_PEER = 0;
          QubicPackageType.BROADCAST_MESSAGE = 1;
          QubicPackageType.BROADCAST_COMPUTORS = 2;
          QubicPackageType.BROADCAST_TICK = 3;
          QubicPackageType.BROADCAST_FUTURE_TICK_DATA = 8;
          QubicPackageType.REQUEST_COMPUTORS = 11;
          QubicPackageType.REQUEST_QUORUM_TICK = 14;
          QubicPackageType.REQUEST_TICK_DATA = 16;
          QubicPackageType.BROADCAST_TRANSACTION = 24;
          QubicPackageType.REQUEST_CURRENT_TICK_INFO = 27;
          QubicPackageType.RESPOND_CURRENT_TICK_INFO = 28;
          QubicPackageType.REQUEST_TICK_TRANSACTIONS = 29;
          QubicPackageType.REQUEST_ENTITY = 31;
          QubicPackageType.RESPOND_ENTITY = 32;
          QubicPackageType.REQUEST_CONTRACT_IPO = 33;
          QubicPackageType.RESPOND_CONTRACT_IPO = 34;
          QubicPackageType.REQUEST_ISSUED_ASSETS = 36;
          QubicPackageType.RESPOND_ISSUED_ASSETS = 37;
          QubicPackageType.REQUEST_OWNED_ASSETS = 38;
          QubicPackageType.RESPOND_OWNED_ASSETS = 39;
          QubicPackageType.REQUEST_POSSESSED_ASSETS = 39;
          QubicPackageType.RESPOND_POSSESSED_ASSETS = 40;
          QubicPackageType.PROCESS_SPECIAL_COMMAND = 255;


          /***/
}),

/***/ "./src/qubic-communication/ReceivedPackage.ts":
/*!****************************************************!*\
  !*** ./src/qubic-communication/ReceivedPackage.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

          "use strict";

          Object.defineProperty(exports, "__esModule", ({ value: true }));
          exports.ReceivedPackage = void 0;
          class ReceivedPackage {
          }
          exports.ReceivedPackage = ReceivedPackage;


          /***/
}),

/***/ "./src/qubic-communication/RequestResponseHeader.ts":
/*!**********************************************************!*\
  !*** ./src/qubic-communication/RequestResponseHeader.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

          "use strict";

          Object.defineProperty(exports, "__esModule", ({ value: true }));
          exports.RequestResponseHeader = void 0;
          class RequestResponseHeader {
            /**
             *
             * @param packageType type of the package to send (use QubicPackagetypes statics)
             * @param payloadSize size of the qubic package (header size is added automatically)
             */
            constructor(packageType = undefined, payloadSize = undefined) {
              this.size = 0;
              this.type = 0;
              this.dejaVu = 0;
              if (packageType !== undefined) {
                this.setType(packageType);
              }
              if (payloadSize !== undefined) {
                this.setSize(payloadSize + this.getPackageSize());
              }
              else {
                this.setSize(this.getPackageSize());
              }
            }
            setType(t) {
              this.type = t;
              return this;
            }
            getType() {
              return this.type;
            }
            setSize(t) {
              this.size = t;
              return this;
            }
            getSize() {
              return this.size;
            }
            setDejaVu(t) {
              this.dejaVu = t;
              return this;
            }
            getDejaVu() {
              return this.dejaVu;
            }
            randomizeDejaVu() {
              this.dejaVu = Math.floor(Math.random() * 2147483647);
            }
            getPackageSize() {
              return this.getPackageData().length;
            }
            parse(data) {
              if (data.length < 8) {
                console.error("INVALID PACKAGE SIZE");
                return undefined;
              }
              this.setSize((data[2] << 16) | (data[1] << 8) | data[0]);
              this.setType(data[3]);
              this.setDejaVu((data[2] << 24) | (data[2] << 16) | (data[1] << 8) | data[0]);
              return this;
            }
            getPackageData() {
              // validation of packet
              if (this.size > 16777215) {
                throw new Error("Size cannot be >16777215");
              }
              if (this.type > 255 || this.type < 0) {
                throw new Error("Type must be between 0 and 255");
              }
              var bytes = new Uint8Array(8).fill(0);
              let offset = 0;
              // generate size
              bytes[offset++] = this.size;
              bytes[offset++] = (this.size >> 8);
              bytes[offset++] = (this.size >> 16);
              bytes[offset++] = this.type;
              bytes[offset++] = this.dejaVu;
              bytes[offset++] = (this.dejaVu >> 8);
              bytes[offset++] = (this.dejaVu >> 16);
              bytes[offset++] = (this.dejaVu >> 24);
              return bytes;
            }
          }
          exports.RequestResponseHeader = RequestResponseHeader;


          /***/
}),

/***/ "./src/qubic-types/DynamicPayload.ts":
/*!*******************************************!*\
  !*** ./src/qubic-types/DynamicPayload.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports) => {

          "use strict";

          Object.defineProperty(exports, "__esModule", ({ value: true }));
          exports.DynamicPayload = void 0;
          class DynamicPayload {
            /**
             * Create a dynamic payload
             * the maxSize should be set to the max expected size for this paload.
             */
            constructor(maxSize) {
              this.filledSize = 0;
              this.maxSize = 0;
              this.bytes = new Uint8Array(maxSize).fill(0);
              this.maxSize = maxSize;
            }
            setPayload(data) {
              if (data.length > this.maxSize)
                throw new Error("data must be lower or equal " + this.maxSize);
              this.bytes = data;
              this.filledSize = this.bytes.length;
            }
            getPackageData() {
              if (this.filledSize == 0)
                return new Uint8Array(0);
              return this.bytes;
            }
            getPackageSize() {
              return this.filledSize;
            }
          }
          exports.DynamicPayload = DynamicPayload;


          /***/
}),

/***/ "./src/qubic-types/Long.ts":
/*!*********************************!*\
  !*** ./src/qubic-types/Long.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports) => {

          "use strict";

          Object.defineProperty(exports, "__esModule", ({ value: true }));
          exports.Long = void 0;
          class Long {
            constructor(initialValue = 0) {
              this.value = BigInt(0);
              if (typeof initialValue === "number") {
                this.setNumber(initialValue);
              }
              else if (initialValue instanceof Uint8Array) {
                const view = new DataView(initialValue.buffer, 0);
                this.setNumber(view.getBigUint64(0, true));
              }
              else if (initialValue !== undefined) {
                this.setNumber(initialValue);
              }
            }
            setNumber(n) {
              if (typeof n === "number")
                this.value = BigInt(n);
              else
                this.value = n;
            }
            getNumber() {
              return this.value;
            }
            getPackageSize() {
              return 8; // fixed size 
            }
            getPackageData() {
              let buffer = new ArrayBuffer(8);
              let dataview = new DataView(buffer);
              dataview.setBigInt64(0, this.value, true);
              return new Uint8Array(buffer);
            }
          }
          exports.Long = Long;


          /***/
}),

/***/ "./src/qubic-types/PublicKey.ts":
/*!**************************************!*\
  !*** ./src/qubic-types/PublicKey.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

          "use strict";

          Object.defineProperty(exports, "__esModule", ({ value: true }));
          exports.PublicKey = void 0;
          const keyHelper_1 = __webpack_require__(/*! ../keyHelper */ "./src/keyHelper.ts");
          const QubicDefinitions_1 = __webpack_require__(/*! ../QubicDefinitions */ "./src/QubicDefinitions.ts");
          const qubicHelper_1 = __webpack_require__(/*! ../qubicHelper */ "./src/qubicHelper.ts");
          class PublicKey {
            constructor(identity = undefined) {
              this.bytes = new Uint8Array(QubicDefinitions_1.QubicDefinitions.PUBLIC_KEY_LENGTH).fill(0);
              this.identity = undefined;
              if (typeof identity === "string") {
                this.setIdentityFromString(identity);
              }
              else if (identity !== undefined) {
                this.setIdentity(identity);
              }
            }
            setIdentityFromString(id) {
              this.identity = id;
              this.setIdentity(keyHelper_1.KeyHelper.getIdentityBytes(id));
            }
            async setIdentity(bytes) {
              this.bytes = bytes;
              // convert byte to id
              this.identity = await new qubicHelper_1.QubicHelper().getIdentity(bytes);
            }
            getIdentity() {
              return this.bytes;
            }
            getIdentityAsSring() {
              return this.identity;
            }
            getPackageSize() {
              return this.bytes.length;
            }
            getPackageData() {
              return this.bytes;
            }
            equals(compare) {
              return compare && this.bytes.length === compare.bytes.length && this.bytes.every((value, index) => value === compare.bytes[index]);
            }
            async verifyIdentity() {
              return await new qubicHelper_1.QubicHelper().verifyIdentity(this.identity);
            }
          }
          exports.PublicKey = PublicKey;


          /***/
}),

/***/ "./src/qubic-types/QubicEntity.ts":
/*!****************************************!*\
  !*** ./src/qubic-types/QubicEntity.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

          "use strict";

          Object.defineProperty(exports, "__esModule", ({ value: true }));
          exports.QubicEntity = void 0;
          const Long_1 = __webpack_require__(/*! ./Long */ "./src/qubic-types/Long.ts");
          const QubicPackageBuilder_1 = __webpack_require__(/*! ../QubicPackageBuilder */ "./src/QubicPackageBuilder.ts");
          const PublicKey_1 = __webpack_require__(/*! ./PublicKey */ "./src/qubic-types/PublicKey.ts");
          const QubicDefinitions_1 = __webpack_require__(/*! ../QubicDefinitions */ "./src/QubicDefinitions.ts");
          /**
           * typedef struct
           * {
           *     unsigned char publicKey[32];
           *     long long incomingAmount, outgoingAmount;
           *     unsigned int numberOfIncomingTransfers, numberOfOutgoingTransfers;
           *     unsigned int latestIncomingTransferTick, latestOutgoingTransferTick;
           * } Entity;
           */
          class QubicEntity {
            getPublicKey() {
              return this.publicKey;
            }
            setPublicKey(publicKey) {
              this.publicKey = publicKey;
            }
            getIncomingAmount() {
              return this.incomingAmount;
            }
            setIncomingAmount(incomingAcmount) {
              this.incomingAmount = incomingAcmount;
            }
            getOutgoingAmount() {
              return this.outgoingAmount;
            }
            setOutgoingAmount(outgoingAmount) {
              this.outgoingAmount = outgoingAmount;
            }
            getNumberOfIncomingTransfers() {
              return this.numberOfIncomingTransfers;
            }
            setNumberOfIncomingTransfers(numberOfIncomingTransfers) {
              this.numberOfIncomingTransfers = numberOfIncomingTransfers;
            }
            getNumberOfOutgoingTransfers() {
              return this.numberOfOutgoingTransfers;
            }
            setNumberOfOutgoingTransfers(numberOfOutgoingTransfers) {
              this.numberOfOutgoingTransfers = numberOfOutgoingTransfers;
            }
            getLatestIncomingTransferTick() {
              return this.latestIncomingTransferTick;
            }
            setLatestIncomingTransferTick(latestIncomingTransferTick) {
              this.latestIncomingTransferTick = latestIncomingTransferTick;
            }
            getLatestOutgoingTransferTick() {
              return this.latestOutgoingTransferTick;
            }
            setLatestOutgoingTransferTick(latestOutgoingTransferTick) {
              this.latestOutgoingTransferTick = latestOutgoingTransferTick;
            }
            constructor() {
              this._internalPackageSize = 64;
              this.publicKey = new PublicKey_1.PublicKey();
              this.incomingAmount = new Long_1.Long();
              this.outgoingAmount = new Long_1.Long();
              this.numberOfIncomingTransfers = 0;
              this.numberOfOutgoingTransfers = 0;
              this.latestIncomingTransferTick = 0;
              this.latestOutgoingTransferTick = 0;
            }
            getBalance() {
              return Number(this.getIncomingAmount().getNumber() - this.getOutgoingAmount().getNumber());
            }
            getPackageSize() {
              return this.getPackageData().length;
            }
            parse(data) {
              if (data.length !== this._internalPackageSize) {
                console.error("INVALID PACKAGE SIZE");
                return undefined;
              }
              const dataView = new DataView(data.buffer);
              let offset = 0;
              this.setPublicKey(new PublicKey_1.PublicKey(data.slice(0, QubicDefinitions_1.QubicDefinitions.PUBLIC_KEY_LENGTH)));
              offset += QubicDefinitions_1.QubicDefinitions.PUBLIC_KEY_LENGTH;
              this.setIncomingAmount(new Long_1.Long(dataView.getBigInt64(offset, true)));
              offset += 8;
              this.setOutgoingAmount(new Long_1.Long(dataView.getBigInt64(offset, true)));
              offset += 8;
              this.setNumberOfIncomingTransfers(dataView.getInt32(offset, true));
              offset += 4;
              this.setNumberOfOutgoingTransfers(dataView.getInt32(offset, true));
              offset += 4;
              this.setLatestIncomingTransferTick(dataView.getInt32(offset, true));
              offset += 4;
              this.setLatestOutgoingTransferTick(dataView.getInt32(offset, true));
              offset += 4;
              return this;
            }
            getPackageData() {
              const builder = new QubicPackageBuilder_1.QubicPackageBuilder(this._internalPackageSize);
              builder.add(this.publicKey);
              builder.add(this.incomingAmount);
              builder.add(this.outgoingAmount);
              builder.addInt(this.numberOfIncomingTransfers);
              builder.addInt(this.numberOfOutgoingTransfers);
              builder.addInt(this.latestIncomingTransferTick);
              builder.addInt(this.latestOutgoingTransferTick);
              return builder.getData();
            }
          }
          exports.QubicEntity = QubicEntity;


          /***/
}),

/***/ "./src/qubic-types/QubicTickData.ts":
/*!******************************************!*\
  !*** ./src/qubic-types/QubicTickData.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

          "use strict";

          Object.defineProperty(exports, "__esModule", ({ value: true }));
          exports.QubicTickData = void 0;
          const QubicDefinitions_1 = __webpack_require__(/*! ../QubicDefinitions */ "./src/QubicDefinitions.ts");
          const Signature_1 = __webpack_require__(/*! ./Signature */ "./src/qubic-types/Signature.ts");
          /**
           * typedef struct
          {
              unsigned short computorIndex;
              unsigned short epoch;
              unsigned int tick;
          
              unsigned short millisecond;
              unsigned char second;
              unsigned char minute;
              unsigned char hour;
              unsigned char day;
              unsigned char month;
              unsigned char year;
          
              union
              {
                  struct
                  {
                      unsigned char uriSize;
                      unsigned char uri[255];
                  } proposal;
                  struct
                  {
                      unsigned char zero;
                      unsigned char votes[(NUMBER_OF_COMPUTORS * 3 + 7) / 8];
                      unsigned char quasiRandomNumber;
                  } ballot;
              } varStruct;
          
              unsigned char timelock[32];
              unsigned char transactionDigests[NUMBER_OF_TRANSACTIONS_PER_TICK][32];
              long long contractFees[MAX_NUMBER_OF_CONTRACTS];
          
              unsigned char signature[SIGNATURE_SIZE];
          } TickData;
           */
          class QubicTickData {
            get unionDataView() {
              if (!this._unionDataView)
                this._unionDataView = new DataView(this.unionData.buffer);
              return this._unionDataView;
            }
            set unionDataView(value) {
              this._unionDataView = value;
            }
            getSignature() {
              return this.signature;
            }
            setSignature(signature) {
              this.signature = signature;
            }
            getComputorIndex() {
              return this.computorIndex;
            }
            setComputorIndex(computorIndex) {
              this.computorIndex = computorIndex;
            }
            getEpoch() {
              return this.epoch;
            }
            setEpoch(epoch) {
              this.epoch = epoch;
            }
            getTick() {
              return this.tick;
            }
            setTick(tick) {
              this.tick = tick;
            }
            getMillisecond() {
              return this.millisecond;
            }
            setMillisecond(millisecond) {
              this.millisecond = millisecond;
            }
            getSecond() {
              return this.second;
            }
            setSecond(second) {
              this.second = second;
            }
            getMinute() {
              return this.minute;
            }
            setMinute(minute) {
              this.minute = minute;
            }
            getHour() {
              return this.hour;
            }
            setHour(hour) {
              this.hour = hour;
            }
            getDay() {
              return this.day;
            }
            setDay(day) {
              this.day = day;
            }
            getMonth() {
              return this.month;
            }
            setMonth(month) {
              this.month = month;
            }
            getYear() {
              return this.year;
            }
            setYear(year) {
              this.year = year;
            }
            getUnionData() {
              return this.unionData;
            }
            setUnionData(unionData) {
              this.unionData = unionData;
            }
            getTimeLock() {
              return this.timeLock;
            }
            setTimeLock(timeLock) {
              this.timeLock = timeLock;
            }
            // todo: implement
            // public getTransactionDigests(): Uint8Array[][] {
            //     return this.transactionDigests;
            // }
            setTransactionDigests(transactionDigests /* jagged array 1024x32 */) {
              this.transactionDigests = transactionDigests;
            }
            getContractFees() {
              return this.contractFees;
            }
            setContractFees(contractFees) {
              this.contractFees = contractFees;
            }
            /* union data types */
            getProposalUriSize() {
              return this.unionData[0];
            }
            setProposalUriSize(size) {
              this.unionData[0] = size;
            }
            getProposalUri() {
              return new TextDecoder().decode(this.unionData.slice(1, this.getProposalUriSize()));
            }
            setProposalUri(uri) {
              if (uri.length > 255) {
                console.error("URI SIZE MUST BE MAX 255");
                throw "URI SIZE MUST BE MAX 255";
              }
              const bytes = new TextEncoder().encode(uri);
              this.unionData.set(bytes, 1);
              this.setProposalUriSize(uri.length);
            }
            constructor() {
              this._internalPackageSize = 41328;
            }
            getPackageSize() {
              return this._internalPackageSize;
            }
            parse(data) {
              if (data.length !== this._internalPackageSize) {
                console.error("INVALID PACKAGE SIZE");
                return undefined;
              }
              const dataView = new DataView(data.buffer);
              let offset = 0;
              this.setComputorIndex(dataView.getUint16(offset, true));
              offset += 2;
              this.setEpoch(dataView.getUint16(offset, true));
              offset += 2;
              this.setTick(dataView.getUint32(offset, true));
              offset += 4;
              this.setMillisecond(dataView.getUint16(offset, true));
              offset += 2;
              this.setSecond(data[offset++]);
              this.setMinute(data[offset++]);
              this.setHour(data[offset++]);
              this.setDay(data[offset++]);
              this.setMonth(data[offset++]);
              this.setYear(data[offset++]);
              this.setUnionData(data.slice(offset, 256));
              offset += 256;
              this.setTimeLock(data.slice(offset, 32));
              offset += 32;
              this.setTransactionDigests(data.slice(offset, QubicDefinitions_1.QubicDefinitions.NUMBER_OF_TRANSACTIONS_PER_TICK * QubicDefinitions_1.QubicDefinitions.DIGEST_LENGTH));
              offset += QubicDefinitions_1.QubicDefinitions.NUMBER_OF_TRANSACTIONS_PER_TICK * QubicDefinitions_1.QubicDefinitions.DIGEST_LENGTH;
              const contractFees = [];
              for (let i = 0; i < QubicDefinitions_1.QubicDefinitions.MAX_NUMBER_OF_CONTRACTS; i++) {
                contractFees.push(dataView.getBigInt64(offset, true));
                offset += 8;
              }
              this.setContractFees(contractFees);
              this.setSignature(new Signature_1.Signature(data.slice(offset, QubicDefinitions_1.QubicDefinitions.SIGNATURE_LENGTH)));
              offset += QubicDefinitions_1.QubicDefinitions.SIGNATURE_LENGTH;
              return this;
            }
            getPackageData() {
              // todo: implement
              return new Uint8Array();
            }
          }
          exports.QubicTickData = QubicTickData;


          /***/
}),

/***/ "./src/qubic-types/QubicTickInfo.ts":
/*!******************************************!*\
  !*** ./src/qubic-types/QubicTickInfo.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

          "use strict";

          Object.defineProperty(exports, "__esModule", ({ value: true }));
          exports.QubicTickInfo = void 0;
          const QubicPackageBuilder_1 = __webpack_require__(/*! ../QubicPackageBuilder */ "./src/QubicPackageBuilder.ts");
          /**
           * typedef struct
          * {
          *     unsigned short tickDuration;
          *     unsigned short epoch;
          *     unsigned int tick;
          *     unsigned short numberOfAlignedVotes;
          *     unsigned short numberOfMisalignedVotes;
          * } CurrentTickInfo;
           */
          class QubicTickInfo {
            getTickDuration() {
              return this.tickDuration;
            }
            setTickDuration(tickDuration) {
              this.tickDuration = tickDuration;
            }
            getEpoch() {
              return this.epoch;
            }
            setEpoch(epoch) {
              this.epoch = epoch;
            }
            getTick() {
              return this.tick;
            }
            setTick(tick) {
              this.tick = tick;
            }
            getNumberOfAlignedVotes() {
              return this.numberOfAlignedVotes;
            }
            setNumberOfAlignedVotes(numberOfAlignedVotes) {
              this.numberOfAlignedVotes = numberOfAlignedVotes;
            }
            getNumberOfMisalignedVotes() {
              return this.numberOfMisalignedVotes;
            }
            setNumberOfMisalignedVotes(numberOfMisalignedVotes) {
              this.numberOfMisalignedVotes = numberOfMisalignedVotes;
            }
            getInitialTick() {
              return this.initialTick;
            }
            setInitialTick(tick) {
              this.initialTick = tick;
            }
            constructor() {
              this._internalPackageSize = 16;
              this.tickDuration = 0;
              this.epoch = 0;
              this.tick = 0;
              this.numberOfAlignedVotes = 0;
              this.numberOfMisalignedVotes = 0;
              this.initialTick = 0;
            }
            getPackageSize() {
              return this.getPackageData().length;
            }
            parse(data) {
              if (data.length !== this._internalPackageSize) {
                console.error("INVALID PACKAGE SIZE");
                return undefined;
              }
              const dataView = new DataView(data.buffer);
              let offset = 0;
              this.setTickDuration(dataView.getInt16(0, true));
              offset += 2;
              this.setEpoch(dataView.getInt16(offset, true));
              offset += 2;
              this.setTick(dataView.getInt32(offset, true));
              offset += 4;
              this.setNumberOfAlignedVotes(dataView.getInt16(offset, true));
              offset += 2;
              this.setNumberOfMisalignedVotes(dataView.getInt16(offset, true));
              offset += 2;
              this.setInitialTick(dataView.getInt32(offset, true));
              return this;
            }
            getPackageData() {
              const builder = new QubicPackageBuilder_1.QubicPackageBuilder(this._internalPackageSize);
              builder.addShort(this.tickDuration);
              builder.addShort(this.epoch);
              builder.addInt(this.tick);
              builder.addShort(this.numberOfAlignedVotes);
              builder.addShort(this.numberOfMisalignedVotes);
              builder.addInt(this.initialTick);
              return builder.getData();
            }
          }
          exports.QubicTickInfo = QubicTickInfo;


          /***/
}),

/***/ "./src/qubic-types/QubicTransaction.ts":
/*!*********************************************!*\
  !*** ./src/qubic-types/QubicTransaction.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

          "use strict";

          Object.defineProperty(exports, "__esModule", ({ value: true }));
          exports.QubicTransaction = void 0;
          const qubicHelper_1 = __webpack_require__(/*! ../qubicHelper */ "./src/qubicHelper.ts");
          const DynamicPayload_1 = __webpack_require__(/*! ./DynamicPayload */ "./src/qubic-types/DynamicPayload.ts");
          const Long_1 = __webpack_require__(/*! ./Long */ "./src/qubic-types/Long.ts");
          const QubicPackageBuilder_1 = __webpack_require__(/*! ../QubicPackageBuilder */ "./src/QubicPackageBuilder.ts");
          const PublicKey_1 = __webpack_require__(/*! ./PublicKey */ "./src/qubic-types/PublicKey.ts");
          const QubicDefinitions_1 = __webpack_require__(/*! ../QubicDefinitions */ "./src/QubicDefinitions.ts");
          const Signature_1 = __webpack_require__(/*! ./Signature */ "./src/qubic-types/Signature.ts");
          /**
           * C+S Struct
           * typedef struct
           * {
           *  unsigned char sourcePublicKey[32];
           *  unsigned char destinationPublicKey[32];
           *  long long amount;
           *  unsigned int tick;
           *  unsigned short inputType;
           *  unsigned short inputSize;
           * } Transaction;
           */
          class QubicTransaction {
            constructor() {
              // todo: create getter/setter
              this.sourcePublicKey = new PublicKey_1.PublicKey();
              this.destinationPublicKey = new PublicKey_1.PublicKey();
              this.amount = new Long_1.Long();
              this.tick = 0;
              this.inputType = 0;
              this.inputSize = 0;
              this.payload = new DynamicPayload_1.DynamicPayload(QubicDefinitions_1.QubicDefinitions.MAX_TRANSACTION_SIZE);
              this.signature = new Signature_1.Signature();
            }
            setSourcePublicKey(p) {
              if (p instanceof PublicKey_1.PublicKey)
                this.sourcePublicKey = p;
              else
                this.sourcePublicKey = new PublicKey_1.PublicKey(p);
              return this;
            }
            setDestinationPublicKey(p) {
              if (p instanceof PublicKey_1.PublicKey)
                this.destinationPublicKey = p;
              else
                this.destinationPublicKey = new PublicKey_1.PublicKey(p);
              return this;
            }
            setAmount(p) {
              if (p instanceof Long_1.Long)
                this.amount = p;
              else
                this.amount = new Long_1.Long(p);
              return this;
            }
            setTick(p) {
              this.tick = p;
              return this;
            }
            setInputType(p) {
              this.inputType = p;
              return this;
            }
            setInputSize(p) {
              this.inputSize = p;
              return this;
            }
            setPayload(payload) {
              this.payload = payload;
              this.inputSize = this.payload.getPackageSize();
              return this;
            }
            getPayload() {
              return this.payload;
            }
            _internalSize() {
              return this.sourcePublicKey.getPackageSize()
                + this.destinationPublicKey.getPackageSize()
                + this.amount.getPackageSize()
                + 4 // tick
                + 2 // inputType
                + 2 // inputSize
                + this.inputSize
                + this.signature.getPackageSize();
            }
            getPackageSize() {
              return this._internalSize();
            }
            getId() {
              if (!this.id) {
                console.error("CALL build() BEFORE USING getId() METHOD");
                return "";
              }
              return this.id;
            }
            /**
             * builds the transaction to be sent
             * includes signing with seed
             *
             * @param seed the seed to be used to sign this transacion. the seed should be the same as the sourcePublicKey
             * @returns a complete transaction package
             */
            async build(seed) {
              this.builtData = undefined;
              var builder = new QubicPackageBuilder_1.QubicPackageBuilder(this._internalSize());
              builder.add(this.sourcePublicKey);
              builder.add(this.destinationPublicKey);
              builder.add(this.amount);
              builder.addInt(this.tick);
              builder.addShort(this.inputType);
              builder.addShort(this.inputSize);
              builder.add(this.payload);
              const { signedData, digest, signature } = await builder.signAndDigest(seed);
              this.builtData = signedData;
              this.digest = digest;
              this.signature = new Signature_1.Signature(signature);
              this.id = await new qubicHelper_1.QubicHelper().getHumanReadableBytes(digest);
              return signedData;
            }
            /**
             * The result of build() must be passed through this function,
             * as the `broadcast-transaction` endpoint expects the transaction to be Base64 encoded.
             */
            encodeTransactionToBase64(transaction) {
              const byteArray = new Uint8Array(transaction);
              const str = String.fromCharCode.apply(null, byteArray);
              return btoa(str);
            }
            getPackageData() {
              if (!this.builtData) {
                console.error("CALL build() BEFORE USING getPackageData() METHOD");
              }
              return this.builtData ?? new Uint8Array();
            }
          }
          exports.QubicTransaction = QubicTransaction;


          /***/
}),

/***/ "./src/qubic-types/Signature.ts":
/*!**************************************!*\
  !*** ./src/qubic-types/Signature.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

          "use strict";

          Object.defineProperty(exports, "__esModule", ({ value: true }));
          exports.Signature = void 0;
          const QubicDefinitions_1 = __webpack_require__(/*! ../QubicDefinitions */ "./src/QubicDefinitions.ts");
          class Signature {
            constructor(data = undefined) {
              this.bytes = new Uint8Array(QubicDefinitions_1.QubicDefinitions.SIGNATURE_LENGTH).fill(0);
              if (data) {
                this.setSignature(data);
              }
            }
            setSignature(bytes) {
              this.bytes = bytes;
            }
            getPackageData() {
              return this.bytes;
            }
            getPackageSize() {
              return this.bytes.length;
            }
          }
          exports.Signature = Signature;


          /***/
}),

/***/ "./src/qubic-types/transacion-payloads/QubicTransferAssetPayload.ts":
/*!**************************************************************************!*\
  !*** ./src/qubic-types/transacion-payloads/QubicTransferAssetPayload.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

          "use strict";

          Object.defineProperty(exports, "__esModule", ({ value: true }));
          exports.QubicTransferAssetPayload = void 0;
          const QubicPackageBuilder_1 = __webpack_require__(/*! ../../QubicPackageBuilder */ "./src/QubicPackageBuilder.ts");
          const DynamicPayload_1 = __webpack_require__(/*! ../DynamicPayload */ "./src/qubic-types/DynamicPayload.ts");
          const Long_1 = __webpack_require__(/*! ../Long */ "./src/qubic-types/Long.ts");
          const PublicKey_1 = __webpack_require__(/*! ../PublicKey */ "./src/qubic-types/PublicKey.ts");
          const qubicHelper_1 = __webpack_require__(/*! ../../qubicHelper */ "./src/qubicHelper.ts");
          /**
           *
           * Transaction Payload to transfer an Asset
           *
           * typedef struct
          * {
          *     uint8_t issuer[32];
          *     uint8_t newOwnerAndPossessor[32];
          *     unsigned long long assetName;
          *     long long numberOfUnits;
          * } TransferAssetOwnershipAndPossession_input;
           *
           *
           *
           */
          class QubicTransferAssetPayload {
            constructor() {
              this._internalPackageSize = 32 + 32 + 8 + 8;
            }
            // todo: think about adding getters
            setIssuer(issuer) {
              if (typeof issuer === "string") {
                this.issuer = new PublicKey_1.PublicKey(issuer);
              }
              else {
                this.issuer = issuer;
              }
              return this;
            }
            setNewOwnerAndPossessor(newOwnerAndPossessor) {
              if (typeof newOwnerAndPossessor === "string") {
                this.newOwnerAndPossessor = new PublicKey_1.PublicKey(newOwnerAndPossessor);
              }
              else {
                this.newOwnerAndPossessor = newOwnerAndPossessor;
              }
              return this;
            }
            setAssetName(assetName) {
              if (typeof assetName === "string") {
                const utf8Encode = new TextEncoder();
                const nameBytes = utf8Encode.encode(assetName);
                this.assetName = new Uint8Array(8);
                nameBytes.forEach((b, i) => {
                  this.assetName[i] = b;
                });
              }
              else {
                this.assetName = assetName;
              }
              return this;
            }
            getAssetName() {
              return this.assetName;
            }
            getIssuer() {
              return this.issuer;
            }
            getNewOwnerAndPossessor() {
              return this.newOwnerAndPossessor;
            }
            getNumberOfUnits() {
              return this.numberOfUnits;
            }
            setNumberOfUnits(numberOfUnits) {
              if (typeof numberOfUnits === "number") {
                this.numberOfUnits = new Long_1.Long(numberOfUnits);
              }
              else {
                this.numberOfUnits = numberOfUnits;
              }
              return this;
            }
            getPackageSize() {
              return this._internalPackageSize;
            }
            getPackageData() {
              const builder = new QubicPackageBuilder_1.QubicPackageBuilder(this.getPackageSize());
              builder.add(this.issuer);
              builder.add(this.newOwnerAndPossessor);
              builder.addRaw(this.assetName);
              builder.add(this.numberOfUnits);
              return builder.getData();
            }
            getTransactionPayload() {
              const payload = new DynamicPayload_1.DynamicPayload(this.getPackageSize());
              payload.setPayload(this.getPackageData());
              return payload;
            }
            async parse(data) {
              if (data.length !== this._internalPackageSize) {
                console.error("INVALID PACKAGE SIZE");
                return undefined;
              }
              const helper = new qubicHelper_1.QubicHelper();
              let start = 0;
              let end = 32; // size for issuer and newOwnerAndPossessor
              this.issuer = new PublicKey_1.PublicKey(await helper.getIdentity(data.slice(start, end)));
              start = end;
              end = start + 32; // size for newOwnerAndPossessor
              this.newOwnerAndPossessor = new PublicKey_1.PublicKey(await helper.getIdentity(data.slice(start, end)));
              start = end;
              end = start + 8; // size for asset name
              this.assetName = data.slice(start, end);
              let decoder = new TextDecoder(); // Create a TextDecoder for UTF-8 by default
              const result = decoder.decode(this.assetName); // Convert Uint8Array to string
              start = end;
              end = start + 8; // size for number of units
              this.numberOfUnits = new Long_1.Long(data.slice(start, end));
              return this;
            }
          }
          exports.QubicTransferAssetPayload = QubicTransferAssetPayload;


          /***/
}),

/***/ "./src/qubic-types/transacion-payloads/QubicTransferSendManyPayload.ts":
/*!*****************************************************************************!*\
  !*** ./src/qubic-types/transacion-payloads/QubicTransferSendManyPayload.ts ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

          "use strict";

          Object.defineProperty(exports, "__esModule", ({ value: true }));
          exports.QubicTransferSendManyPayload = void 0;
          const QubicDefinitions_1 = __webpack_require__(/*! ../../QubicDefinitions */ "./src/QubicDefinitions.ts");
          const QubicPackageBuilder_1 = __webpack_require__(/*! ../../QubicPackageBuilder */ "./src/QubicPackageBuilder.ts");
          const qubicHelper_1 = __webpack_require__(/*! ../../qubicHelper */ "./src/qubicHelper.ts");
          const DynamicPayload_1 = __webpack_require__(/*! ../DynamicPayload */ "./src/qubic-types/DynamicPayload.ts");
          const Long_1 = __webpack_require__(/*! ../Long */ "./src/qubic-types/Long.ts");
          const PublicKey_1 = __webpack_require__(/*! ../PublicKey */ "./src/qubic-types/PublicKey.ts");
          /**
           *
           * Transaction Payload to use Qutil/SendMany SC
           *
           * struct SendToManyV1_input {
           *   uint8_t addresses[25][32];
           *   int64_t amounts[25];
           * };
           *
           *
           *
           */
          class QubicTransferSendManyPayload {
            constructor() {
              this._internalPackageSize = 1000; /* 25 * 32  + 25 * 8 */
              // max 25 transfers allowed
              this.sendManyTransfers = [];
            }
            addTransfer(transfer) {
              if (this.sendManyTransfers.length < 25) {
                this.sendManyTransfers.push(transfer);
              }
              else {
                throw new Error("max 25 send many transfers allowed");
              }
              return this;
            }
            addTranfers(transfers) {
              if (this.sendManyTransfers.length + transfers.length > 25) {
                throw new Error("max 25 send many transfers allowed");
              }
              transfers.forEach((transfer) => {
                this.addTransfer(transfer);
              });
              return this;
            }
            /**
             *
             * @returns the transfers for this send many request
             */
            getTransfers() {
              return this.sendManyTransfers;
            }
            /**
             * the acumulated amount of all transfers
             * @returns
             *
             */
            getTotalAmount() {
              return this.sendManyTransfers.reduce((a, b) => (a += b && b.amount ? b.amount.getNumber() : BigInt(0)), BigInt(0));
            }
            getPackageSize() {
              return this._internalPackageSize;
            }
            getPackageData() {
              const builder = new QubicPackageBuilder_1.QubicPackageBuilder(this.getPackageSize());
              for (let i = 0; i < 25; i++) {
                if (this.sendManyTransfers.length > i &&
                  this.sendManyTransfers[i].amount.getNumber() > 0) {
                  builder.add(this.sendManyTransfers[i].destId);
                }
                else {
                  builder.add(new PublicKey_1.PublicKey(QubicDefinitions_1.QubicDefinitions.EMPTY_ADDRESS)); // add empty address to have 0 in byte
                }
              }
              for (let i = 0; i < 25; i++) {
                if (this.sendManyTransfers.length > i &&
                  this.sendManyTransfers[i].amount.getNumber() > 0) {
                  const amount = this.sendManyTransfers[i].amount;
                  if (typeof amount === "number") {
                    builder.add(new Long_1.Long(amount));
                  }
                  else {
                    builder.add(amount);
                  }
                }
                else {
                  builder.add(new Long_1.Long(0));
                }
              }
              return builder.getData();
            }
            getTransactionPayload() {
              const payload = new DynamicPayload_1.DynamicPayload(this.getPackageSize());
              payload.setPayload(this.getPackageData());
              return payload;
            }
            /**
             * parses raw binary package to js object
             * @param data raw send many input (payload)
             * @returns QubicTransferSendManyPayload
             */
            async parse(data) {
              if (data.length !== this._internalPackageSize) {
                console.error("INVALID PACKAGE SIZE");
                return undefined;
              }
              const helper = new qubicHelper_1.QubicHelper();
              const sendManyTransfers = [];
              // a send many tx can have maximum 25 recipients
              for (let i = 0; i < 25; i++) {
                // get the amount for the transfer
                const amount = new Long_1.Long(data.slice(800 + i * 8, 800 + i * 8 + 8));
                // only add transfer to output array if amount > 0; 0 or lower means, no transfer
                if (amount.getNumber() > 0) {
                  const dest = data.slice(32 * i, 32 * i + 32);
                  this.sendManyTransfers.push({
                    amount: amount,
                    destId: new PublicKey_1.PublicKey(await helper.getIdentity(dest)),
                  });
                }
              }
              this.addTranfers(sendManyTransfers);
              return this;
            }
          }
          exports.QubicTransferSendManyPayload = QubicTransferSendManyPayload;


          /***/
}),

/***/ "./src/qubicHelper.ts":
/*!****************************!*\
  !*** ./src/qubicHelper.ts ***!
  \****************************/
/***/ (function (__unused_webpack_module, exports, __webpack_require__) {

          "use strict";

          /*
          
          Permission is hereby granted, perpetual, worldwide, non-exclusive, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"),
          to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
          and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
          
          
            1. The Software cannot be used in any form or in any substantial portions for development, maintenance and for any other purposes, in the military sphere and in relation to military products,
            including, but not limited to:
          
              a. any kind of armored force vehicles, missile weapons, warships, artillery weapons, air military vehicles (including military aircrafts, combat helicopters, military drones aircrafts),
              air defense systems, rifle armaments, small arms, firearms and side arms, melee weapons, chemical weapons, weapons of mass destruction;
          
              b. any special software for development technical documentation for military purposes;
          
              c. any special equipment for tests of prototypes of any subjects with military purpose of use;
          
              d. any means of protection for conduction of acts of a military nature;
          
              e. any software or hardware for determining strategies, reconnaissance, troop positioning, conducting military actions, conducting special operations;
          
              f. any dual-use products with possibility to use the product in military purposes;
          
              g. any other products, software or services connected to military activities;
          
              h. any auxiliary means related to abovementioned spheres and products.
          
          
            2. The Software cannot be used as described herein in any connection to the military activities. A person, a company, or any other entity, which wants to use the Software,
            shall take all reasonable actions to make sure that the purpose of use of the Software cannot be possibly connected to military purposes.
          
          
            3. The Software cannot be used by a person, a company, or any other entity, activities of which are connected to military sphere in any means. If a person, a company, or any other entity,
            during the period of time for the usage of Software, would engage in activities, connected to military purposes, such person, company, or any other entity shall immediately stop the usage
            of Software and any its modifications or alterations.
          
          
            4. Abovementioned restrictions should apply to all modification, alteration, merge, and to other actions, related to the Software, regardless of how the Software was changed due to the
            abovementioned actions.
          
          
          The above copyright notice and this permission notice shall be included in all copies or substantial portions, modifications and alterations of the Software.
          
          
          THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
          IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH
          THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
          
          */
          var __importDefault = (this && this.__importDefault) || function (mod) {
            return (mod && mod.__esModule) ? mod : { "default": mod };
          };
          Object.defineProperty(exports, "__esModule", ({ value: true }));
          exports.QubicHelper = void 0;
          const crypto_1 = __importDefault(__webpack_require__(/*! ./crypto */ "./src/crypto/index.js"));
          const converter_js_1 = __webpack_require__(/*! ./converter/converter.js */ "./src/converter/converter.js");
          const bignumber_js_1 = __importDefault(__webpack_require__(/*! bignumber.js */ "./node_modules/bignumber.js/bignumber.js"));
          const QubicDefinitions_1 = __webpack_require__(/*! ./QubicDefinitions */ "./src/QubicDefinitions.ts");
          // todo: refactor
          /**
           * this class contains a lot of legacy code and should be refactored
           */
          class QubicHelper {
            constructor() {
              this.SEED_ALPHABET = 'abcdefghijklmnopqrstuvwxyz';
              this.SHIFTED_HEX_CHARS = 'abcdefghijklmnop';
              this.PRIVATE_KEY_LENGTH = 32;
              this.PUBLIC_KEY_LENGTH = 32;
              this.SEED_IN_LOWERCASE_LATIN_LENGTH = 55;
              this.CHECKSUM_LENGTH = 3;
              this.getIdentityBytes = function (identity) {
                const publicKeyBytes = new Uint8Array(32);
                const view = new DataView(publicKeyBytes.buffer, 0);
                for (let i = 0; i < 4; i++) {
                  view.setBigUint64(i * 8, 0n, true);
                  for (let j = 14; j-- > 0;) {
                    view.setBigUint64(i * 8, view.getBigUint64(i * 8, true) * 26n + BigInt(identity.charCodeAt(i * 14 + j)) - BigInt('A'.charCodeAt(0)), true);
                  }
                }
                return publicKeyBytes;
              };
              this.REQUEST_RESPONSE_HEADER_SIZE = 8;
              this.TRANSACTION_SIZE = 144;
              this.IPO_TRANSACTION_SIZE = 144 + 8 /*price*/ + 2 /* quantity */ + 6 /* padding */;
              this.SET_PROPOSAL_AND_BALLOT_REQUEST_SIZE = 592;
              this.TRANSACTION_INPUT_SIZE_OFFSET = 0;
              this.TRANSACTION_INPUT_SIZE_LENGTH = 0;
              this.SIGNATURE_LENGTH = 64;
              this.DIGEST_LENGTH = 32;
              this.SPECIAL_COMMAND_SHUT_DOWN = 0;
              this.SPECIAL_COMMAND_GET_PROPOSAL_AND_BALLOT_REQUEST = 1;
              this.SPECIAL_COMMAND_GET_PROPOSAL_AND_BALLOT_RESPONSE = 2;
              this.SPECIAL_COMMAND_SET_PROPOSAL_AND_BALLOT_REQUEST = 3;
              this.SPECIAL_COMMAND_SET_PROPOSAL_AND_BALLOT_RESPONSE = 4;
              this.PROCESS_SPECIAL_COMMAND = 255;
            }
            /**
             *
             * Creates a complete ID Package based on the provided seed
             *
             * @param seed
             * @returns
             */
            async createIdPackage(seed) {
              const { schnorrq, K12 } = await crypto_1.default;
              const privateKey = this.privateKey(seed, 0, K12);
              const publicKey = schnorrq.generatePublicKey(privateKey);
              const publicId = await this.getIdentity(publicKey);
              return { publicKey, privateKey, publicId };
            }
            /**
             * creates the checksum for a given key
             *
             * @param publicKey
             * @returns
             */
            async getCheckSum(publicKey) {
              const { K12 } = await crypto_1.default;
              const digest = new Uint8Array(QubicDefinitions_1.QubicDefinitions.DIGEST_LENGTH);
              K12(publicKey, digest, QubicDefinitions_1.QubicDefinitions.DIGEST_LENGTH);
              const checksum = digest.slice(0, this.CHECKSUM_LENGTH);
              return checksum;
            }
            /**
             *
             * Creates the human readable public key from the publickey
             *
             * @param publicKey
             * @param lowerCase
             * @returns
             */
            async getIdentity(publicKey, lowerCase = false) {
              let newId = '';
              for (let i = 0; i < 4; i++) {
                let longNUmber = new bignumber_js_1.default(0);
                longNUmber.decimalPlaces(0);
                publicKey.slice(i * 8, (i + 1) * 8).forEach((val, index) => {
                  longNUmber = longNUmber.plus(new bignumber_js_1.default((val * 256 ** index).toString(2), 2));
                });
                for (let j = 0; j < 14; j++) {
                  newId += String.fromCharCode(longNUmber.mod(26).plus((lowerCase ? 'a' : 'A').charCodeAt(0)).toNumber());
                  longNUmber = longNUmber.div(26);
                }
              }
              // calculate checksum
              const checksum = await this.getCheckSum(publicKey);
              // convert to int
              let identityBytesChecksum = (checksum[2] << 16) | (checksum[1] << 8) | checksum[0];
              identityBytesChecksum = identityBytesChecksum & 0x3FFFF;
              for (let i = 0; i < 4; i++) {
                newId += String.fromCharCode(identityBytesChecksum % 26 + (lowerCase ? 'a' : 'A').charCodeAt(0));
                identityBytesChecksum = identityBytesChecksum / 26;
              }
              return newId;
            }
            async getHumanReadableBytes(publicKey) {
              return await this.getIdentity(publicKey, true);
            }
            seedToBytes(seed) {
              const bytes = new Uint8Array(seed.length);
              for (let i = 0; i < seed.length; i++) {
                bytes[i] = this.SEED_ALPHABET.indexOf(seed[i]);
              }
              return bytes;
            }
            ;
            privateKey(seed, index, K12) {
              const byteSeed = this.seedToBytes(seed);
              const preimage = byteSeed.slice();
              while (index-- > 0) {
                for (let i = 0; i < preimage.length; i++) {
                  if (++preimage[i] > this.SEED_ALPHABET.length) {
                    preimage[i] = 1;
                  }
                  else {
                    break;
                  }
                }
              }
              const key = new Uint8Array(this.PRIVATE_KEY_LENGTH);
              K12(preimage, key, this.PRIVATE_KEY_LENGTH);
              return key;
            }
            ;
            /**
             * Verifies if a given identity is valid
             * @param identity
             */
            async verifyIdentity(identity) {
              if (!identity || identity.length != 60 || !/^[A-Z]+$/.test(identity)) // must be 60 upper case characters
                return false;
              const publicKey = this.getIdentityBytes(identity);
              const idFromBytes = await this.getIdentity(publicKey);
              // todo: it would be enough to just check checksum bytes instead of compare complete id
              return identity === idFromBytes;
            }
            createPublicKey(privateKey, schnorrq, K12) {
              const publicKeyWithChecksum = new Uint8Array(this.PUBLIC_KEY_LENGTH + this.CHECKSUM_LENGTH);
              publicKeyWithChecksum.set(schnorrq.generatePublicKey(privateKey));
              K12(publicKeyWithChecksum.subarray(0, this.PUBLIC_KEY_LENGTH), publicKeyWithChecksum, this.CHECKSUM_LENGTH, this.PUBLIC_KEY_LENGTH);
              return publicKeyWithChecksum;
            }
            async createIpo(sourceSeed, contractIndex, price, quantity, tick) {
              return crypto_1.default.then(({ schnorrq, K12 }) => {
                // sender
                const sourcePrivateKey = this.privateKey(sourceSeed, 0, K12);
                const sourcePublicKey = this.createPublicKey(sourcePrivateKey, schnorrq, K12);
                const tx = new Uint8Array(this.IPO_TRANSACTION_SIZE).fill(0);
                const txView = new DataView(tx.buffer);
                // fill all with zero
                for (let i = 0; i < this.IPO_TRANSACTION_SIZE; i++) {
                  tx[i] = 0;
                }
                // sourcePublicKey byte[] // 32
                let offset = 0;
                let i = 0;
                for (i = 0; i < this.PUBLIC_KEY_LENGTH; i++) {
                  tx[i] = sourcePublicKey[i];
                }
                offset = i;
                tx[offset] = contractIndex;
                offset++;
                for (i = 1; i < this.PUBLIC_KEY_LENGTH; i++) {
                  tx[offset + i] = 0;
                }
                offset += i - 1;
                txView.setBigInt64(offset, BigInt(0), true); // for ipo tx amoun is just 0
                offset += 8;
                txView.setUint32(offset, tick, true);
                offset += 4;
                txView.setUint16(offset, 1, true); // inputType for IPO is 1
                offset += 2;
                txView.setUint16(offset, 16, true); // inputSize for IPO is 16
                offset += 2;
                // add ipo specifix stuff
                // price
                txView.setBigInt64(offset, BigInt(price), true);
                offset += 8;
                // quantity
                txView.setInt16(offset, quantity, true);
                offset += 2;
                // padding
                offset += 6;
                const digest = new Uint8Array(this.DIGEST_LENGTH);
                const toSign = tx.slice(0, offset);
                K12(toSign, digest, this.DIGEST_LENGTH);
                const signedtx = schnorrq.sign(sourcePrivateKey, sourcePublicKey, digest);
                tx.set(signedtx, offset);
                offset += this.SIGNATURE_LENGTH;
                return tx;
              });
            }
            async createTransaction(sourceSeed, destPublicId, amount, tick) {
              return crypto_1.default.then(({ schnorrq, K12 }) => {
                // sender
                const sourcePrivateKey = this.privateKey(sourceSeed, 0, K12);
                const sourcePublicKey = this.createPublicKey(sourcePrivateKey, schnorrq, K12);
                const destPublicKey = (0, converter_js_1.publicKeyStringToBytes)(destPublicId).slice(0, this.PUBLIC_KEY_LENGTH);
                const tx = new Uint8Array(this.TRANSACTION_SIZE).fill(0);
                const txView = new DataView(tx.buffer);
                // sourcePublicKey byte[] // 32
                let offset = 0;
                let i = 0;
                for (i = 0; i < this.PUBLIC_KEY_LENGTH; i++) {
                  tx[i] = sourcePublicKey[i];
                }
                offset = i;
                for (i = 0; i < this.PUBLIC_KEY_LENGTH; i++) {
                  tx[offset + i] = destPublicKey[i];
                }
                offset += i;
                txView.setBigInt64(offset, BigInt(amount), true);
                offset += 8;
                txView.setUint32(offset, tick, true);
                offset += 4;
                txView.setUint16(offset, 0, true);
                offset += 2;
                txView.setUint16(offset, 0, true);
                offset += 2;
                const digest = new Uint8Array(this.DIGEST_LENGTH);
                const toSign = tx.slice(0, offset);
                K12(toSign, digest, this.DIGEST_LENGTH);
                const signedtx = schnorrq.sign(sourcePrivateKey, sourcePublicKey, digest);
                tx.set(signedtx, offset);
                offset += this.SIGNATURE_LENGTH;
                return tx;
              });
            }
            // todo: remove on next update
            // private getIncreasingNonceAndCommandType(type: number): Uint8Array {
            //     let timestamp = Math.floor(Date.now() / 1000);
            //     const byteArray = new Uint8Array(8);
            //     const txView = new DataView(byteArray.buffer);
            //     txView.setUint32(0, timestamp, true);
            //     byteArray[7] = type;
            //     return byteArray;
            // }
            /**
             *
             * implementation aligned with qubic-cli
             *
             * @param type
             * @returns
             */
            getIncreasingNonceAndCommandType(type) {
              const timestamp = BigInt(Math.floor(Date.now() / 1000));
              const commandByte = BigInt(type) << BigInt(56);
              const result = commandByte | timestamp;
              const byteArray = new Uint8Array(8);
              const txView = new DataView(byteArray.buffer);
              txView.setBigUint64(0, result, true);
              return byteArray;
            }
            async createProposal(protocol, computorIndex, operatorSeed, url) {
              return crypto_1.default.then(({ schnorrq, K12 }) => {
                // operator
                const operatorPrivateKey = this.privateKey(operatorSeed, 0, K12);
                const operatorPublicKey = this.createPublicKey(operatorPrivateKey, schnorrq, K12);
                // prepare url
                const encoder = new TextEncoder();
                const urlBytes = encoder.encode(url);
                const uri = new Uint8Array(255);
                const uriSize = urlBytes.length;
                uri.set(urlBytes);
                const proposal = new Uint8Array(this.SET_PROPOSAL_AND_BALLOT_REQUEST_SIZE + this.REQUEST_RESPONSE_HEADER_SIZE).fill(0);
                const txView = new DataView(proposal.buffer);
                let offset = 0;
                // header
                // byte[3] size
                const size = 600;
                proposal[0] = size;
                proposal[1] = (size >> 8);
                proposal[2] = (size >> 16);
                offset += 3;
                // byte type
                proposal[offset] = this.PROCESS_SPECIAL_COMMAND;
                offset++;
                // byte[3] dejavu (we let it empty)
                proposal[offset++] = Math.floor(Math.random() * 255);
                proposal[offset++] = Math.floor(Math.random() * 255);
                proposal[offset++] = Math.floor(Math.random() * 255);
                // byte type deprecated
                proposal[offset] = this.PROCESS_SPECIAL_COMMAND;
                offset++;
                // ulong everIncreasingNonceAndCommandType // 8
                var timeStamp = this.getIncreasingNonceAndCommandType(this.SPECIAL_COMMAND_SET_PROPOSAL_AND_BALLOT_REQUEST);
                for (let i = 0; i < timeStamp.length; i++) {
                  proposal[offset + i] = timeStamp[i];
                }
                offset += timeStamp.length;
                // ushort computorIndex // 2
                txView.setUint16(offset, computorIndex, true);
                offset += 2;
                // padding //6
                const padding = 6;
                for (let i = 0; i < padding; i++) {
                  proposal[offset + i] = 0;
                }
                offset += padding;
                // Start ComputorProposal
                // byte uriSize // 1
                proposal[offset] = uriSize;
                offset++;
                // byte[255] uri // 255
                for (let i = 0; i < uriSize; i++) {
                  proposal[offset + i] = uri[i];
                }
                offset += 255;
                // Start ComputorBallot
                // not used for this request therefore we let it empty
                offset += 256;
                const digest = new Uint8Array(this.DIGEST_LENGTH);
                const toSign = proposal.slice(this.REQUEST_RESPONSE_HEADER_SIZE, offset);
                K12(toSign, digest, this.DIGEST_LENGTH);
                const signatur = schnorrq.sign(operatorPrivateKey, operatorPublicKey, digest);
                proposal.set(signatur, offset);
                offset += this.SIGNATURE_LENGTH;
                return proposal;
              });
            }
            VotesToByteArray(votes) {
              var bitArray = [];
              for (var computorIndex = 0; computorIndex < votes.length; computorIndex++) {
                var vote = votes[computorIndex];
                for (var i = 0; i < 3; i++) {
                  var bit = (vote >> i) & 1;
                  bitArray.push(bit);
                }
              }
              var output = new Uint8Array(Math.ceil(bitArray.length / 8));
              for (var k = 0; k < bitArray.length; k += 8) {
                var byteIndex = Math.floor(k / 8);
                var byteValue = 0;
                for (var j = 0; j < 8; j++) {
                  var bit = bitArray[k + j] || 0; // Use 0 for padding if bitArray is exhausted
                  byteValue |= (bit << j);
                }
                output[byteIndex] = byteValue;
              }
              return output;
            }
            async createBallotRequests(protocol, operatorSeed, computorIndices, votes) {
              return crypto_1.default.then(({ schnorrq, K12 }) => {
                const output = [];
                // operator
                const operatorPrivateKey = this.privateKey(operatorSeed, 0, K12);
                const operatorPublicKey = this.createPublicKey(operatorPrivateKey, schnorrq, K12);
                for (let index = 0; index < computorIndices.length; index++) {
                  const proposal = new Uint8Array(this.SET_PROPOSAL_AND_BALLOT_REQUEST_SIZE + this.REQUEST_RESPONSE_HEADER_SIZE).fill(0);
                  const txView = new DataView(proposal.buffer);
                  let offset = 0;
                  // header
                  // byte[3] size
                  const size = 600;
                  proposal[0] = size;
                  proposal[1] = (size >> 8);
                  proposal[2] = (size >> 16);
                  offset += 3;
                  // byte type
                  proposal[offset] = this.PROCESS_SPECIAL_COMMAND;
                  offset++;
                  // byte[3] dejavu (we let it empty)
                  proposal[offset++] = Math.floor(Math.random() * 255);
                  proposal[offset++] = Math.floor(Math.random() * 255);
                  proposal[offset++] = Math.floor(Math.random() * 255);
                  // byte type (depcrecated)
                  proposal[offset] = this.PROCESS_SPECIAL_COMMAND;
                  offset++;
                  // ulong everIncreasingNonceAndCommandType // 8
                  var timeStamp = this.getIncreasingNonceAndCommandType(this.SPECIAL_COMMAND_SET_PROPOSAL_AND_BALLOT_REQUEST);
                  for (let i = 0; i < timeStamp.length; i++) {
                    proposal[offset + i] = timeStamp[i];
                  }
                  offset += timeStamp.length;
                  // ushort computorIndex // 2
                  txView.setUint16(offset, computorIndices[index], true);
                  offset += 2;
                  // padding //6
                  const padding = 6;
                  for (let i = 0; i < padding; i++) {
                    proposal[offset + i] = 0;
                  }
                  offset += padding;
                  // Start ComputorProposal
                  // byte uriSize // 1
                  proposal[offset] = 0;
                  offset++;
                  // byte[255] uri // 255 // => ignore for ballot request
                  // not used for this request therefore we let it empty
                  offset += 255;
                  // Start ComputorBallot
                  offset++; // zero
                  // map votes
                  var voteBytes = this.VotesToByteArray(votes);
                  for (let i = 0; i < voteBytes.length; i++) {
                    proposal[offset++] = voteBytes[i];
                  }
                  offset++; // quasirandomnumber
                  const digest = new Uint8Array(this.DIGEST_LENGTH);
                  const toSign = proposal.slice(this.REQUEST_RESPONSE_HEADER_SIZE, offset);
                  K12(toSign, digest, this.DIGEST_LENGTH);
                  const signatur = schnorrq.sign(operatorPrivateKey, operatorPublicKey, digest);
                  proposal.set(signatur, offset);
                  offset += this.SIGNATURE_LENGTH;
                  output.push(proposal);
                }
                return output;
              });
            }
            downloadBlob(fileName, blob) {
              if (window.navigator.msSaveOrOpenBlob) {
                window.navigator.msSaveBlob(blob, fileName);
              }
              else {
                const anchor = window.document.createElement('a');
                anchor.href = window.URL.createObjectURL(blob);
                anchor.download = fileName;
                document.body.appendChild(anchor);
                anchor.click();
                document.body.removeChild(anchor);
                window.URL.revokeObjectURL(anchor.href);
              }
            }
          }
          exports.QubicHelper = QubicHelper;


          /***/
}),

/***/ "./src/converter/converter.js":
/*!************************************!*\
  !*** ./src/converter/converter.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

          "use strict";
          __webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   bytes32ToString: () => (/* binding */ bytes32ToString),
/* harmony export */   bytesToShiftedHex: () => (/* binding */ bytesToShiftedHex),
/* harmony export */   digestBytesToString: () => (/* binding */ digestBytesToString),
/* harmony export */   publicKeyBytesToString: () => (/* binding */ publicKeyBytesToString),
/* harmony export */   publicKeyStringToBytes: () => (/* binding */ publicKeyStringToBytes),
/* harmony export */   seedStringToBytes: () => (/* binding */ seedStringToBytes)
            /* harmony export */
});
          /*
          
          Permission is hereby granted, perpetual, worldwide, non-exclusive, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
          to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, 
          and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
          
          
            1. The Software cannot be used in any form or in any substantial portions for development, maintenance and for any other purposes, in the military sphere and in relation to military products, 
            including, but not limited to:
          
              a. any kind of armored force vehicles, missile weapons, warships, artillery weapons, air military vehicles (including military aircrafts, combat helicopters, military drones aircrafts), 
              air defense systems, rifle armaments, small arms, firearms and side arms, melee weapons, chemical weapons, weapons of mass destruction;
          
              b. any special software for development technical documentation for military purposes;
          
              c. any special equipment for tests of prototypes of any subjects with military purpose of use;
          
              d. any means of protection for conduction of acts of a military nature;
          
              e. any software or hardware for determining strategies, reconnaissance, troop positioning, conducting military actions, conducting special operations;
          
              f. any dual-use products with possibility to use the product in military purposes;
          
              g. any other products, software or services connected to military activities;
          
              h. any auxiliary means related to abovementioned spheres and products.
          
          
            2. The Software cannot be used as described herein in any connection to the military activities. A person, a company, or any other entity, which wants to use the Software, 
            shall take all reasonable actions to make sure that the purpose of use of the Software cannot be possibly connected to military purposes.
          
          
            3. The Software cannot be used by a person, a company, or any other entity, activities of which are connected to military sphere in any means. If a person, a company, or any other entity, 
            during the period of time for the usage of Software, would engage in activities, connected to military purposes, such person, company, or any other entity shall immediately stop the usage 
            of Software and any its modifications or alterations.
          
          
            4. Abovementioned restrictions should apply to all modification, alteration, merge, and to other actions, related to the Software, regardless of how the Software was changed due to the 
            abovementioned actions.
          
          
          The above copyright notice and this permission notice shall be included in all copies or substantial portions, modifications and alterations of the Software.
          
          
          THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
          IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH 
          THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
          
          */



          const SHIFTED_HEX_CHARS = 'abcdefghijklmnop';
          const ALPHABET = 'abcdefghijklmnopqrstuvwxyz';

          const bytesToShiftedHex = function (bytes) {
            let hex = '';
            for (let i = 0; i < bytes.length; i++) {
              hex += SHIFTED_HEX_CHARS[bytes[i] >> 4] + SHIFTED_HEX_CHARS[bytes[i] & 15];
            }

            return hex.toUpperCase();
          };

          const publicKeyStringToBytes = function (s) {
            const publicKeyBytes = new Uint8Array(32);
            const view = new DataView(publicKeyBytes.buffer, 0);

            for (let i = 0; i < 4; i++) {
              view.setBigUint64(i * 8, 0n, true);
              for (let j = 14; j-- > 0;) {
                view.setBigUint64(i * 8, view.getBigUint64(i * 8, true) * 26n + BigInt(s.charCodeAt(i * 14 + j)) - BigInt('A'.charCodeAt(0)), true);
              }
            }

            return publicKeyBytes;
          };

          const bytes32ToString = function (bytes) {
            const hex = bytesToShiftedHex(bytes);
            const buffer = new Uint8Array(32);
            const view = new DataView(buffer.buffer, 0);
            let s = '';

            for (let i = 0; i < bytes.length; i++) {
              view.setUint8(
                i,
                ((hex.charCodeAt(i << 1) - 'A'.charCodeAt(0)) << 4) |
                (hex.charCodeAt((i << 1) + 1) - 'A'.charCodeAt(0)),
                true
              );
            }
            for (let i = 0; i < 4; i++) {
              for (let j = 0; j < 14; j++) {
                s += String.fromCharCode(
                  Number((view.getBigUint64(i * 8, true) % 26n) + BigInt('A'.charCodeAt(0)))
                );
                view.setBigUint64(i * 8, view.getBigUint64(i * 8, true) / 26n, true);
              }
            }

            return s.toLowerCase();
          };

          const digestBytesToString = bytes32ToString;

          const publicKeyBytesToString = function (bytes) {
            if (bytes.length === 32) {
              return bytes32ToString(bytes).toUpperCase();
            }

            const hex = bytesToShiftedHex(bytes);
            const buffer = new Uint8Array(40);
            const view = new DataView(buffer.buffer, 0);
            let s = '';

            for (let i = 0; i < bytes.length; i++) {
              view.setUint8(
                i,
                ((hex.charCodeAt(i << 1) - 'A'.charCodeAt(0)) << 4) |
                (hex.charCodeAt((i << 1) + 1) - 'A'.charCodeAt(0)),
                true
              );
            }
            for (let i = 0; i < 4; i++) {
              for (let j = 0; j < 14; j++) {
                s += String.fromCharCode(
                  Number((view.getBigUint64(i * 8, true) % 26n) + BigInt('A'.charCodeAt(0)))
                );
                view.setBigUint64(i * 8, view.getBigUint64(i * 8, true) / 26n, true);
              }
            }

            view.setBigUint64(32, view.getBigUint64(32, true) & 0x3ffffn, true);

            for (let i = 0; i < 4; i++) {
              s += String.fromCharCode(
                Number((view.getBigUint64(32, true) % 26n) + BigInt('A'.charCodeAt(0)))
              );
              view.setBigUint64(32, view.getBigUint64(32, true) / 26n, true);
            }

            return s.toUpperCase();
          };

          const seedStringToBytes = function (seed) {
            const bytes = new Uint8Array(seed.length);
            for (let i = 0; i < seed.length; i++) {
              bytes[i] = ALPHABET.indexOf(seed[i]);
            }
            return bytes;
          };

          /***/
}),

/***/ "./src/crypto/index.js":
/*!*****************************!*\
  !*** ./src/crypto/index.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

          "use strict";
          __webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CHECKSUM_LENGTH: () => (/* binding */ CHECKSUM_LENGTH),
/* harmony export */   DIGEST_LENGTH: () => (/* binding */ DIGEST_LENGTH),
/* harmony export */   KECCAK_STATE_LENGTH: () => (/* binding */ KECCAK_STATE_LENGTH),
/* harmony export */   NONCE_LENGTH: () => (/* binding */ NONCE_LENGTH),
/* harmony export */   PRIVATE_KEY_LENGTH: () => (/* binding */ PRIVATE_KEY_LENGTH),
/* harmony export */   PUBLIC_KEY_LENGTH: () => (/* binding */ PUBLIC_KEY_LENGTH),
/* harmony export */   SIGNATURE_LENGTH: () => (/* binding */ SIGNATURE_LENGTH),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
            /* harmony export */
});
/* harmony import */ var _libFourQ_K12_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./libFourQ_K12.js */ "./src/crypto/libFourQ_K12.js");
/* harmony import */ var _keccakp_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./keccakp.js */ "./src/crypto/keccakp.js");






          const allocU8 = function (l, v) {
            let ptr = _libFourQ_K12_js__WEBPACK_IMPORTED_MODULE_0__["default"]._malloc(l);
            let chunk = _libFourQ_K12_js__WEBPACK_IMPORTED_MODULE_0__["default"].HEAPU8.subarray(ptr, ptr + l);
            if (v) {
              chunk.set(v);
            }
            return chunk;
          };

          const allocU16 = function (l, v) {
            let ptr = _libFourQ_K12_js__WEBPACK_IMPORTED_MODULE_0__["default"]._malloc(l);
            let chunk = _libFourQ_K12_js__WEBPACK_IMPORTED_MODULE_0__["default"].HEAPU16.subarray(ptr, ptr + l);
            chunk.set(v);
            return chunk;
          };

          /**
           * @namespace Crypto
           */

          /**
           * A promise which always resolves to object with crypto functions.
           *
           * @constant {Promise<Crypto>}
           * @memberof module:qubic
           */
          const crypto = new Promise(function (resolve) {
            _libFourQ_K12_js__WEBPACK_IMPORTED_MODULE_0__["default"].onRuntimeInitialized = function () {
              /**
               * @memberof Crypto.schnorrq
               * @param {Uint8Array} secretKey
               * @returns {Uint8Array}
               */
              const generatePublicKey = function (secretKey) {
                const sk = allocU8(secretKey.length, secretKey);
                const pk = allocU8(32);

                const free = function () {
                  _libFourQ_K12_js__WEBPACK_IMPORTED_MODULE_0__["default"]._free(sk.byteOffset);
                  _libFourQ_K12_js__WEBPACK_IMPORTED_MODULE_0__["default"]._free(pk.byteOffset);
                };

                _libFourQ_K12_js__WEBPACK_IMPORTED_MODULE_0__["default"]._SchnorrQ_KeyGeneration(sk.byteOffset, pk.byteOffset);
                const key = pk.slice();
                free();
                return key;
              };

              /**
               * @memberof Crypto.schnorrq
               * @param {Uint8Array} secretKey
               * @param {Uint8Array} publicKey
               * @param {Uint8Array} message
               * @returns {Uint8Array}
               */
              const sign = function (secretKey, publicKey, message) {
                const sk = allocU8(secretKey.length, secretKey);
                const pk = allocU8(publicKey.length, publicKey);
                const m = allocU8(message.length, message);
                const s = allocU8(64);

                const free = function () {
                  _libFourQ_K12_js__WEBPACK_IMPORTED_MODULE_0__["default"]._free(sk.byteOffset);
                  _libFourQ_K12_js__WEBPACK_IMPORTED_MODULE_0__["default"]._free(pk.byteOffset);
                  _libFourQ_K12_js__WEBPACK_IMPORTED_MODULE_0__["default"]._free(m.byteOffset);
                  _libFourQ_K12_js__WEBPACK_IMPORTED_MODULE_0__["default"]._free(s.byteOffset);
                };

                _libFourQ_K12_js__WEBPACK_IMPORTED_MODULE_0__["default"]._SchnorrQ_Sign(
                  sk.byteOffset,
                  pk.byteOffset,
                  m.byteOffset,
                  message.length,
                  s.byteOffset
                );
                const sig = s.slice();
                free();
                return sig;
              };

              /**
               * @memberof Crypto.schnorrq
               * @param {Uint8Array} publicKey
               * @param {Uint8Array} message
               * @param {Uint8Array} signature
               * @returns {number} 1 if valid, 0 if invalid
               */
              const verify = function (publicKey, message, signature) {
                const pk = allocU8(publicKey.length, publicKey);
                const m = allocU8(message.length, message);
                const s = allocU8(signature.length, signature);
                const v = allocU16(1, new Uint16Array(1));

                const free = function () {
                  _libFourQ_K12_js__WEBPACK_IMPORTED_MODULE_0__["default"]._free(pk.byteOffset);
                  _libFourQ_K12_js__WEBPACK_IMPORTED_MODULE_0__["default"]._free(m.byteOffset);
                  _libFourQ_K12_js__WEBPACK_IMPORTED_MODULE_0__["default"]._free(s.byteOffset);
                  _libFourQ_K12_js__WEBPACK_IMPORTED_MODULE_0__["default"]._free(v.byteOffset);
                };

                _libFourQ_K12_js__WEBPACK_IMPORTED_MODULE_0__["default"]._SchnorrQ_Verify(
                  pk.byteOffset,
                  m.byteOffset,
                  message.length,
                  s.byteOffset,
                  v.byteOffset
                );
                const ver = v[0];
                free();
                return ver;
              };

              /**
               * @memberof Crypto.kex
               * @param {Uint8Array} secretKey
               * @returns {Uint8Array} Public key
               */
              const generateCompressedPublicKey = function (secretKey) {
                const sk = allocU8(secretKey.length, secretKey);
                const pk = allocU8(32);

                const free = function () {
                  _libFourQ_K12_js__WEBPACK_IMPORTED_MODULE_0__["default"]._free(sk.byteOffset);
                  _libFourQ_K12_js__WEBPACK_IMPORTED_MODULE_0__["default"]._free(pk.byteOffset);
                };

                _libFourQ_K12_js__WEBPACK_IMPORTED_MODULE_0__["default"]._CompressedPublicKeyGeneration(sk.byteOffset, pk.byteOffset);
                const key = pk.slice();
                free();
                return key;
              };

              /**
               * @memberof Crypto.kex
               * @param {Uint8Array} secretKey
               * @param {Uint8Array} publicKey
               * @returns {Uint8Array} Shared key
               */
              const compressedSecretAgreement = function (secretKey, publicKey) {
                const sk = allocU8(secretKey.length, secretKey);
                const pk = allocU8(publicKey.length, publicKey);
                const shk = allocU8(32);

                const free = function () {
                  _libFourQ_K12_js__WEBPACK_IMPORTED_MODULE_0__["default"]._free(sk.byteOffset);
                  _libFourQ_K12_js__WEBPACK_IMPORTED_MODULE_0__["default"]._free(pk.byteOffset);
                  _libFourQ_K12_js__WEBPACK_IMPORTED_MODULE_0__["default"]._free(shk.byteOffset);
                };

                _libFourQ_K12_js__WEBPACK_IMPORTED_MODULE_0__["default"]._CompressedSecretAgreement(sk.byteOffset, pk.byteOffset, shk.byteOffset);
                const key = shk.slice();
                free();
                return key;
              };

              /**
               * @memberof Crypto
               * @param {Uint8Array} input
               * @param {Uint8Array} output
               * @param {number} outputLength
               * @param {number} outputOffset
               */
              const K12 = function (input, output, outputLength, outputOffset = 0) {
                const i = allocU8(input.length, input);
                const o = allocU8(outputLength, new Uint8Array(outputLength));

                const free = function () {
                  _libFourQ_K12_js__WEBPACK_IMPORTED_MODULE_0__["default"]._free(i.byteOffset);
                  _libFourQ_K12_js__WEBPACK_IMPORTED_MODULE_0__["default"]._free(o.byteOffset);
                };

                _libFourQ_K12_js__WEBPACK_IMPORTED_MODULE_0__["default"]._KangarooTwelve(i.byteOffset, input.length, o.byteOffset, outputLength, 0, 0);
                output.set(o.slice(), outputOffset);
                free();
              };

              resolve({
                /**
                 * @namespace Crypto.schnorrq
                 */
                schnorrq: {
                  generatePublicKey,
                  sign,
                  verify,
                },
                /**
                 * @namespace Crypto.kex
                 */
                kex: {
                  generateCompressedPublicKey,
                  compressedSecretAgreement,
                },
                K12,
                keccakP160012: _keccakp_js__WEBPACK_IMPORTED_MODULE_1__.keccakP160012,
                KECCAK_STATE_LENGTH: 200,
              });
            };
          });

          crypto.keccakP160012 = _keccakp_js__WEBPACK_IMPORTED_MODULE_1__.keccakP160012;
          const KECCAK_STATE_LENGTH = 200;
          const SIGNATURE_LENGTH = 64;
          const PRIVATE_KEY_LENGTH = 32;
          const PUBLIC_KEY_LENGTH = 32;
          const DIGEST_LENGTH = 32;
          const NONCE_LENGTH = 32;
          const CHECKSUM_LENGTH = 3;

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (crypto);


          /***/
}),

/***/ "./src/crypto/keccakp.js":
/*!*******************************!*\
  !*** ./src/crypto/keccakp.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

          "use strict";
          __webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   keccakP160012: () => (/* binding */ keccakP160012)
            /* harmony export */
});

          // Source: https://github.com/paulmillr/noble-hashes/blob/299905c98bdf1a197023198c8fe678923483896d/src/sha3.ts

          /*
          The MIT License (MIT)
          
          Copyright (c) 2022 Paul Miller (https://paulmillr.com)
          
          Permission is hereby granted, free of charge, to any person obtaining a copy
          of this software and associated documentation files (the “Software”), to deal
          in the Software without restriction, including without limitation the rights
          to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
          copies of the Software, and to permit persons to whom the Software is
          furnished to do so, subject to the following conditions:
          
          The above copyright notice and this permission notice shall be included in
          all copies or substantial portions of the Software.
          
          THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
          IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
          FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
          AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
          LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
          OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
          THE SOFTWARE.
          */

          const U32_MASK64 = BigInt(2 ** 32 - 1);
          const _32n = BigInt(32);

          // We are not using BigUint64Array, because they are extremely slow as per 2022
          function fromBig(n, le = false) {
            if (le) return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };
            return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };
          }

          function split(lst, le = false) {
            let Ah = new Uint32Array(lst.length);
            let Al = new Uint32Array(lst.length);
            for (let i = 0; i < lst.length; i++) {
              const { h, l } = fromBig(lst[i], le);
              [Ah[i], Al[i]] = [h, l];
            }
            return [Ah, Al];
          }

          const toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);
          // for Shift in [0, 32)
          const shrSH = (h, l, s) => h >>> s;
          const shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);
          // Right rotate for Shift in [1, 32)
          const rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));
          const rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);
          // Right rotate for Shift in (32, 64), NOTE: 32 is special case.
          const rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));
          const rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));
          // Right rotate for shift===32 (just swaps l&h)
          const rotr32H = (h, l) => l;
          const rotr32L = (h, l) => h;
          // Left rotate for Shift in [1, 32)
          const rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));
          const rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));
          // Left rotate for Shift in (32, 64), NOTE: 32 is special case.
          const rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));
          const rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));

          // JS uses 32-bit signed integers for bitwise operations which means we cannot
          // simple take carry out of low bit sum by shift, we need to use division.
          // Removing "export" has 5% perf penalty -_-
          function add(Ah, Al, Bh, Bl) {
            const l = (Al >>> 0) + (Bl >>> 0);
            return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };
          }
          // Addition with more than 2 elements
          const add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
          const add3H = (low, Ah, Bh, Ch) =>
            (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;
          const add4L = (Al, Bl, Cl, Dl) =>
            (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
          const add4H = (low, Ah, Bh, Ch, Dh) =>
            (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;
          const add5L = (Al, Bl, Cl, Dl, El) =>
            (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
          const add5H = (low, Ah, Bh, Ch, Dh, Eh) =>
            (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;

          // prettier-ignore
          const u64 = {
            fromBig, split, toBig,
            shrSH, shrSL,
            rotrSH, rotrSL, rotrBH, rotrBL,
            rotr32H, rotr32L,
            rotlSH, rotlSL, rotlBH, rotlBL,
            add, add3L, add3H, add4L, add4H, add5H, add5L,
          };

          const [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];

          const _0n = BigInt(0);
          const _1n = BigInt(1);
          const _2n = BigInt(2);
          const _7n = BigInt(7);
          const _256n = BigInt(256);
          const _0x71n = BigInt(0x71);
          for (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {
            // Pi
            [x, y] = [y, (2 * x + 3 * y) % 5];
            SHA3_PI.push(2 * (5 * y + x));
            // Rotational
            SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);
            // Iota
            let t = _0n;
            for (let j = 0; j < 7; j++) {
              R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;
              if (R & _2n) t ^= _1n << ((_1n << BigInt(j)) - _1n);
            }
            _SHA3_IOTA.push(t);
          }
          const [SHA3_IOTA_H, SHA3_IOTA_L] = u64.split(_SHA3_IOTA, true);

          const rotlH = (h, l, s) =>
            s > 32 ? u64.rotlBH(h, l, s) : u64.rotlSH(h, l, s);
          const rotlL = (h, l, s) =>
            s > 32 ? u64.rotlBL(h, l, s) : u64.rotlSL(h, l, s);

          function keccakP160012(s1) {
            const s = new Uint32Array(s1.buffer);
            const rounds = 12;
            const B = new Uint32Array(5 * 2);
            for (let round = 24 - rounds; round < 24; round++) {
              // Theta θ
              for (let x = 0; x < 10; x++) B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
              for (let x = 0; x < 10; x += 2) {
                const idx1 = (x + 8) % 10;
                const idx0 = (x + 2) % 10;
                const B0 = B[idx0];
                const B1 = B[idx0 + 1];
                const Th = rotlH(B0, B1, 1) ^ B[idx1];
                const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
                for (let y = 0; y < 50; y += 10) {
                  s[x + y] ^= Th;
                  s[x + y + 1] ^= Tl;
                }
              }
              // Rho (ρ) and Pi (π)
              let curH = s[2];
              let curL = s[3];
              for (let t = 0; t < 24; t++) {
                const shift = SHA3_ROTL[t];
                const Th = rotlH(curH, curL, shift);
                const Tl = rotlL(curH, curL, shift);
                const PI = SHA3_PI[t];
                curH = s[PI];
                curL = s[PI + 1];
                s[PI] = Th;
                s[PI + 1] = Tl;
              }
              // Chi (χ)
              for (let y = 0; y < 50; y += 10) {
                for (let x = 0; x < 10; x++) B[x] = s[y + x];
                for (let x = 0; x < 10; x++) s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
              }
              // Iota (ι)
              s[0] ^= SHA3_IOTA_H[round];
              s[1] ^= SHA3_IOTA_L[round];
            }
            B.fill(0);
          }


          /***/
}),

/***/ "./src/crypto/libFourQ_K12.js":
/*!************************************!*\
  !*** ./src/crypto/libFourQ_K12.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

          "use strict";
          __webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
            /* harmony export */
});
          var encodedWasmFile = '';

          var Module = typeof Module !== 'undefined' ? Module : {};
          var moduleOverrides = {};
          var key;
          for (key in Module) {
            if (Module.hasOwnProperty(key)) {
              moduleOverrides[key] = Module[key];
            }
          }
          var arguments_ = [];
          var thisProgram = './this.program';
          var quit_ = function (status, toThrow) {
            throw toThrow;
          };
          var ENVIRONMENT_IS_WEB = typeof window === 'object';
          var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
          var ENVIRONMENT_IS_NODE =
            typeof process === 'object' &&
            typeof process.versions === 'object' &&
            typeof process.versions.node === 'string';
          var scriptDirectory = '';
          /**
           * @param path
           */
          function locateFile(path) {
            if (Module['locateFile']) {
              return Module['locateFile'](path, scriptDirectory);
            }
            return scriptDirectory + path;
          }
          var read_, readAsync, readBinary, setWindowTitle;

          /**
           * @param e
           */
          function logExceptionOnExit(e) {
            if (e instanceof ExitStatus) return;
            var toLog = e;
            err('exiting due to exception: ' + toLog);
          }
          var nodeFS;
          var nodePath;
          // if (ENVIRONMENT_IS_NODE) {
          //   if (ENVIRONMENT_IS_WORKER) {
          //     scriptDirectory = require('path').dirname(scriptDirectory) + '/';
          //   } else {
          //     scriptDirectory = '/';
          //   }
          //   read_ = function shell_read(filename, binary) {
          //     if (!nodeFS) nodeFS = require('fs');
          //     if (!nodePath) nodePath = require('path');
          //     filename = nodePath['normalize'](filename);
          //     return nodeFS['readFileSync'](filename, binary ? null : 'utf8');
          //   };
          //   readBinary = function readBinary(filename) {
          //     var ret = read_(filename, true);
          //     if (!ret.buffer) {
          //       ret = new Uint8Array(ret);
          //     }
          //     assert(ret.buffer);
          //     return ret;
          //   };
          //   readAsync = function readAsync(filename, onload, onerror) {
          //     if (!nodeFS) nodeFS = require('fs');
          //     if (!nodePath) nodePath = require('path');
          //     filename = nodePath['normalize'](filename);
          //     nodeFS['readFile'](filename, function (err, data) {
          //       if (err) onerror(err);
          //       else onload(data.buffer);
          //     });
          //   };
          //   if (process['argv'].length > 1) {
          //     thisProgram = process['argv'][1].replace(/\\/g, '/');
          //   }
          //   arguments_ = process['argv'].slice(2);
          //   if (typeof module !== 'undefined') {
          //     module['exports'] = Module;
          //   }
          //   process['on']('uncaughtException', function (ex) {
          //     if (!(ex instanceof ExitStatus)) {
          //       throw ex;
          //     }
          //   });
          //   process['on']('unhandledRejection', function (reason) {
          //     throw reason;
          //   });
          //   quit_ = function (status, toThrow) {
          //     if (keepRuntimeAlive()) {
          //       process['exitCode'] = status;
          //       throw toThrow;
          //     }
          //     logExceptionOnExit(toThrow);
          //     process['exit'](status);
          //   };
          //   Module['inspect'] = function () {
          //     return '[Emscripten Module object]';
          //   };
          // } else
          if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
            if (ENVIRONMENT_IS_WORKER) {
              scriptDirectory = self.location.href;
            } else if (typeof document !== 'undefined' && document.currentScript) {
              scriptDirectory = document.currentScript.src;
            }
            if (scriptDirectory.indexOf('blob:') !== 0) {
              scriptDirectory = scriptDirectory.substr(
                0,
                scriptDirectory.replace(/[?#].*/, '').lastIndexOf('/') + 1
              );
            } else {
              scriptDirectory = '';
            }
            {
              read_ = function (url) {
                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, false);
                xhr.send(null);
                return xhr.responseText;
              };
              if (ENVIRONMENT_IS_WORKER) {
                readBinary = function (url) {
                  var xhr = new XMLHttpRequest();
                  xhr.open('GET', url, false);
                  xhr.responseType = 'arraybuffer';
                  xhr.send(null);
                  return new Uint8Array(xhr.response);
                };
              }
              readAsync = function (url, onload, onerror) {
                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, true);
                xhr.responseType = 'arraybuffer';
                xhr.onload = function () {
                  if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) {
                    onload(xhr.response);
                    return;
                  }
                  onerror();
                };
                xhr.onerror = onerror;
                xhr.send(null);
              };
            }
            setWindowTitle = function (title) {
              document.title = title;
            };
          } else {
          }
          var out = Module['print'] || console.log.bind(console);
          var err = Module['printErr'] || console.warn.bind(console);
          for (key in moduleOverrides) {
            if (moduleOverrides.hasOwnProperty(key)) {
              Module[key] = moduleOverrides[key];
            }
          }
          moduleOverrides = null;
          if (Module['arguments']) arguments_ = Module['arguments'];
          if (Module['thisProgram']) thisProgram = Module['thisProgram'];
          if (Module['quit']) quit_ = Module['quit'];
          var wasmBinary;
          if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];
          var noExitRuntime = Module['noExitRuntime'] || true;
          if (typeof WebAssembly !== 'object') {
            abort('no native wasm support detected');
          }
          var wasmMemory;
          var ABORT = false;
          var EXITSTATUS;

          /**
           * @param condition
           * @param text
           */
          function assert(condition, text) {
            if (!condition) {
              abort('Assertion failed: ' + text);
            }
          }
          var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

          /**
           * @param heap
           * @param idx
           * @param maxBytesToRead
           */
          function UTF8ArrayToString(heap, idx, maxBytesToRead) {
            var endIdx = idx + maxBytesToRead;
            var endPtr = idx;
            while (heap[endPtr] && !(endPtr >= endIdx)) ++endPtr;
            if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {
              return UTF8Decoder.decode(heap.subarray(idx, endPtr));
            } else {
              var str = '';
              while (idx < endPtr) {
                var u0 = heap[idx++];
                if (!(u0 & 128)) {
                  str += String.fromCharCode(u0);
                  continue;
                }
                var u1 = heap[idx++] & 63;
                if ((u0 & 224) == 192) {
                  str += String.fromCharCode(((u0 & 31) << 6) | u1);
                  continue;
                }
                var u2 = heap[idx++] & 63;
                if ((u0 & 240) == 224) {
                  u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
                } else {
                  u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heap[idx++] & 63);
                }
                if (u0 < 65536) {
                  str += String.fromCharCode(u0);
                } else {
                  var ch = u0 - 65536;
                  str += String.fromCharCode(55296 | (ch >> 10), 56320 | (ch & 1023));
                }
              }
            }
            return str;
          }

          /**
           * @param ptr
           * @param maxBytesToRead
           */
          function UTF8ToString(ptr, maxBytesToRead) {
            return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
          }

          /**
           * @param str
           * @param heap
           * @param outIdx
           * @param maxBytesToWrite
           */
          function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
            if (!(maxBytesToWrite > 0)) return 0;
            var startIdx = outIdx;
            var endIdx = outIdx + maxBytesToWrite - 1;
            for (var i = 0; i < str.length; ++i) {
              var u = str.charCodeAt(i);
              if (u >= 55296 && u <= 57343) {
                var u1 = str.charCodeAt(++i);
                u = (65536 + ((u & 1023) << 10)) | (u1 & 1023);
              }
              if (u <= 127) {
                if (outIdx >= endIdx) break;
                heap[outIdx++] = u;
              } else if (u <= 2047) {
                if (outIdx + 1 >= endIdx) break;
                heap[outIdx++] = 192 | (u >> 6);
                heap[outIdx++] = 128 | (u & 63);
              } else if (u <= 65535) {
                if (outIdx + 2 >= endIdx) break;
                heap[outIdx++] = 224 | (u >> 12);
                heap[outIdx++] = 128 | ((u >> 6) & 63);
                heap[outIdx++] = 128 | (u & 63);
              } else {
                if (outIdx + 3 >= endIdx) break;
                heap[outIdx++] = 240 | (u >> 18);
                heap[outIdx++] = 128 | ((u >> 12) & 63);
                heap[outIdx++] = 128 | ((u >> 6) & 63);
                heap[outIdx++] = 128 | (u & 63);
              }
            }
            heap[outIdx] = 0;
            return outIdx - startIdx;
          }

          /**
           * @param str
           * @param outPtr
           * @param maxBytesToWrite
           */
          function stringToUTF8(str, outPtr, maxBytesToWrite) {
            return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
          }

          /**
           * @param str
           */
          function lengthBytesUTF8(str) {
            var len = 0;
            for (var i = 0; i < str.length; ++i) {
              var u = str.charCodeAt(i);
              if (u >= 55296 && u <= 57343) u = (65536 + ((u & 1023) << 10)) | (str.charCodeAt(++i) & 1023);
              if (u <= 127) ++len;
              else if (u <= 2047) len += 2;
              else if (u <= 65535) len += 3;
              else len += 4;
            }
            return len;
          }
          var buffer, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

          /**
           * @param buf
           */
          function updateGlobalBufferAndViews(buf) {
            buffer = buf;
            Module['HEAP8'] = HEAP8 = new Int8Array(buf);
            Module['HEAP16'] = HEAP16 = new Int16Array(buf);
            Module['HEAP32'] = HEAP32 = new Int32Array(buf);
            Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
            Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
            Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
            Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
            Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
          }
          var INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 16777216;
          var wasmTable;
          var __ATPRERUN__ = [];
          var __ATINIT__ = [];
          var __ATMAIN__ = [];
          var __ATPOSTRUN__ = [];
          var runtimeInitialized = false;
          var runtimeExited = false;
          var runtimeKeepaliveCounter = 0;

          /**
           *
           */
          function keepRuntimeAlive() {
            return noExitRuntime || runtimeKeepaliveCounter > 0;
          }

          /**
           *
           */
          function preRun() {
            if (Module['preRun']) {
              if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
              while (Module['preRun'].length) {
                addOnPreRun(Module['preRun'].shift());
              }
            }
            callRuntimeCallbacks(__ATPRERUN__);
          }

          /**
           *
           */
          function initRuntime() {
            runtimeInitialized = true;
            if (!Module['noFSInit'] && !FS.init.initialized) FS.init();
            FS.ignorePermissions = false;
            TTY.init();
            callRuntimeCallbacks(__ATINIT__);
          }

          /**
           *
           */
          function preMain() {
            callRuntimeCallbacks(__ATMAIN__);
          }

          /**
           *
           */
          function exitRuntime() {
            runtimeExited = true;
          }

          /**
           *
           */
          function postRun() {
            if (Module['postRun']) {
              if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
              while (Module['postRun'].length) {
                addOnPostRun(Module['postRun'].shift());
              }
            }
            callRuntimeCallbacks(__ATPOSTRUN__);
          }

          /**
           * @param cb
           */
          function addOnPreRun(cb) {
            __ATPRERUN__.unshift(cb);
          }

          /**
           * @param cb
           */
          function addOnPostRun(cb) {
            __ATPOSTRUN__.unshift(cb);
          }
          var runDependencies = 0;
          var runDependencyWatcher = null;
          var dependenciesFulfilled = null;

          /**
           * @param id
           */
          function getUniqueRunDependency(id) {
            return id;
          }

          /**
           * @param id
           */
          function addRunDependency(id) {
            runDependencies++;
            if (Module['monitorRunDependencies']) {
              Module['monitorRunDependencies'](runDependencies);
            }
          }

          /**
           * @param id
           */
          function removeRunDependency(id) {
            runDependencies--;
            if (Module['monitorRunDependencies']) {
              Module['monitorRunDependencies'](runDependencies);
            }
            if (runDependencies == 0) {
              if (runDependencyWatcher !== null) {
                clearInterval(runDependencyWatcher);
                runDependencyWatcher = null;
              }
              if (dependenciesFulfilled) {
                var callback = dependenciesFulfilled;
                dependenciesFulfilled = null;
                callback();
              }
            }
          }
          Module['preloadedImages'] = {};
          Module['preloadedAudios'] = {};

          /**
           * @param what
           */
          function abort(what) {
            {
              if (Module['onAbort']) {
                Module['onAbort'](what);
              }
            }
            what = 'Aborted(' + what + ')';
            err(what);
            ABORT = true;
            EXITSTATUS = 1;
            what += '. Build with -s ASSERTIONS=1 for more info.';
            var e = new WebAssembly.RuntimeError(what);
            throw e;
          }
          var dataURIPrefix = 'data:application/octet-stream;base64,';

          /**
           * @param filename
           */
          function isDataURI(filename) {
            return filename.startsWith(dataURIPrefix);
          }

          /**
           * @param filename
           */
          function isFileURI(filename) {
            return filename.startsWith('file://');
          }
          var wasmBinaryFile;
          wasmBinaryFile = 'libFourQ.wasm';
          if (!isDataURI(wasmBinaryFile)) {
            wasmBinaryFile = locateFile(wasmBinaryFile);
          }

          /**
           * @param file
           */
          function getBinary(file) {
            try {
              if (file == wasmBinaryFile && wasmBinary) {
                return new Uint8Array(wasmBinary);
              }
              if (readBinary) {
                return readBinary(file);
              } else {
                throw 'both async and sync fetching of the wasm failed';
              }
            } catch (err) {
              abort(err);
            }
          }

          /**
           *
           */
          function getBinaryPromise() {
            if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {
              if (typeof fetch === 'function' && !isFileURI(wasmBinaryFile)) {
                return fetch(wasmBinaryFile, { credentials: 'same-origin' })
                  .then(function (response) {
                    if (!response['ok']) {
                      throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
                    }
                    return response['arrayBuffer']();
                  })
                  .catch(function () {
                    return getBinary(wasmBinaryFile);
                  });
              } else {
                if (readAsync) {
                  return new Promise(function (resolve, reject) {
                    readAsync(
                      wasmBinaryFile,
                      function (response) {
                        resolve(new Uint8Array(response));
                      },
                      reject
                    );
                  });
                }
              }
            }
            return Promise.resolve().then(function () {
              return getBinary(wasmBinaryFile);
            });
          }

          function asciiToBinary(str) {
            if (typeof atob === 'function') {
              return atob(str)
            } else {
              return Buffer.from(str, 'base64').toString('binary');
            }
          }

          function decode(encoded) {
            var binaryString = asciiToBinary(encoded);
            var bytes = new Uint8Array(binaryString.length);
            for (var i = 0; i < binaryString.length; i++) {
              bytes[i] = binaryString.charCodeAt(i);
            }
            return bytes.buffer;
          }

          /**
           *
           */
          function createWasm() {
            var info = { env: asmLibraryArg, wasi_snapshot_preview1: asmLibraryArg };

            /**
             * @param instance
             * @param module
             */
            function receiveInstance(instance, module) {
              var exports = instance.exports;
              Module['asm'] = exports;
              wasmMemory = Module['asm']['memory'];
              updateGlobalBufferAndViews(wasmMemory.buffer);
              wasmTable = Module['asm']['__indirect_function_table'];
              removeRunDependency('wasm-instantiate');
            }
            addRunDependency('wasm-instantiate');

            /**
             * @param result
             */
            function receiveInstantiationResult(result) {
              receiveInstance(result['instance']);
            }

            /**
             * @param receiver
             */
            function instantiateArrayBuffer(receiver) {
              return WebAssembly.instantiate(decode(encodedWasmFile), info)
                .then(function (instance) {
                  return instance;
                })
                .then(receiver, function (reason) {
                  err('failed to asynchronously prepare wasm: ' + reason);
                  abort(reason);
                });
            }

            /**
             *
             */
            function instantiateAsync() {
              return instantiateArrayBuffer(receiveInstantiationResult);
            }
            if (Module['instantiateWasm']) {
              try {
                var exports = Module['instantiateWasm'](info, receiveInstance);
                return exports;
              } catch (e) {
                err('Module.instantiateWasm callback failed with error: ' + e);
                return false;
              }
            }
            instantiateAsync();
            return {};
          }
          var tempDouble;
          var tempI64;

          /**
           * @param callbacks
           */
          function callRuntimeCallbacks(callbacks) {
            while (callbacks.length > 0) {
              var callback = callbacks.shift();
              if (typeof callback == 'function') {
                callback(Module);
                continue;
              }
              var func = callback.func;
              if (typeof func === 'number') {
                if (callback.arg === undefined) {
                  getWasmTableEntry(func)();
                } else {
                  getWasmTableEntry(func)(callback.arg);
                }
              } else {
                func(callback.arg === undefined ? null : callback.arg);
              }
            }
          }
          var wasmTableMirror = [];

          /**
           * @param funcPtr
           */
          function getWasmTableEntry(funcPtr) {
            var func = wasmTableMirror[funcPtr];
            if (!func) {
              if (funcPtr >= wasmTableMirror.length) wasmTableMirror.length = funcPtr + 1;
              wasmTableMirror[funcPtr] = func = wasmTable.get(funcPtr);
            }
            return func;
          }

          /**
           * @param e
           */
          function handleException(e) {
            if (e instanceof ExitStatus || e == 'unwind') {
              return EXITSTATUS;
            }
            quit_(1, e);
          }
          var PATH = {
            splitPath: function (filename) {
              var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
              return splitPathRe.exec(filename).slice(1);
            },
            normalizeArray: function (parts, allowAboveRoot) {
              var up = 0;
              for (var i = parts.length - 1; i >= 0; i--) {
                var last = parts[i];
                if (last === '.') {
                  parts.splice(i, 1);
                } else if (last === '..') {
                  parts.splice(i, 1);
                  up++;
                } else if (up) {
                  parts.splice(i, 1);
                  up--;
                }
              }
              if (allowAboveRoot) {
                for (; up; up--) {
                  parts.unshift('..');
                }
              }
              return parts;
            },
            normalize: function (path) {
              var isAbsolute = path.charAt(0) === '/',
                trailingSlash = path.substr(-1) === '/';
              path = PATH.normalizeArray(
                path.split('/').filter(function (p) {
                  return !!p;
                }),
                !isAbsolute
              ).join('/');
              if (!path && !isAbsolute) {
                path = '.';
              }
              if (path && trailingSlash) {
                path += '/';
              }
              return (isAbsolute ? '/' : '') + path;
            },
            dirname: function (path) {
              var result = PATH.splitPath(path),
                root = result[0],
                dir = result[1];
              if (!root && !dir) {
                return '.';
              }
              if (dir) {
                dir = dir.substr(0, dir.length - 1);
              }
              return root + dir;
            },
            basename: function (path) {
              if (path === '/') return '/';
              path = PATH.normalize(path);
              path = path.replace(/\/$/, '');
              var lastSlash = path.lastIndexOf('/');
              if (lastSlash === -1) return path;
              return path.substr(lastSlash + 1);
            },
            extname: function (path) {
              return PATH.splitPath(path)[3];
            },
            join: function () {
              var paths = Array.prototype.slice.call(arguments, 0);
              return PATH.normalize(paths.join('/'));
            },
            join2: function (l, r) {
              return PATH.normalize(l + '/' + r);
            },
          };

          /**
           *
           */
          function getRandomDevice() {
            if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
              var randomBuffer = new Uint8Array(1);
              return function () {
                crypto.getRandomValues(randomBuffer);
                return randomBuffer[0];
              };
            }
            // else if (ENVIRONMENT_IS_NODE) {
            //   try {
            //     var crypto_module = require('crypto');
            //     return function () {
            //       return crypto_module['randomBytes'](1)[0];
            //     };
            //   } catch (e) {}
            // }
            return function () {
              abort('randomDevice');
            };
          }
          var PATH_FS = {
            resolve: function () {
              var resolvedPath = '',
                resolvedAbsolute = false;
              for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
                var path = i >= 0 ? arguments[i] : FS.cwd();
                if (typeof path !== 'string') {
                  throw new TypeError('Arguments to path.resolve must be strings');
                } else if (!path) {
                  return '';
                }
                resolvedPath = path + '/' + resolvedPath;
                resolvedAbsolute = path.charAt(0) === '/';
              }
              resolvedPath = PATH.normalizeArray(
                resolvedPath.split('/').filter(function (p) {
                  return !!p;
                }),
                !resolvedAbsolute
              ).join('/');
              return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';
            },
            relative: function (from, to) {
              from = PATH_FS.resolve(from).substr(1);
              to = PATH_FS.resolve(to).substr(1);

              /**
               * @param arr
               */
              function trim(arr) {
                var start = 0;
                for (; start < arr.length; start++) {
                  if (arr[start] !== '') break;
                }
                var end = arr.length - 1;
                for (; end >= 0; end--) {
                  if (arr[end] !== '') break;
                }
                if (start > end) return [];
                return arr.slice(start, end - start + 1);
              }
              var fromParts = trim(from.split('/'));
              var toParts = trim(to.split('/'));
              var length = Math.min(fromParts.length, toParts.length);
              var samePartsLength = length;
              for (var i = 0; i < length; i++) {
                if (fromParts[i] !== toParts[i]) {
                  samePartsLength = i;
                  break;
                }
              }
              var outputParts = [];
              for (var i = samePartsLength; i < fromParts.length; i++) {
                outputParts.push('..');
              }
              outputParts = outputParts.concat(toParts.slice(samePartsLength));
              return outputParts.join('/');
            },
          };
          var TTY = {
            ttys: [],
            init: function () { },
            shutdown: function () { },
            register: function (dev, ops) {
              TTY.ttys[dev] = { input: [], output: [], ops: ops };
              FS.registerDevice(dev, TTY.stream_ops);
            },
            stream_ops: {
              open: function (stream) {
                var tty = TTY.ttys[stream.node.rdev];
                if (!tty) {
                  throw new FS.ErrnoError(43);
                }
                stream.tty = tty;
                stream.seekable = false;
              },
              close: function (stream) {
                stream.tty.ops.flush(stream.tty);
              },
              flush: function (stream) {
                stream.tty.ops.flush(stream.tty);
              },
              read: function (stream, buffer, offset, length, pos) {
                if (!stream.tty || !stream.tty.ops.get_char) {
                  throw new FS.ErrnoError(60);
                }
                var bytesRead = 0;
                for (var i = 0; i < length; i++) {
                  var result;
                  try {
                    result = stream.tty.ops.get_char(stream.tty);
                  } catch (e) {
                    throw new FS.ErrnoError(29);
                  }
                  if (result === undefined && bytesRead === 0) {
                    throw new FS.ErrnoError(6);
                  }
                  if (result === null || result === undefined) break;
                  bytesRead++;
                  buffer[offset + i] = result;
                }
                if (bytesRead) {
                  stream.node.timestamp = Date.now();
                }
                return bytesRead;
              },
              write: function (stream, buffer, offset, length, pos) {
                if (!stream.tty || !stream.tty.ops.put_char) {
                  throw new FS.ErrnoError(60);
                }
                try {
                  for (var i = 0; i < length; i++) {
                    stream.tty.ops.put_char(stream.tty, buffer[offset + i]);
                  }
                } catch (e) {
                  throw new FS.ErrnoError(29);
                }
                if (length) {
                  stream.node.timestamp = Date.now();
                }
                return i;
              },
            },
            default_tty_ops: {
              get_char: function (tty) {
                if (!tty.input.length) {
                  var result = null;
                  if (ENVIRONMENT_IS_NODE) {
                    var BUFSIZE = 256;
                    var buf = Buffer.alloc(BUFSIZE);
                    var bytesRead = 0;
                    try {
                      bytesRead = nodeFS.readSync(process.stdin.fd, buf, 0, BUFSIZE, null);
                    } catch (e) {
                      if (e.toString().includes('EOF')) bytesRead = 0;
                      else throw e;
                    }
                    if (bytesRead > 0) {
                      result = buf.slice(0, bytesRead).toString('utf-8');
                    } else {
                      result = null;
                    }
                  } else if (typeof window != 'undefined' && typeof window.prompt == 'function') {
                    result = window.prompt('Input: ');
                    if (result !== null) {
                      result += '\n';
                    }
                  } else if (typeof readline == 'function') {
                    result = readline();
                    if (result !== null) {
                      result += '\n';
                    }
                  }
                  if (!result) {
                    return null;
                  }
                  tty.input = intArrayFromString(result, true);
                }
                return tty.input.shift();
              },
              put_char: function (tty, val) {
                if (val === null || val === 10) {
                  out(UTF8ArrayToString(tty.output, 0));
                  tty.output = [];
                } else {
                  if (val != 0) tty.output.push(val);
                }
              },
              flush: function (tty) {
                if (tty.output && tty.output.length > 0) {
                  out(UTF8ArrayToString(tty.output, 0));
                  tty.output = [];
                }
              },
            },
            default_tty1_ops: {
              put_char: function (tty, val) {
                if (val === null || val === 10) {
                  err(UTF8ArrayToString(tty.output, 0));
                  tty.output = [];
                } else {
                  if (val != 0) tty.output.push(val);
                }
              },
              flush: function (tty) {
                if (tty.output && tty.output.length > 0) {
                  err(UTF8ArrayToString(tty.output, 0));
                  tty.output = [];
                }
              },
            },
          };
          /**
           * @param size
           */
          function mmapAlloc(size) {
            abort();
          }
          var MEMFS = {
            ops_table: null,
            mount: function (mount) {
              return MEMFS.createNode(null, '/', 16384 | 511, 0);
            },
            createNode: function (parent, name, mode, dev) {
              if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
                throw new FS.ErrnoError(63);
              }
              if (!MEMFS.ops_table) {
                MEMFS.ops_table = {
                  dir: {
                    node: {
                      getattr: MEMFS.node_ops.getattr,
                      setattr: MEMFS.node_ops.setattr,
                      lookup: MEMFS.node_ops.lookup,
                      mknod: MEMFS.node_ops.mknod,
                      rename: MEMFS.node_ops.rename,
                      unlink: MEMFS.node_ops.unlink,
                      rmdir: MEMFS.node_ops.rmdir,
                      readdir: MEMFS.node_ops.readdir,
                      symlink: MEMFS.node_ops.symlink,
                    },
                    stream: { llseek: MEMFS.stream_ops.llseek },
                  },
                  file: {
                    node: { getattr: MEMFS.node_ops.getattr, setattr: MEMFS.node_ops.setattr },
                    stream: {
                      llseek: MEMFS.stream_ops.llseek,
                      read: MEMFS.stream_ops.read,
                      write: MEMFS.stream_ops.write,
                      allocate: MEMFS.stream_ops.allocate,
                      mmap: MEMFS.stream_ops.mmap,
                      msync: MEMFS.stream_ops.msync,
                    },
                  },
                  link: {
                    node: {
                      getattr: MEMFS.node_ops.getattr,
                      setattr: MEMFS.node_ops.setattr,
                      readlink: MEMFS.node_ops.readlink,
                    },
                    stream: {},
                  },
                  chrdev: {
                    node: { getattr: MEMFS.node_ops.getattr, setattr: MEMFS.node_ops.setattr },
                    stream: FS.chrdev_stream_ops,
                  },
                };
              }
              var node = FS.createNode(parent, name, mode, dev);
              if (FS.isDir(node.mode)) {
                node.node_ops = MEMFS.ops_table.dir.node;
                node.stream_ops = MEMFS.ops_table.dir.stream;
                node.contents = {};
              } else if (FS.isFile(node.mode)) {
                node.node_ops = MEMFS.ops_table.file.node;
                node.stream_ops = MEMFS.ops_table.file.stream;
                node.usedBytes = 0;
                node.contents = null;
              } else if (FS.isLink(node.mode)) {
                node.node_ops = MEMFS.ops_table.link.node;
                node.stream_ops = MEMFS.ops_table.link.stream;
              } else if (FS.isChrdev(node.mode)) {
                node.node_ops = MEMFS.ops_table.chrdev.node;
                node.stream_ops = MEMFS.ops_table.chrdev.stream;
              }
              node.timestamp = Date.now();
              if (parent) {
                parent.contents[name] = node;
                parent.timestamp = node.timestamp;
              }
              return node;
            },
            getFileDataAsTypedArray: function (node) {
              if (!node.contents) return new Uint8Array(0);
              if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes);
              return new Uint8Array(node.contents);
            },
            expandFileStorage: function (node, newCapacity) {
              var prevCapacity = node.contents ? node.contents.length : 0;
              if (prevCapacity >= newCapacity) return;
              var CAPACITY_DOUBLING_MAX = 1024 * 1024;
              newCapacity = Math.max(
                newCapacity,
                (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2 : 1.125)) >>> 0
              );
              if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256);
              var oldContents = node.contents;
              node.contents = new Uint8Array(newCapacity);
              if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0);
            },
            resizeFileStorage: function (node, newSize) {
              if (node.usedBytes == newSize) return;
              if (newSize == 0) {
                node.contents = null;
                node.usedBytes = 0;
              } else {
                var oldContents = node.contents;
                node.contents = new Uint8Array(newSize);
                if (oldContents) {
                  node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes)));
                }
                node.usedBytes = newSize;
              }
            },
            node_ops: {
              getattr: function (node) {
                var attr = {};
                attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
                attr.ino = node.id;
                attr.mode = node.mode;
                attr.nlink = 1;
                attr.uid = 0;
                attr.gid = 0;
                attr.rdev = node.rdev;
                if (FS.isDir(node.mode)) {
                  attr.size = 4096;
                } else if (FS.isFile(node.mode)) {
                  attr.size = node.usedBytes;
                } else if (FS.isLink(node.mode)) {
                  attr.size = node.link.length;
                } else {
                  attr.size = 0;
                }
                attr.atime = new Date(node.timestamp);
                attr.mtime = new Date(node.timestamp);
                attr.ctime = new Date(node.timestamp);
                attr.blksize = 4096;
                attr.blocks = Math.ceil(attr.size / attr.blksize);
                return attr;
              },
              setattr: function (node, attr) {
                if (attr.mode !== undefined) {
                  node.mode = attr.mode;
                }
                if (attr.timestamp !== undefined) {
                  node.timestamp = attr.timestamp;
                }
                if (attr.size !== undefined) {
                  MEMFS.resizeFileStorage(node, attr.size);
                }
              },
              lookup: function (parent, name) {
                throw FS.genericErrors[44];
              },
              mknod: function (parent, name, mode, dev) {
                return MEMFS.createNode(parent, name, mode, dev);
              },
              rename: function (old_node, new_dir, new_name) {
                if (FS.isDir(old_node.mode)) {
                  var new_node;
                  try {
                    new_node = FS.lookupNode(new_dir, new_name);
                  } catch (e) { }
                  if (new_node) {
                    for (var i in new_node.contents) {
                      throw new FS.ErrnoError(55);
                    }
                  }
                }
                delete old_node.parent.contents[old_node.name];
                old_node.parent.timestamp = Date.now();
                old_node.name = new_name;
                new_dir.contents[new_name] = old_node;
                new_dir.timestamp = old_node.parent.timestamp;
                old_node.parent = new_dir;
              },
              unlink: function (parent, name) {
                delete parent.contents[name];
                parent.timestamp = Date.now();
              },
              rmdir: function (parent, name) {
                var node = FS.lookupNode(parent, name);
                for (var i in node.contents) {
                  throw new FS.ErrnoError(55);
                }
                delete parent.contents[name];
                parent.timestamp = Date.now();
              },
              readdir: function (node) {
                var entries = ['.', '..'];
                for (var key in node.contents) {
                  if (!node.contents.hasOwnProperty(key)) {
                    continue;
                  }
                  entries.push(key);
                }
                return entries;
              },
              symlink: function (parent, newname, oldpath) {
                var node = MEMFS.createNode(parent, newname, 511 | 40960, 0);
                node.link = oldpath;
                return node;
              },
              readlink: function (node) {
                if (!FS.isLink(node.mode)) {
                  throw new FS.ErrnoError(28);
                }
                return node.link;
              },
            },
            stream_ops: {
              read: function (stream, buffer, offset, length, position) {
                var contents = stream.node.contents;
                if (position >= stream.node.usedBytes) return 0;
                var size = Math.min(stream.node.usedBytes - position, length);
                if (size > 8 && contents.subarray) {
                  buffer.set(contents.subarray(position, position + size), offset);
                } else {
                  for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
                }
                return size;
              },
              write: function (stream, buffer, offset, length, position, canOwn) {
                if (!length) return 0;
                var node = stream.node;
                node.timestamp = Date.now();
                if (buffer.subarray && (!node.contents || node.contents.subarray)) {
                  if (canOwn) {
                    node.contents = buffer.subarray(offset, offset + length);
                    node.usedBytes = length;
                    return length;
                  } else if (node.usedBytes === 0 && position === 0) {
                    node.contents = buffer.slice(offset, offset + length);
                    node.usedBytes = length;
                    return length;
                  } else if (position + length <= node.usedBytes) {
                    node.contents.set(buffer.subarray(offset, offset + length), position);
                    return length;
                  }
                }
                MEMFS.expandFileStorage(node, position + length);
                if (node.contents.subarray && buffer.subarray) {
                  node.contents.set(buffer.subarray(offset, offset + length), position);
                } else {
                  for (var i = 0; i < length; i++) {
                    node.contents[position + i] = buffer[offset + i];
                  }
                }
                node.usedBytes = Math.max(node.usedBytes, position + length);
                return length;
              },
              llseek: function (stream, offset, whence) {
                var position = offset;
                if (whence === 1) {
                  position += stream.position;
                } else if (whence === 2) {
                  if (FS.isFile(stream.node.mode)) {
                    position += stream.node.usedBytes;
                  }
                }
                if (position < 0) {
                  throw new FS.ErrnoError(28);
                }
                return position;
              },
              allocate: function (stream, offset, length) {
                MEMFS.expandFileStorage(stream.node, offset + length);
                stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
              },
              mmap: function (stream, address, length, position, prot, flags) {
                if (address !== 0) {
                  throw new FS.ErrnoError(28);
                }
                if (!FS.isFile(stream.node.mode)) {
                  throw new FS.ErrnoError(43);
                }
                var ptr;
                var allocated;
                var contents = stream.node.contents;
                if (!(flags & 2) && contents.buffer === buffer) {
                  allocated = false;
                  ptr = contents.byteOffset;
                } else {
                  if (position > 0 || position + length < contents.length) {
                    if (contents.subarray) {
                      contents = contents.subarray(position, position + length);
                    } else {
                      contents = Array.prototype.slice.call(contents, position, position + length);
                    }
                  }
                  allocated = true;
                  ptr = mmapAlloc(length);
                  if (!ptr) {
                    throw new FS.ErrnoError(48);
                  }
                  HEAP8.set(contents, ptr);
                }
                return { ptr: ptr, allocated: allocated };
              },
              msync: function (stream, buffer, offset, length, mmapFlags) {
                if (!FS.isFile(stream.node.mode)) {
                  throw new FS.ErrnoError(43);
                }
                if (mmapFlags & 2) {
                  return 0;
                }
                var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
                return 0;
              },
            },
          };

          /**
           * @param url
           * @param onload
           * @param onerror
           * @param noRunDep
           */
          function asyncLoad(url, onload, onerror, noRunDep) {
            var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
            readAsync(
              url,
              function (arrayBuffer) {
                assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
                onload(new Uint8Array(arrayBuffer));
                if (dep) removeRunDependency(dep);
              },
              function (event) {
                if (onerror) {
                  onerror();
                } else {
                  throw 'Loading data file "' + url + '" failed.';
                }
              }
            );
            if (dep) addRunDependency(dep);
          }
          var FS = {
            root: null,
            mounts: [],
            devices: {},
            streams: [],
            nextInode: 1,
            nameTable: null,
            currentPath: '/',
            initialized: false,
            ignorePermissions: true,
            ErrnoError: null,
            genericErrors: {},
            filesystems: null,
            syncFSRequests: 0,
            lookupPath: function (path, opts) {
              path = PATH_FS.resolve(FS.cwd(), path);
              opts = opts || {};
              if (!path) return { path: '', node: null };
              var defaults = { follow_mount: true, recurse_count: 0 };
              for (var key in defaults) {
                if (opts[key] === undefined) {
                  opts[key] = defaults[key];
                }
              }
              if (opts.recurse_count > 8) {
                throw new FS.ErrnoError(32);
              }
              var parts = PATH.normalizeArray(
                path.split('/').filter(function (p) {
                  return !!p;
                }),
                false
              );
              var current = FS.root;
              var current_path = '/';
              for (var i = 0; i < parts.length; i++) {
                var islast = i === parts.length - 1;
                if (islast && opts.parent) {
                  break;
                }
                current = FS.lookupNode(current, parts[i]);
                current_path = PATH.join2(current_path, parts[i]);
                if (FS.isMountpoint(current)) {
                  if (!islast || (islast && opts.follow_mount)) {
                    current = current.mounted.root;
                  }
                }
                if (!islast || opts.follow) {
                  var count = 0;
                  while (FS.isLink(current.mode)) {
                    var link = FS.readlink(current_path);
                    current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
                    var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
                    current = lookup.node;
                    if (count++ > 40) {
                      throw new FS.ErrnoError(32);
                    }
                  }
                }
              }
              return { path: current_path, node: current };
            },
            getPath: function (node) {
              var path;
              while (true) {
                if (FS.isRoot(node)) {
                  var mount = node.mount.mountpoint;
                  if (!path) return mount;
                  return mount[mount.length - 1] !== '/' ? mount + '/' + path : mount + path;
                }
                path = path ? node.name + '/' + path : node.name;
                node = node.parent;
              }
            },
            hashName: function (parentid, name) {
              var hash = 0;
              for (var i = 0; i < name.length; i++) {
                hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
              }
              return ((parentid + hash) >>> 0) % FS.nameTable.length;
            },
            hashAddNode: function (node) {
              var hash = FS.hashName(node.parent.id, node.name);
              node.name_next = FS.nameTable[hash];
              FS.nameTable[hash] = node;
            },
            hashRemoveNode: function (node) {
              var hash = FS.hashName(node.parent.id, node.name);
              if (FS.nameTable[hash] === node) {
                FS.nameTable[hash] = node.name_next;
              } else {
                var current = FS.nameTable[hash];
                while (current) {
                  if (current.name_next === node) {
                    current.name_next = node.name_next;
                    break;
                  }
                  current = current.name_next;
                }
              }
            },
            lookupNode: function (parent, name) {
              var errCode = FS.mayLookup(parent);
              if (errCode) {
                throw new FS.ErrnoError(errCode, parent);
              }
              var hash = FS.hashName(parent.id, name);
              for (var node = FS.nameTable[hash]; node; node = node.name_next) {
                var nodeName = node.name;
                if (node.parent.id === parent.id && nodeName === name) {
                  return node;
                }
              }
              return FS.lookup(parent, name);
            },
            createNode: function (parent, name, mode, rdev) {
              var node = new FS.FSNode(parent, name, mode, rdev);
              FS.hashAddNode(node);
              return node;
            },
            destroyNode: function (node) {
              FS.hashRemoveNode(node);
            },
            isRoot: function (node) {
              return node === node.parent;
            },
            isMountpoint: function (node) {
              return !!node.mounted;
            },
            isFile: function (mode) {
              return (mode & 61440) === 32768;
            },
            isDir: function (mode) {
              return (mode & 61440) === 16384;
            },
            isLink: function (mode) {
              return (mode & 61440) === 40960;
            },
            isChrdev: function (mode) {
              return (mode & 61440) === 8192;
            },
            isBlkdev: function (mode) {
              return (mode & 61440) === 24576;
            },
            isFIFO: function (mode) {
              return (mode & 61440) === 4096;
            },
            isSocket: function (mode) {
              return (mode & 49152) === 49152;
            },
            flagModes: { r: 0, 'r+': 2, w: 577, 'w+': 578, a: 1089, 'a+': 1090 },
            modeStringToFlags: function (str) {
              var flags = FS.flagModes[str];
              if (typeof flags === 'undefined') {
                throw new Error('Unknown file open mode: ' + str);
              }
              return flags;
            },
            flagsToPermissionString: function (flag) {
              var perms = ['r', 'w', 'rw'][flag & 3];
              if (flag & 512) {
                perms += 'w';
              }
              return perms;
            },
            nodePermissions: function (node, perms) {
              if (FS.ignorePermissions) {
                return 0;
              }
              if (perms.includes('r') && !(node.mode & 292)) {
                return 2;
              } else if (perms.includes('w') && !(node.mode & 146)) {
                return 2;
              } else if (perms.includes('x') && !(node.mode & 73)) {
                return 2;
              }
              return 0;
            },
            mayLookup: function (dir) {
              var errCode = FS.nodePermissions(dir, 'x');
              if (errCode) return errCode;
              if (!dir.node_ops.lookup) return 2;
              return 0;
            },
            mayCreate: function (dir, name) {
              try {
                var node = FS.lookupNode(dir, name);
                return 20;
              } catch (e) { }
              return FS.nodePermissions(dir, 'wx');
            },
            mayDelete: function (dir, name, isdir) {
              var node;
              try {
                node = FS.lookupNode(dir, name);
              } catch (e) {
                return e.errno;
              }
              var errCode = FS.nodePermissions(dir, 'wx');
              if (errCode) {
                return errCode;
              }
              if (isdir) {
                if (!FS.isDir(node.mode)) {
                  return 54;
                }
                if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
                  return 10;
                }
              } else {
                if (FS.isDir(node.mode)) {
                  return 31;
                }
              }
              return 0;
            },
            mayOpen: function (node, flags) {
              if (!node) {
                return 44;
              }
              if (FS.isLink(node.mode)) {
                return 32;
              } else if (FS.isDir(node.mode)) {
                if (FS.flagsToPermissionString(flags) !== 'r' || flags & 512) {
                  return 31;
                }
              }
              return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
            },
            MAX_OPEN_FDS: 4096,
            nextfd: function (fd_start, fd_end) {
              fd_start = fd_start || 0;
              fd_end = fd_end || FS.MAX_OPEN_FDS;
              for (var fd = fd_start; fd <= fd_end; fd++) {
                if (!FS.streams[fd]) {
                  return fd;
                }
              }
              throw new FS.ErrnoError(33);
            },
            getStream: function (fd) {
              return FS.streams[fd];
            },
            createStream: function (stream, fd_start, fd_end) {
              if (!FS.FSStream) {
                FS.FSStream = function () { };
                FS.FSStream.prototype = {
                  object: {
                    get: function () {
                      return this.node;
                    },
                    set: function (val) {
                      this.node = val;
                    },
                  },
                  isRead: {
                    get: function () {
                      return (this.flags & 2097155) !== 1;
                    },
                  },
                  isWrite: {
                    get: function () {
                      return (this.flags & 2097155) !== 0;
                    },
                  },
                  isAppend: {
                    get: function () {
                      return this.flags & 1024;
                    },
                  },
                };
              }
              var newStream = new FS.FSStream();
              for (var p in stream) {
                newStream[p] = stream[p];
              }
              stream = newStream;
              var fd = FS.nextfd(fd_start, fd_end);
              stream.fd = fd;
              FS.streams[fd] = stream;
              return stream;
            },
            closeStream: function (fd) {
              FS.streams[fd] = null;
            },
            chrdev_stream_ops: {
              open: function (stream) {
                var device = FS.getDevice(stream.node.rdev);
                stream.stream_ops = device.stream_ops;
                if (stream.stream_ops.open) {
                  stream.stream_ops.open(stream);
                }
              },
              llseek: function () {
                throw new FS.ErrnoError(70);
              },
            },
            major: function (dev) {
              return dev >> 8;
            },
            minor: function (dev) {
              return dev & 255;
            },
            makedev: function (ma, mi) {
              return (ma << 8) | mi;
            },
            registerDevice: function (dev, ops) {
              FS.devices[dev] = { stream_ops: ops };
            },
            getDevice: function (dev) {
              return FS.devices[dev];
            },
            getMounts: function (mount) {
              var mounts = [];
              var check = [mount];
              while (check.length) {
                var m = check.pop();
                mounts.push(m);
                check.push.apply(check, m.mounts);
              }
              return mounts;
            },
            syncfs: function (populate, callback) {
              if (typeof populate === 'function') {
                callback = populate;
                populate = false;
              }
              FS.syncFSRequests++;
              if (FS.syncFSRequests > 1) {
                err(
                  'warning: ' +
                  FS.syncFSRequests +
                  ' FS.syncfs operations in flight at once, probably just doing extra work'
                );
              }
              var mounts = FS.getMounts(FS.root.mount);
              var completed = 0;

              /**
               * @param errCode
               */
              function doCallback(errCode) {
                FS.syncFSRequests--;
                return callback(errCode);
              }

              /**
               * @param errCode
               */
              function done(errCode) {
                if (errCode) {
                  if (!done.errored) {
                    done.errored = true;
                    return doCallback(errCode);
                  }
                  return;
                }
                if (++completed >= mounts.length) {
                  doCallback(null);
                }
              }
              mounts.forEach(function (mount) {
                if (!mount.type.syncfs) {
                  return done(null);
                }
                mount.type.syncfs(mount, populate, done);
              });
            },
            mount: function (type, opts, mountpoint) {
              var root = mountpoint === '/';
              var pseudo = !mountpoint;
              var node;
              if (root && FS.root) {
                throw new FS.ErrnoError(10);
              } else if (!root && !pseudo) {
                var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
                mountpoint = lookup.path;
                node = lookup.node;
                if (FS.isMountpoint(node)) {
                  throw new FS.ErrnoError(10);
                }
                if (!FS.isDir(node.mode)) {
                  throw new FS.ErrnoError(54);
                }
              }
              var mount = { type: type, opts: opts, mountpoint: mountpoint, mounts: [] };
              var mountRoot = type.mount(mount);
              mountRoot.mount = mount;
              mount.root = mountRoot;
              if (root) {
                FS.root = mountRoot;
              } else if (node) {
                node.mounted = mount;
                if (node.mount) {
                  node.mount.mounts.push(mount);
                }
              }
              return mountRoot;
            },
            unmount: function (mountpoint) {
              var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
              if (!FS.isMountpoint(lookup.node)) {
                throw new FS.ErrnoError(28);
              }
              var node = lookup.node;
              var mount = node.mounted;
              var mounts = FS.getMounts(mount);
              Object.keys(FS.nameTable).forEach(function (hash) {
                var current = FS.nameTable[hash];
                while (current) {
                  var next = current.name_next;
                  if (mounts.includes(current.mount)) {
                    FS.destroyNode(current);
                  }
                  current = next;
                }
              });
              node.mounted = null;
              var idx = node.mount.mounts.indexOf(mount);
              node.mount.mounts.splice(idx, 1);
            },
            lookup: function (parent, name) {
              return parent.node_ops.lookup(parent, name);
            },
            mknod: function (path, mode, dev) {
              var lookup = FS.lookupPath(path, { parent: true });
              var parent = lookup.node;
              var name = PATH.basename(path);
              if (!name || name === '.' || name === '..') {
                throw new FS.ErrnoError(28);
              }
              var errCode = FS.mayCreate(parent, name);
              if (errCode) {
                throw new FS.ErrnoError(errCode);
              }
              if (!parent.node_ops.mknod) {
                throw new FS.ErrnoError(63);
              }
              return parent.node_ops.mknod(parent, name, mode, dev);
            },
            create: function (path, mode) {
              mode = mode !== undefined ? mode : 438;
              mode &= 4095;
              mode |= 32768;
              return FS.mknod(path, mode, 0);
            },
            mkdir: function (path, mode) {
              mode = mode !== undefined ? mode : 511;
              mode &= 511 | 512;
              mode |= 16384;
              return FS.mknod(path, mode, 0);
            },
            mkdirTree: function (path, mode) {
              var dirs = path.split('/');
              var d = '';
              for (var i = 0; i < dirs.length; ++i) {
                if (!dirs[i]) continue;
                d += '/' + dirs[i];
                try {
                  FS.mkdir(d, mode);
                } catch (e) {
                  if (e.errno != 20) throw e;
                }
              }
            },
            mkdev: function (path, mode, dev) {
              if (typeof dev === 'undefined') {
                dev = mode;
                mode = 438;
              }
              mode |= 8192;
              return FS.mknod(path, mode, dev);
            },
            symlink: function (oldpath, newpath) {
              if (!PATH_FS.resolve(oldpath)) {
                throw new FS.ErrnoError(44);
              }
              var lookup = FS.lookupPath(newpath, { parent: true });
              var parent = lookup.node;
              if (!parent) {
                throw new FS.ErrnoError(44);
              }
              var newname = PATH.basename(newpath);
              var errCode = FS.mayCreate(parent, newname);
              if (errCode) {
                throw new FS.ErrnoError(errCode);
              }
              if (!parent.node_ops.symlink) {
                throw new FS.ErrnoError(63);
              }
              return parent.node_ops.symlink(parent, newname, oldpath);
            },
            rename: function (old_path, new_path) {
              var old_dirname = PATH.dirname(old_path);
              var new_dirname = PATH.dirname(new_path);
              var old_name = PATH.basename(old_path);
              var new_name = PATH.basename(new_path);
              var lookup, old_dir, new_dir;
              lookup = FS.lookupPath(old_path, { parent: true });
              old_dir = lookup.node;
              lookup = FS.lookupPath(new_path, { parent: true });
              new_dir = lookup.node;
              if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
              if (old_dir.mount !== new_dir.mount) {
                throw new FS.ErrnoError(75);
              }
              var old_node = FS.lookupNode(old_dir, old_name);
              var relative = PATH_FS.relative(old_path, new_dirname);
              if (relative.charAt(0) !== '.') {
                throw new FS.ErrnoError(28);
              }
              relative = PATH_FS.relative(new_path, old_dirname);
              if (relative.charAt(0) !== '.') {
                throw new FS.ErrnoError(55);
              }
              var new_node;
              try {
                new_node = FS.lookupNode(new_dir, new_name);
              } catch (e) { }
              if (old_node === new_node) {
                return;
              }
              var isdir = FS.isDir(old_node.mode);
              var errCode = FS.mayDelete(old_dir, old_name, isdir);
              if (errCode) {
                throw new FS.ErrnoError(errCode);
              }
              errCode = new_node ? FS.mayDelete(new_dir, new_name, isdir) : FS.mayCreate(new_dir, new_name);
              if (errCode) {
                throw new FS.ErrnoError(errCode);
              }
              if (!old_dir.node_ops.rename) {
                throw new FS.ErrnoError(63);
              }
              if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
                throw new FS.ErrnoError(10);
              }
              if (new_dir !== old_dir) {
                errCode = FS.nodePermissions(old_dir, 'w');
                if (errCode) {
                  throw new FS.ErrnoError(errCode);
                }
              }
              FS.hashRemoveNode(old_node);
              try {
                old_dir.node_ops.rename(old_node, new_dir, new_name);
              } catch (e) {
                throw e;
              } finally {
                FS.hashAddNode(old_node);
              }
            },
            rmdir: function (path) {
              var lookup = FS.lookupPath(path, { parent: true });
              var parent = lookup.node;
              var name = PATH.basename(path);
              var node = FS.lookupNode(parent, name);
              var errCode = FS.mayDelete(parent, name, true);
              if (errCode) {
                throw new FS.ErrnoError(errCode);
              }
              if (!parent.node_ops.rmdir) {
                throw new FS.ErrnoError(63);
              }
              if (FS.isMountpoint(node)) {
                throw new FS.ErrnoError(10);
              }
              parent.node_ops.rmdir(parent, name);
              FS.destroyNode(node);
            },
            readdir: function (path) {
              var lookup = FS.lookupPath(path, { follow: true });
              var node = lookup.node;
              if (!node.node_ops.readdir) {
                throw new FS.ErrnoError(54);
              }
              return node.node_ops.readdir(node);
            },
            unlink: function (path) {
              var lookup = FS.lookupPath(path, { parent: true });
              var parent = lookup.node;
              var name = PATH.basename(path);
              var node = FS.lookupNode(parent, name);
              var errCode = FS.mayDelete(parent, name, false);
              if (errCode) {
                throw new FS.ErrnoError(errCode);
              }
              if (!parent.node_ops.unlink) {
                throw new FS.ErrnoError(63);
              }
              if (FS.isMountpoint(node)) {
                throw new FS.ErrnoError(10);
              }
              parent.node_ops.unlink(parent, name);
              FS.destroyNode(node);
            },
            readlink: function (path) {
              var lookup = FS.lookupPath(path);
              var link = lookup.node;
              if (!link) {
                throw new FS.ErrnoError(44);
              }
              if (!link.node_ops.readlink) {
                throw new FS.ErrnoError(28);
              }
              return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
            },
            stat: function (path, dontFollow) {
              var lookup = FS.lookupPath(path, { follow: !dontFollow });
              var node = lookup.node;
              if (!node) {
                throw new FS.ErrnoError(44);
              }
              if (!node.node_ops.getattr) {
                throw new FS.ErrnoError(63);
              }
              return node.node_ops.getattr(node);
            },
            lstat: function (path) {
              return FS.stat(path, true);
            },
            chmod: function (path, mode, dontFollow) {
              var node;
              if (typeof path === 'string') {
                var lookup = FS.lookupPath(path, { follow: !dontFollow });
                node = lookup.node;
              } else {
                node = path;
              }
              if (!node.node_ops.setattr) {
                throw new FS.ErrnoError(63);
              }
              node.node_ops.setattr(node, {
                mode: (mode & 4095) | (node.mode & ~4095),
                timestamp: Date.now(),
              });
            },
            lchmod: function (path, mode) {
              FS.chmod(path, mode, true);
            },
            fchmod: function (fd, mode) {
              var stream = FS.getStream(fd);
              if (!stream) {
                throw new FS.ErrnoError(8);
              }
              FS.chmod(stream.node, mode);
            },
            chown: function (path, uid, gid, dontFollow) {
              var node;
              if (typeof path === 'string') {
                var lookup = FS.lookupPath(path, { follow: !dontFollow });
                node = lookup.node;
              } else {
                node = path;
              }
              if (!node.node_ops.setattr) {
                throw new FS.ErrnoError(63);
              }
              node.node_ops.setattr(node, { timestamp: Date.now() });
            },
            lchown: function (path, uid, gid) {
              FS.chown(path, uid, gid, true);
            },
            fchown: function (fd, uid, gid) {
              var stream = FS.getStream(fd);
              if (!stream) {
                throw new FS.ErrnoError(8);
              }
              FS.chown(stream.node, uid, gid);
            },
            truncate: function (path, len) {
              if (len < 0) {
                throw new FS.ErrnoError(28);
              }
              var node;
              if (typeof path === 'string') {
                var lookup = FS.lookupPath(path, { follow: true });
                node = lookup.node;
              } else {
                node = path;
              }
              if (!node.node_ops.setattr) {
                throw new FS.ErrnoError(63);
              }
              if (FS.isDir(node.mode)) {
                throw new FS.ErrnoError(31);
              }
              if (!FS.isFile(node.mode)) {
                throw new FS.ErrnoError(28);
              }
              var errCode = FS.nodePermissions(node, 'w');
              if (errCode) {
                throw new FS.ErrnoError(errCode);
              }
              node.node_ops.setattr(node, { size: len, timestamp: Date.now() });
            },
            ftruncate: function (fd, len) {
              var stream = FS.getStream(fd);
              if (!stream) {
                throw new FS.ErrnoError(8);
              }
              if ((stream.flags & 2097155) === 0) {
                throw new FS.ErrnoError(28);
              }
              FS.truncate(stream.node, len);
            },
            utime: function (path, atime, mtime) {
              var lookup = FS.lookupPath(path, { follow: true });
              var node = lookup.node;
              node.node_ops.setattr(node, { timestamp: Math.max(atime, mtime) });
            },
            open: function (path, flags, mode, fd_start, fd_end) {
              if (path === '') {
                throw new FS.ErrnoError(44);
              }
              flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
              mode = typeof mode === 'undefined' ? 438 : mode;
              if (flags & 64) {
                mode = (mode & 4095) | 32768;
              } else {
                mode = 0;
              }
              var node;
              if (typeof path === 'object') {
                node = path;
              } else {
                path = PATH.normalize(path);
                try {
                  var lookup = FS.lookupPath(path, { follow: !(flags & 131072) });
                  node = lookup.node;
                } catch (e) { }
              }
              var created = false;
              if (flags & 64) {
                if (node) {
                  if (flags & 128) {
                    throw new FS.ErrnoError(20);
                  }
                } else {
                  node = FS.mknod(path, mode, 0);
                  created = true;
                }
              }
              if (!node) {
                throw new FS.ErrnoError(44);
              }
              if (FS.isChrdev(node.mode)) {
                flags &= ~512;
              }
              if (flags & 65536 && !FS.isDir(node.mode)) {
                throw new FS.ErrnoError(54);
              }
              if (!created) {
                var errCode = FS.mayOpen(node, flags);
                if (errCode) {
                  throw new FS.ErrnoError(errCode);
                }
              }
              if (flags & 512) {
                FS.truncate(node, 0);
              }
              flags &= ~(128 | 512 | 131072);
              var stream = FS.createStream(
                {
                  node: node,
                  path: FS.getPath(node),
                  id: node.id,
                  flags: flags,
                  mode: node.mode,
                  seekable: true,
                  position: 0,
                  stream_ops: node.stream_ops,
                  node_ops: node.node_ops,
                  ungotten: [],
                  error: false,
                },
                fd_start,
                fd_end
              );
              if (stream.stream_ops.open) {
                stream.stream_ops.open(stream);
              }
              if (Module['logReadFiles'] && !(flags & 1)) {
                if (!FS.readFiles) FS.readFiles = {};
                if (!(path in FS.readFiles)) {
                  FS.readFiles[path] = 1;
                }
              }
              return stream;
            },
            close: function (stream) {
              if (FS.isClosed(stream)) {
                throw new FS.ErrnoError(8);
              }
              if (stream.getdents) stream.getdents = null;
              try {
                if (stream.stream_ops.close) {
                  stream.stream_ops.close(stream);
                }
              } catch (e) {
                throw e;
              } finally {
                FS.closeStream(stream.fd);
              }
              stream.fd = null;
            },
            isClosed: function (stream) {
              return stream.fd === null;
            },
            llseek: function (stream, offset, whence) {
              if (FS.isClosed(stream)) {
                throw new FS.ErrnoError(8);
              }
              if (!stream.seekable || !stream.stream_ops.llseek) {
                throw new FS.ErrnoError(70);
              }
              if (whence != 0 && whence != 1 && whence != 2) {
                throw new FS.ErrnoError(28);
              }
              stream.position = stream.stream_ops.llseek(stream, offset, whence);
              stream.ungotten = [];
              return stream.position;
            },
            read: function (stream, buffer, offset, length, position) {
              if (length < 0 || position < 0) {
                throw new FS.ErrnoError(28);
              }
              if (FS.isClosed(stream)) {
                throw new FS.ErrnoError(8);
              }
              if ((stream.flags & 2097155) === 1) {
                throw new FS.ErrnoError(8);
              }
              if (FS.isDir(stream.node.mode)) {
                throw new FS.ErrnoError(31);
              }
              if (!stream.stream_ops.read) {
                throw new FS.ErrnoError(28);
              }
              var seeking = typeof position !== 'undefined';
              if (!seeking) {
                position = stream.position;
              } else if (!stream.seekable) {
                throw new FS.ErrnoError(70);
              }
              var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
              if (!seeking) stream.position += bytesRead;
              return bytesRead;
            },
            write: function (stream, buffer, offset, length, position, canOwn) {
              if (length < 0 || position < 0) {
                throw new FS.ErrnoError(28);
              }
              if (FS.isClosed(stream)) {
                throw new FS.ErrnoError(8);
              }
              if ((stream.flags & 2097155) === 0) {
                throw new FS.ErrnoError(8);
              }
              if (FS.isDir(stream.node.mode)) {
                throw new FS.ErrnoError(31);
              }
              if (!stream.stream_ops.write) {
                throw new FS.ErrnoError(28);
              }
              if (stream.seekable && stream.flags & 1024) {
                FS.llseek(stream, 0, 2);
              }
              var seeking = typeof position !== 'undefined';
              if (!seeking) {
                position = stream.position;
              } else if (!stream.seekable) {
                throw new FS.ErrnoError(70);
              }
              var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
              if (!seeking) stream.position += bytesWritten;
              return bytesWritten;
            },
            allocate: function (stream, offset, length) {
              if (FS.isClosed(stream)) {
                throw new FS.ErrnoError(8);
              }
              if (offset < 0 || length <= 0) {
                throw new FS.ErrnoError(28);
              }
              if ((stream.flags & 2097155) === 0) {
                throw new FS.ErrnoError(8);
              }
              if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
                throw new FS.ErrnoError(43);
              }
              if (!stream.stream_ops.allocate) {
                throw new FS.ErrnoError(138);
              }
              stream.stream_ops.allocate(stream, offset, length);
            },
            mmap: function (stream, address, length, position, prot, flags) {
              if ((prot & 2) !== 0 && (flags & 2) === 0 && (stream.flags & 2097155) !== 2) {
                throw new FS.ErrnoError(2);
              }
              if ((stream.flags & 2097155) === 1) {
                throw new FS.ErrnoError(2);
              }
              if (!stream.stream_ops.mmap) {
                throw new FS.ErrnoError(43);
              }
              return stream.stream_ops.mmap(stream, address, length, position, prot, flags);
            },
            msync: function (stream, buffer, offset, length, mmapFlags) {
              if (!stream || !stream.stream_ops.msync) {
                return 0;
              }
              return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
            },
            munmap: function (stream) {
              return 0;
            },
            ioctl: function (stream, cmd, arg) {
              if (!stream.stream_ops.ioctl) {
                throw new FS.ErrnoError(59);
              }
              return stream.stream_ops.ioctl(stream, cmd, arg);
            },
            readFile: function (path, opts) {
              opts = opts || {};
              opts.flags = opts.flags || 0;
              opts.encoding = opts.encoding || 'binary';
              if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
                throw new Error('Invalid encoding type "' + opts.encoding + '"');
              }
              var ret;
              var stream = FS.open(path, opts.flags);
              var stat = FS.stat(path);
              var length = stat.size;
              var buf = new Uint8Array(length);
              FS.read(stream, buf, 0, length, 0);
              if (opts.encoding === 'utf8') {
                ret = UTF8ArrayToString(buf, 0);
              } else if (opts.encoding === 'binary') {
                ret = buf;
              }
              FS.close(stream);
              return ret;
            },
            writeFile: function (path, data, opts) {
              opts = opts || {};
              opts.flags = opts.flags || 577;
              var stream = FS.open(path, opts.flags, opts.mode);
              if (typeof data === 'string') {
                var buf = new Uint8Array(lengthBytesUTF8(data) + 1);
                var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
                FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
              } else if (ArrayBuffer.isView(data)) {
                FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
              } else {
                throw new Error('Unsupported data type');
              }
              FS.close(stream);
            },
            cwd: function () {
              return FS.currentPath;
            },
            chdir: function (path) {
              var lookup = FS.lookupPath(path, { follow: true });
              if (lookup.node === null) {
                throw new FS.ErrnoError(44);
              }
              if (!FS.isDir(lookup.node.mode)) {
                throw new FS.ErrnoError(54);
              }
              var errCode = FS.nodePermissions(lookup.node, 'x');
              if (errCode) {
                throw new FS.ErrnoError(errCode);
              }
              FS.currentPath = lookup.path;
            },
            createDefaultDirectories: function () {
              FS.mkdir('/tmp');
              FS.mkdir('/home');
              FS.mkdir('/home/web_user');
            },
            createDefaultDevices: function () {
              FS.mkdir('/dev');
              FS.registerDevice(FS.makedev(1, 3), {
                read: function () {
                  return 0;
                },
                write: function (stream, buffer, offset, length, pos) {
                  return length;
                },
              });
              FS.mkdev('/dev/null', FS.makedev(1, 3));
              TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
              TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
              FS.mkdev('/dev/tty', FS.makedev(5, 0));
              FS.mkdev('/dev/tty1', FS.makedev(6, 0));
              var random_device = getRandomDevice();
              FS.createDevice('/dev', 'random', random_device);
              FS.createDevice('/dev', 'urandom', random_device);
              FS.mkdir('/dev/shm');
              FS.mkdir('/dev/shm/tmp');
            },
            createSpecialDirectories: function () {
              FS.mkdir('/proc');
              var proc_self = FS.mkdir('/proc/self');
              FS.mkdir('/proc/self/fd');
              FS.mount(
                {
                  mount: function () {
                    var node = FS.createNode(proc_self, 'fd', 16384 | 511, 73);
                    node.node_ops = {
                      lookup: function (parent, name) {
                        var fd = +name;
                        var stream = FS.getStream(fd);
                        if (!stream) throw new FS.ErrnoError(8);
                        var ret = {
                          parent: null,
                          mount: { mountpoint: 'fake' },
                          node_ops: {
                            readlink: function () {
                              return stream.path;
                            },
                          },
                        };
                        ret.parent = ret;
                        return ret;
                      },
                    };
                    return node;
                  },
                },
                {},
                '/proc/self/fd'
              );
            },
            createStandardStreams: function () {
              if (Module['stdin']) {
                FS.createDevice('/dev', 'stdin', Module['stdin']);
              } else {
                FS.symlink('/dev/tty', '/dev/stdin');
              }
              if (Module['stdout']) {
                FS.createDevice('/dev', 'stdout', null, Module['stdout']);
              } else {
                FS.symlink('/dev/tty', '/dev/stdout');
              }
              if (Module['stderr']) {
                FS.createDevice('/dev', 'stderr', null, Module['stderr']);
              } else {
                FS.symlink('/dev/tty1', '/dev/stderr');
              }
              var stdin = FS.open('/dev/stdin', 0);
              var stdout = FS.open('/dev/stdout', 1);
              var stderr = FS.open('/dev/stderr', 1);
            },
            ensureErrnoError: function () {
              if (FS.ErrnoError) return;
              FS.ErrnoError = function ErrnoError(errno, node) {
                this.node = node;
                this.setErrno = function (errno) {
                  this.errno = errno;
                };
                this.setErrno(errno);
                this.message = 'FS error';
              };
              FS.ErrnoError.prototype = new Error();
              FS.ErrnoError.prototype.constructor = FS.ErrnoError;
              [44].forEach(function (code) {
                FS.genericErrors[code] = new FS.ErrnoError(code);
                FS.genericErrors[code].stack = '<generic error, no stack>';
              });
            },
            staticInit: function () {
              FS.ensureErrnoError();
              FS.nameTable = new Array(4096);
              FS.mount(MEMFS, {}, '/');
              FS.createDefaultDirectories();
              FS.createDefaultDevices();
              FS.createSpecialDirectories();
              FS.filesystems = { MEMFS: MEMFS };
            },
            init: function (input, output, error) {
              FS.init.initialized = true;
              FS.ensureErrnoError();
              Module['stdin'] = input || Module['stdin'];
              Module['stdout'] = output || Module['stdout'];
              Module['stderr'] = error || Module['stderr'];
              FS.createStandardStreams();
            },
            quit: function () {
              FS.init.initialized = false;
              var fflush = Module['_fflush'];
              if (fflush) fflush(0);
              for (var i = 0; i < FS.streams.length; i++) {
                var stream = FS.streams[i];
                if (!stream) {
                  continue;
                }
                FS.close(stream);
              }
            },
            getMode: function (canRead, canWrite) {
              var mode = 0;
              if (canRead) mode |= 292 | 73;
              if (canWrite) mode |= 146;
              return mode;
            },
            findObject: function (path, dontResolveLastLink) {
              var ret = FS.analyzePath(path, dontResolveLastLink);
              if (ret.exists) {
                return ret.object;
              } else {
                return null;
              }
            },
            analyzePath: function (path, dontResolveLastLink) {
              try {
                var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
                path = lookup.path;
              } catch (e) { }
              var ret = {
                isRoot: false,
                exists: false,
                error: 0,
                name: null,
                path: null,
                object: null,
                parentExists: false,
                parentPath: null,
                parentObject: null,
              };
              try {
                var lookup = FS.lookupPath(path, { parent: true });
                ret.parentExists = true;
                ret.parentPath = lookup.path;
                ret.parentObject = lookup.node;
                ret.name = PATH.basename(path);
                lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
                ret.exists = true;
                ret.path = lookup.path;
                ret.object = lookup.node;
                ret.name = lookup.node.name;
                ret.isRoot = lookup.path === '/';
              } catch (e) {
                ret.error = e.errno;
              }
              return ret;
            },
            createPath: function (parent, path, canRead, canWrite) {
              parent = typeof parent === 'string' ? parent : FS.getPath(parent);
              var parts = path.split('/').reverse();
              while (parts.length) {
                var part = parts.pop();
                if (!part) continue;
                var current = PATH.join2(parent, part);
                try {
                  FS.mkdir(current);
                } catch (e) { }
                parent = current;
              }
              return current;
            },
            createFile: function (parent, name, properties, canRead, canWrite) {
              var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
              var mode = FS.getMode(canRead, canWrite);
              return FS.create(path, mode);
            },
            createDataFile: function (parent, name, data, canRead, canWrite, canOwn) {
              var path = name
                ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name)
                : parent;
              var mode = FS.getMode(canRead, canWrite);
              var node = FS.create(path, mode);
              if (data) {
                if (typeof data === 'string') {
                  var arr = new Array(data.length);
                  for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
                  data = arr;
                }
                FS.chmod(node, mode | 146);
                var stream = FS.open(node, 577);
                FS.write(stream, data, 0, data.length, 0, canOwn);
                FS.close(stream);
                FS.chmod(node, mode);
              }
              return node;
            },
            createDevice: function (parent, name, input, output) {
              var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
              var mode = FS.getMode(!!input, !!output);
              if (!FS.createDevice.major) FS.createDevice.major = 64;
              var dev = FS.makedev(FS.createDevice.major++, 0);
              FS.registerDevice(dev, {
                open: function (stream) {
                  stream.seekable = false;
                },
                close: function (stream) {
                  if (output && output.buffer && output.buffer.length) {
                    output(10);
                  }
                },
                read: function (stream, buffer, offset, length, pos) {
                  var bytesRead = 0;
                  for (var i = 0; i < length; i++) {
                    var result;
                    try {
                      result = input();
                    } catch (e) {
                      throw new FS.ErrnoError(29);
                    }
                    if (result === undefined && bytesRead === 0) {
                      throw new FS.ErrnoError(6);
                    }
                    if (result === null || result === undefined) break;
                    bytesRead++;
                    buffer[offset + i] = result;
                  }
                  if (bytesRead) {
                    stream.node.timestamp = Date.now();
                  }
                  return bytesRead;
                },
                write: function (stream, buffer, offset, length, pos) {
                  for (var i = 0; i < length; i++) {
                    try {
                      output(buffer[offset + i]);
                    } catch (e) {
                      throw new FS.ErrnoError(29);
                    }
                  }
                  if (length) {
                    stream.node.timestamp = Date.now();
                  }
                  return i;
                },
              });
              return FS.mkdev(path, mode, dev);
            },
            forceLoadFile: function (obj) {
              if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
              if (typeof XMLHttpRequest !== 'undefined') {
                throw new Error(
                  'Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.'
                );
              } else if (read_) {
                try {
                  obj.contents = intArrayFromString(read_(obj.url), true);
                  obj.usedBytes = obj.contents.length;
                } catch (e) {
                  throw new FS.ErrnoError(29);
                }
              } else {
                throw new Error('Cannot load without read() or XMLHttpRequest.');
              }
            },
            createLazyFile: function (parent, name, url, canRead, canWrite) {

              function LazyUint8Array() {
                this.lengthKnown = false;
                this.chunks = [];
              }
              LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
                if (idx > this.length - 1 || idx < 0) {
                  return undefined;
                }
                var chunkOffset = idx % this.chunkSize;
                var chunkNum = (idx / this.chunkSize) | 0;
                return this.getter(chunkNum)[chunkOffset];
              };
              LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
                this.getter = getter;
              };
              LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
                var xhr = new XMLHttpRequest();
                xhr.open('HEAD', url, false);
                xhr.send(null);
                if (!((xhr.status >= 200 && xhr.status < 300) || xhr.status === 304))
                  throw new Error("Couldn't load " + url + '. Status: ' + xhr.status);
                var datalength = Number(xhr.getResponseHeader('Content-length'));
                var header;
                var hasByteServing = (header = xhr.getResponseHeader('Accept-Ranges')) && header === 'bytes';
                var usesGzip = (header = xhr.getResponseHeader('Content-Encoding')) && header === 'gzip';
                var chunkSize = 1024 * 1024;
                if (!hasByteServing) chunkSize = datalength;
                var doXHR = function (from, to) {
                  if (from > to)
                    throw new Error('invalid range (' + from + ', ' + to + ') or no bytes requested!');
                  if (to > datalength - 1)
                    throw new Error('only ' + datalength + ' bytes available! programmer error!');
                  var xhr = new XMLHttpRequest();
                  xhr.open('GET', url, false);
                  if (datalength !== chunkSize) xhr.setRequestHeader('Range', 'bytes=' + from + '-' + to);
                  if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
                  if (xhr.overrideMimeType) {
                    xhr.overrideMimeType('text/plain; charset=x-user-defined');
                  }
                  xhr.send(null);
                  if (!((xhr.status >= 200 && xhr.status < 300) || xhr.status === 304))
                    throw new Error("Couldn't load " + url + '. Status: ' + xhr.status);
                  if (xhr.response !== undefined) {
                    return new Uint8Array(xhr.response || []);
                  } else {
                    return intArrayFromString(xhr.responseText || '', true);
                  }
                };
                var lazyArray = this;
                lazyArray.setDataGetter(function (chunkNum) {
                  var start = chunkNum * chunkSize;
                  var end = (chunkNum + 1) * chunkSize - 1;
                  end = Math.min(end, datalength - 1);
                  if (typeof lazyArray.chunks[chunkNum] === 'undefined') {
                    lazyArray.chunks[chunkNum] = doXHR(start, end);
                  }
                  if (typeof lazyArray.chunks[chunkNum] === 'undefined') throw new Error('doXHR failed!');
                  return lazyArray.chunks[chunkNum];
                });
                if (usesGzip || !datalength) {
                  chunkSize = datalength = 1;
                  datalength = this.getter(0).length;
                  chunkSize = datalength;
                  out('LazyFiles on gzip forces download of the whole file when length is accessed');
                }
                this._length = datalength;
                this._chunkSize = chunkSize;
                this.lengthKnown = true;
              };
              if (typeof XMLHttpRequest !== 'undefined') {
                if (!ENVIRONMENT_IS_WORKER)
                  throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
                var lazyArray = new LazyUint8Array();
                Object.defineProperties(lazyArray, {
                  length: {
                    get: function () {
                      if (!this.lengthKnown) {
                        this.cacheLength();
                      }
                      return this._length;
                    },
                  },
                  chunkSize: {
                    get: function () {
                      if (!this.lengthKnown) {
                        this.cacheLength();
                      }
                      return this._chunkSize;
                    },
                  },
                });
                var properties = { isDevice: false, contents: lazyArray };
              } else {
                var properties = { isDevice: false, url: url };
              }
              var node = FS.createFile(parent, name, properties, canRead, canWrite);
              if (properties.contents) {
                node.contents = properties.contents;
              } else if (properties.url) {
                node.contents = null;
                node.url = properties.url;
              }
              Object.defineProperties(node, {
                usedBytes: {
                  get: function () {
                    return this.contents.length;
                  },
                },
              });
              var stream_ops = {};
              var keys = Object.keys(node.stream_ops);
              keys.forEach(function (key) {
                var fn = node.stream_ops[key];
                stream_ops[key] = function forceLoadLazyFile() {
                  FS.forceLoadFile(node);
                  return fn.apply(null, arguments);
                };
              });
              stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
                FS.forceLoadFile(node);
                var contents = stream.node.contents;
                if (position >= contents.length) return 0;
                var size = Math.min(contents.length - position, length);
                if (contents.slice) {
                  for (var i = 0; i < size; i++) {
                    buffer[offset + i] = contents[position + i];
                  }
                } else {
                  for (var i = 0; i < size; i++) {
                    buffer[offset + i] = contents.get(position + i);
                  }
                }
                return size;
              };
              node.stream_ops = stream_ops;
              return node;
            },
            createPreloadedFile: function (
              parent,
              name,
              url,
              canRead,
              canWrite,
              onload,
              onerror,
              dontCreateFile,
              canOwn,
              preFinish
            ) {
              Browser.init();
              var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
              var dep = getUniqueRunDependency('cp ' + fullname);

              function processData(byteArray) {

                function finish(byteArray) {
                  if (preFinish) preFinish();
                  if (!dontCreateFile) {
                    FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
                  }
                  if (onload) onload();
                  removeRunDependency(dep);
                }
                var handled = false;
                Module['preloadPlugins'].forEach(function (plugin) {
                  if (handled) return;
                  if (plugin['canHandle'](fullname)) {
                    plugin['handle'](byteArray, fullname, finish, function () {
                      if (onerror) onerror();
                      removeRunDependency(dep);
                    });
                    handled = true;
                  }
                });
                if (!handled) finish(byteArray);
              }
              addRunDependency(dep);
              if (typeof url == 'string') {
                asyncLoad(
                  url,
                  function (byteArray) {
                    processData(byteArray);
                  },
                  onerror
                );
              } else {
                processData(url);
              }
            },
            indexedDB: function () {
              return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
            },
            DB_NAME: function () {
              return 'EM_FS_' + window.location.pathname;
            },
            DB_VERSION: 20,
            DB_STORE_NAME: 'FILE_DATA',
            saveFilesToDB: function (paths, onload, onerror) {
              onload = onload || function () { };
              onerror = onerror || function () { };
              var indexedDB = FS.indexedDB();
              try {
                var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
              } catch (e) {
                return onerror(e);
              }
              openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
                out('creating db');
                var db = openRequest.result;
                db.createObjectStore(FS.DB_STORE_NAME);
              };
              openRequest.onsuccess = function openRequest_onsuccess() {
                var db = openRequest.result;
                var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
                var files = transaction.objectStore(FS.DB_STORE_NAME);
                var ok = 0,
                  fail = 0,
                  total = paths.length;

                function finish() {
                  if (fail == 0) onload();
                  else onerror();
                }
                paths.forEach(function (path) {
                  var putRequest = files.put(FS.analyzePath(path).object.contents, path);
                  putRequest.onsuccess = function putRequest_onsuccess() {
                    ok++;
                    if (ok + fail == total) finish();
                  };
                  putRequest.onerror = function putRequest_onerror() {
                    fail++;
                    if (ok + fail == total) finish();
                  };
                });
                transaction.onerror = onerror;
              };
              openRequest.onerror = onerror;
            },
            loadFilesFromDB: function (paths, onload, onerror) {
              onload = onload || function () { };
              onerror = onerror || function () { };
              var indexedDB = FS.indexedDB();
              try {
                var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
              } catch (e) {
                return onerror(e);
              }
              openRequest.onupgradeneeded = onerror;
              openRequest.onsuccess = function openRequest_onsuccess() {
                var db = openRequest.result;
                try {
                  var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
                } catch (e) {
                  onerror(e);
                  return;
                }
                var files = transaction.objectStore(FS.DB_STORE_NAME);
                var ok = 0,
                  fail = 0,
                  total = paths.length;

                function finish() {
                  if (fail == 0) onload();
                  else onerror();
                }
                paths.forEach(function (path) {
                  var getRequest = files.get(path);
                  getRequest.onsuccess = function getRequest_onsuccess() {
                    if (FS.analyzePath(path).exists) {
                      FS.unlink(path);
                    }
                    FS.createDataFile(
                      PATH.dirname(path),
                      PATH.basename(path),
                      getRequest.result,
                      true,
                      true,
                      true
                    );
                    ok++;
                    if (ok + fail == total) finish();
                  };
                  getRequest.onerror = function getRequest_onerror() {
                    fail++;
                    if (ok + fail == total) finish();
                  };
                });
                transaction.onerror = onerror;
              };
              openRequest.onerror = onerror;
            },
          };
          var SYSCALLS = {
            mappings: {},
            DEFAULT_POLLMASK: 5,
            calculateAt: function (dirfd, path, allowEmpty) {
              if (path[0] === '/') {
                return path;
              }
              var dir;
              if (dirfd === -100) {
                dir = FS.cwd();
              } else {
                var dirstream = FS.getStream(dirfd);
                if (!dirstream) throw new FS.ErrnoError(8);
                dir = dirstream.path;
              }
              if (path.length == 0) {
                if (!allowEmpty) {
                  throw new FS.ErrnoError(44);
                }
                return dir;
              }
              return PATH.join2(dir, path);
            },
            doStat: function (func, path, buf) {
              try {
                var stat = func(path);
              } catch (e) {
                if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
                  return -54;
                }
                throw e;
              }
              HEAP32[buf >> 2] = stat.dev;
              HEAP32[(buf + 4) >> 2] = 0;
              HEAP32[(buf + 8) >> 2] = stat.ino;
              HEAP32[(buf + 12) >> 2] = stat.mode;
              HEAP32[(buf + 16) >> 2] = stat.nlink;
              HEAP32[(buf + 20) >> 2] = stat.uid;
              HEAP32[(buf + 24) >> 2] = stat.gid;
              HEAP32[(buf + 28) >> 2] = stat.rdev;
              HEAP32[(buf + 32) >> 2] = 0;
              (tempI64 = [
                stat.size >>> 0,
                ((tempDouble = stat.size),
                  +Math.abs(tempDouble) >= 1
                    ? tempDouble > 0
                      ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0
                      : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0
                    : 0),
              ]),
                (HEAP32[(buf + 40) >> 2] = tempI64[0]),
                (HEAP32[(buf + 44) >> 2] = tempI64[1]);
              HEAP32[(buf + 48) >> 2] = 4096;
              HEAP32[(buf + 52) >> 2] = stat.blocks;
              HEAP32[(buf + 56) >> 2] = (stat.atime.getTime() / 1e3) | 0;
              HEAP32[(buf + 60) >> 2] = 0;
              HEAP32[(buf + 64) >> 2] = (stat.mtime.getTime() / 1e3) | 0;
              HEAP32[(buf + 68) >> 2] = 0;
              HEAP32[(buf + 72) >> 2] = (stat.ctime.getTime() / 1e3) | 0;
              HEAP32[(buf + 76) >> 2] = 0;
              (tempI64 = [
                stat.ino >>> 0,
                ((tempDouble = stat.ino),
                  +Math.abs(tempDouble) >= 1
                    ? tempDouble > 0
                      ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0
                      : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0
                    : 0),
              ]),
                (HEAP32[(buf + 80) >> 2] = tempI64[0]),
                (HEAP32[(buf + 84) >> 2] = tempI64[1]);
              return 0;
            },
            doMsync: function (addr, stream, len, flags, offset) {
              var buffer = HEAPU8.slice(addr, addr + len);
              FS.msync(stream, buffer, offset, len, flags);
            },
            doMkdir: function (path, mode) {
              path = PATH.normalize(path);
              if (path[path.length - 1] === '/') path = path.substr(0, path.length - 1);
              FS.mkdir(path, mode, 0);
              return 0;
            },
            doMknod: function (path, mode, dev) {
              switch (mode & 61440) {
                case 32768:
                case 8192:
                case 24576:
                case 4096:
                case 49152:
                  break;
                default:
                  return -28;
              }
              FS.mknod(path, mode, dev);
              return 0;
            },
            doReadlink: function (path, buf, bufsize) {
              if (bufsize <= 0) return -28;
              var ret = FS.readlink(path);
              var len = Math.min(bufsize, lengthBytesUTF8(ret));
              var endChar = HEAP8[buf + len];
              stringToUTF8(ret, buf, bufsize + 1);
              HEAP8[buf + len] = endChar;
              return len;
            },
            doAccess: function (path, amode) {
              if (amode & ~7) {
                return -28;
              }
              var lookup = FS.lookupPath(path, { follow: true });
              var node = lookup.node;
              if (!node) {
                return -44;
              }
              var perms = '';
              if (amode & 4) perms += 'r';
              if (amode & 2) perms += 'w';
              if (amode & 1) perms += 'x';
              if (perms && FS.nodePermissions(node, perms)) {
                return -2;
              }
              return 0;
            },
            doDup: function (path, flags, suggestFD) {
              var suggest = FS.getStream(suggestFD);
              if (suggest) FS.close(suggest);
              return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
            },
            doReadv: function (stream, iov, iovcnt, offset) {
              var ret = 0;
              for (var i = 0; i < iovcnt; i++) {
                var ptr = HEAP32[(iov + i * 8) >> 2];
                var len = HEAP32[(iov + (i * 8 + 4)) >> 2];
                var curr = FS.read(stream, HEAP8, ptr, len, offset);
                if (curr < 0) return -1;
                ret += curr;
                if (curr < len) break;
              }
              return ret;
            },
            doWritev: function (stream, iov, iovcnt, offset) {
              var ret = 0;
              for (var i = 0; i < iovcnt; i++) {
                var ptr = HEAP32[(iov + i * 8) >> 2];
                var len = HEAP32[(iov + (i * 8 + 4)) >> 2];
                var curr = FS.write(stream, HEAP8, ptr, len, offset);
                if (curr < 0) return -1;
                ret += curr;
              }
              return ret;
            },
            varargs: undefined,
            get: function () {
              SYSCALLS.varargs += 4;
              var ret = HEAP32[(SYSCALLS.varargs - 4) >> 2];
              return ret;
            },
            getStr: function (ptr) {
              var ret = UTF8ToString(ptr);
              return ret;
            },
            getStreamFromFD: function (fd) {
              var stream = FS.getStream(fd);
              if (!stream) throw new FS.ErrnoError(8);
              return stream;
            },
            get64: function (low, high) {
              return low;
            },
          };

          function _fd_close(fd) {
            try {
              var stream = SYSCALLS.getStreamFromFD(fd);
              FS.close(stream);
              return 0;
            } catch (e) {
              if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) throw e;
              return e.errno;
            }
          }

          function _fd_read(fd, iov, iovcnt, pnum) {
            try {
              var stream = SYSCALLS.getStreamFromFD(fd);
              var num = SYSCALLS.doReadv(stream, iov, iovcnt);
              HEAP32[pnum >> 2] = num;
              return 0;
            } catch (e) {
              if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) throw e;
              return e.errno;
            }
          }

          function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {
            try {
              var stream = SYSCALLS.getStreamFromFD(fd);
              var HIGH_OFFSET = 4294967296;
              var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
              var DOUBLE_LIMIT = 9007199254740992;
              if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
                return -61;
              }
              FS.llseek(stream, offset, whence);
              (tempI64 = [
                stream.position >>> 0,
                ((tempDouble = stream.position),
                  +Math.abs(tempDouble) >= 1
                    ? tempDouble > 0
                      ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0
                      : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0
                    : 0),
              ]),
                (HEAP32[newOffset >> 2] = tempI64[0]),
                (HEAP32[(newOffset + 4) >> 2] = tempI64[1]);
              if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null;
              return 0;
            } catch (e) {
              if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) throw e;
              return e.errno;
            }
          }

          function _fd_write(fd, iov, iovcnt, pnum) {
            try {
              var stream = SYSCALLS.getStreamFromFD(fd);
              var num = SYSCALLS.doWritev(stream, iov, iovcnt);
              HEAP32[pnum >> 2] = num;
              return 0;
            } catch (e) {
              if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) throw e;
              return e.errno;
            }
          }

          function _proc_exit(code) {
            procExit(code);
          }
          var FSNode = function (parent, name, mode, rdev) {
            if (!parent) {
              parent = this;
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
          var readMode = 292 | 73;
          var writeMode = 146;
          Object.defineProperties(FSNode.prototype, {
            read: {
              get: function () {
                return (this.mode & readMode) === readMode;
              },
              set: function (val) {
                val ? (this.mode |= readMode) : (this.mode &= ~readMode);
              },
            },
            write: {
              get: function () {
                return (this.mode & writeMode) === writeMode;
              },
              set: function (val) {
                val ? (this.mode |= writeMode) : (this.mode &= ~writeMode);
              },
            },
            isFolder: {
              get: function () {
                return FS.isDir(this.mode);
              },
            },
            isDevice: {
              get: function () {
                return FS.isChrdev(this.mode);
              },
            },
          });
          FS.FSNode = FSNode;
          FS.staticInit();

          function intArrayFromString(stringy, dontAddNull, length) {
            var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;
            var u8array = new Array(len);
            var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
            if (dontAddNull) u8array.length = numBytesWritten;
            return u8array;
          }
          var asmLibraryArg = {
            fd_close: _fd_close,
            fd_read: _fd_read,
            fd_seek: _fd_seek,
            fd_write: _fd_write,
            proc_exit: _proc_exit,
          };
          var asm = createWasm();
          var _SchnorrQ_KeyGeneration = (Module['_SchnorrQ_KeyGeneration'] = function () {
            return (_SchnorrQ_KeyGeneration = Module['_SchnorrQ_KeyGeneration'] =
              Module['asm']['SchnorrQ_KeyGeneration']).apply(null, arguments);
          });
          var _KangarooTwelve = (Module['_KangarooTwelve'] = function () {
            return (_KangarooTwelve = Module['_KangarooTwelve'] = Module['asm']['KangarooTwelve']).apply(
              null,
              arguments
            );
          });
          var _SchnorrQ_Sign = (Module['_SchnorrQ_Sign'] = function () {
            return (_SchnorrQ_Sign = Module['_SchnorrQ_Sign'] = Module['asm']['SchnorrQ_Sign']).apply(
              null,
              arguments
            );
          });
          var _free = (Module['_free'] = function () {
            return (_free = Module['_free'] = Module['asm']['free']).apply(null, arguments);
          });
          var _SchnorrQ_Verify = (Module['_SchnorrQ_Verify'] = function () {
            return (_SchnorrQ_Verify = Module['_SchnorrQ_Verify'] = Module['asm']['SchnorrQ_Verify']).apply(
              null,
              arguments
            );
          });
          var _CompressedPublicKeyGeneration = (Module['_CompressedPublicKeyGeneration'] = function () {
            return (_CompressedPublicKeyGeneration = Module['_CompressedPublicKeyGeneration'] =
              Module['asm']['CompressedPublicKeyGeneration']).apply(null, arguments);
          });
          var _CompressedKeyGeneration = (Module['_CompressedKeyGeneration'] = function () {
            return (_CompressedKeyGeneration = Module['_CompressedKeyGeneration'] =
              Module['asm']['CompressedKeyGeneration']).apply(null, arguments);
          });
          var _CompressedSecretAgreement = (Module['_CompressedSecretAgreement'] = function () {
            return (_CompressedSecretAgreement = Module['_CompressedSecretAgreement'] =
              Module['asm']['CompressedSecretAgreement']).apply(null, arguments);
          });
          var _PublicKeyGeneration = (Module['_PublicKeyGeneration'] = function () {
            return (_PublicKeyGeneration = Module['_PublicKeyGeneration'] =
              Module['asm']['PublicKeyGeneration']).apply(null, arguments);
          });
          var _KeyGeneration = (Module['_KeyGeneration'] = function () {
            return (_KeyGeneration = Module['_KeyGeneration'] = Module['asm']['KeyGeneration']).apply(
              null,
              arguments
            );
          });
          var _SecretAgreement = (Module['_SecretAgreement'] = function () {
            return (_SecretAgreement = Module['_SecretAgreement'] = Module['asm']['SecretAgreement']).apply(
              null,
              arguments
            );
          });
          var __initialize = (Module['__initialize'] = function () {
            return (__initialize = Module['__initialize'] = Module['asm']['_initialize']).apply(
              null,
              arguments
            );
          });
          var _malloc = (Module['_malloc'] = function () {
            return (_malloc = Module['_malloc'] = Module['asm']['malloc']).apply(null, arguments);
          });
          var calledRun;

          function ExitStatus(status) {
            this.name = 'ExitStatus';
            this.message = 'Program terminated with exit(' + status + ')';
            this.status = status;
          }
          var calledMain = false;
          var mainArgs = undefined;
          dependenciesFulfilled = function runCaller() {
            if (!calledRun) run();
            if (!calledRun) dependenciesFulfilled = runCaller;
          };

          function callMain(args) {
            var entryFunction = Module['__initialize'];
            mainArgs = [thisProgram].concat(args);
            try {
              entryFunction();
              var ret = 0;
              exit(ret, true);
              return ret;
            } catch (e) {
              return handleException(e);
            } finally {
              calledMain = true;
            }
          }

          function run(args) {
            args = args || arguments_;
            if (runDependencies > 0) {
              return;
            }
            preRun();
            if (runDependencies > 0) {
              return;
            }

            function doRun() {
              if (calledRun) return;
              calledRun = true;
              Module['calledRun'] = true;
              if (ABORT) return;
              initRuntime();
              preMain();
              if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();
              if (shouldRunNow) callMain(args);
              postRun();
            }
            if (Module['setStatus']) {
              Module['setStatus']('Running...');
              setTimeout(function () {
                setTimeout(function () {
                  Module['setStatus']('');
                }, 1);
                doRun();
              }, 1);
            } else {
              doRun();
            }
          }
          Module['run'] = run;

          function exit(status, implicit) {
            EXITSTATUS = status;
            if (keepRuntimeAlive()) {
            } else {
              exitRuntime();
            }
            procExit(status);
          }

          function procExit(code) {
            EXITSTATUS = code;
            if (!keepRuntimeAlive()) {
              if (Module['onExit']) Module['onExit'](code);
              ABORT = true;
            }
            quit_(code, new ExitStatus(code));
          }
          if (Module['preInit']) {
            if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
            while (Module['preInit'].length > 0) {
              Module['preInit'].pop()();
            }
          }
          var shouldRunNow = true;
          if (Module['noInitialRun']) shouldRunNow = false;
          run();

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Module);

          /***/
})

      /******/
});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
        /******/
}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
        /******/
};
/******/
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
      /******/
}
/******/
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for (var key in definition) {
/******/ 				if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
            /******/
}
          /******/
}
        /******/
};
      /******/
})();
/******/
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function () {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
          /******/
} catch (e) {
/******/ 				if (typeof window === 'object') return window;
          /******/
}
        /******/
})();
      /******/
})();
/******/
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
      /******/
})();
/******/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
          /******/
}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
        /******/
};
      /******/
})();
/******/
/************************************************************************/
/******/
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/
/******/ 	return __webpack_exports__;
    /******/
})()
    ;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,